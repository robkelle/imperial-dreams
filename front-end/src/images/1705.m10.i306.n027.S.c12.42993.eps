%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1705.m10.i306.n027.S.c12.429937720 Fantasy medieval tale vector icons. Mystery magic and knight pictograms.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: Andrey Magda
%%CreationDate: 5/31/2017
%%BoundingBox: 0 0 357 367
%%HiResBoundingBox: 0 0 356.1998 366.2739
%%CropBox: 0 0 356.1998 366.2739
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1705.m10.i306.n027.S.c12.429937720 Fantasy medieval tale vector icons. Mystery magic and knight pictograms</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2017-05-31T13:46:38+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2017-05-31T13:46:38+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2017-05-31T13:46:38+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>252</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD8AwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FWOeetZ1DR9Dmv7HUtM06a3R5P9yyu0MvFahAyTQFCTtyo3+riqC/Lr&#xA;8yNJ83+W9K1J3hsdT1FJG/RbTKZawyPG5RTxZkJjLA06YqzDFXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FUs80MF8s6uzGgFlcEk9APSbFXm35XflXqflfU4PMOja2sul6&#xA;9AtxrOn3MRcFpaTRtbGN0CleZXk1dux7KvXMVdirsVdirB/zl03zxqPkW6tfJkrxau0kZcQyCGZ4&#xA;AT6iRSErxY7ftCoqMVeDfl9+XHleXzJZaV+YHl3Xo9dv1la1+tTBrS5e3jMrgGNIph8I/nYdicVT&#xA;/wAvzeYvzH1zTNIFno/lCy8vXcVwlgsM0WsRx2jCkcRdVUilAeNKd/DFX0lirsVdirsVdirsVeH/&#xA;AJ0f85DX/knzEfLuiadb3V7FCkt1dXbOY0aUcljEcZQn4OLV59+mKvK5P+cq/wA0mlV1XTo1U1Ma&#xA;27cW9jykZvuOKvX/AMpP+cjdL8438Wh63arpeuzbWzxsWtrhgK8V5fFG/grE1/mrtir2XFXYqgNb&#xA;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&#xA;4q//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:ffb7346b-30d5-bf4a-9cb2-ee507bc96ad5</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:ffb7346b-30d5-bf4a-9cb2-ee507bc96ad5</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:eb053dbb-85db-4dd9-a8d9-e930132b7c04</stRef:instanceID>
            <stRef:documentID>xmp.did:38f80a8c-eb4d-b342-b15f-345ae466d32a</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:38f80a8c-eb4d-b342-b15f-345ae466d32a</stEvt:instanceID>
                  <stEvt:when>2017-05-31T11:30:08+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ffb7346b-30d5-bf4a-9cb2-ee507bc96ad5</stEvt:instanceID>
                  <stEvt:when>2017-05-31T13:46:38+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Белый</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Черный</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>29</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>27</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Оттенки серого</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>29</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>27</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -366.274 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 366.274 li
356.2 366.274 li
356.2 0 li
cp
clp
227.078 316.359 mo
199.893 343.544 li
201.965 345.616 li
229.15 318.431 li
227.078 316.359 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.743221 .648188 .629023 .813504 cmyk
f
208.881 340.115 mo
206.827 342.169 li
208.759 344.101 li
210.813 342.048 li
208.881 340.115 li
cp
f
225.582 327.279 mo
227.635 325.226 li
225.703 323.293 li
223.649 325.346 li
225.582 327.279 li
cp
f
232.738 345.512 mo
231.901 348.367 li
229.046 349.204 li
227.379 349.693 225.58 349.376 224.181 348.347 cv
219.158 344.65 li
219.158 344.65 li
222.932 342.518 226.052 339.398 228.184 335.624 cv
231.881 340.647 li
232.91 342.046 233.227 343.845 232.738 345.512 cv
cp
228.342 325.933 mo
209.466 344.808 li
227.914 363.256 li
231.171 365.192 li
234.039 362.324 li
231.067 357.324 li
236.067 360.296 li
238.934 357.428 li
235.963 352.428 li
240.962 355.401 li
243.83 352.532 li
240.858 347.533 li
245.858 350.505 li
248.726 347.637 li
246.79 344.381 li
228.342 325.933 li
cp
f
196.174 344.884 mo
200.625 349.336 li
201.407 346.472 li
199.038 344.103 li
196.174 344.884 li
cp
f
193.887 346.66 mo
198.849 351.623 li
200.173 350.299 li
195.211 345.336 li
193.887 346.66 li
cp
f
240.682 304.827 mo
244.453 308.598 246.522 313.356 247.47 316.042 cv
248.846 316.226 249.974 316.435 250.691 316.582 cv
249.944 314.35 247.487 307.928 242.534 302.975 cv
237.575 298.016 231.157 295.563 228.927 294.818 cv
229.074 295.535 229.284 296.663 229.468 298.04 cv
232.154 298.988 236.912 301.056 240.682 304.827 cv
cp
f
238.9 315.758 mo
241.514 315.522 244.161 315.664 246.357 315.907 cv
245.372 313.244 243.399 308.958 239.975 305.534 cv
236.552 302.11 232.266 300.138 229.603 299.152 cv
229.847 301.348 229.988 303.995 229.751 306.61 cv
229.293 311.644 228.12 314.596 227.683 315.55 cv
229.959 317.826 li
230.913 317.389 233.865 316.216 238.9 315.758 cv
cp
f
310.512 314.015 mo
313.244 312.359 316.078 310.667 320.041 310.53 cv
320.041 298.549 li
318.341 301.602 li
318.092 301.635 li
308.694 302.884 301.295 310.258 298.432 320.337 cv
300.459 318.535 302.949 317.508 305.422 316.632 cv
307.275 315.977 308.92 314.98 310.512 314.015 cv
cp
f
319.541 327.165 mo
320.541 314.915 li
321.541 327.165 li
319.541 327.165 li
cp
339.166 327.164 mo
337.88 330.437 li
327.109 331.873 li
326.661 341.229 li
325.609 332.073 li
324.674 327.164 li
339.166 327.164 li
cp
334.781 348.228 mo
334.078 348.228 333.509 347.659 333.509 346.957 cv
333.509 346.254 334.078 345.685 334.781 345.685 cv
335.483 345.685 336.052 346.254 336.052 346.957 cv
336.052 347.659 335.483 348.228 334.781 348.228 cv
cp
334.781 352.844 mo
334.078 352.844 333.509 352.275 333.509 351.573 cv
333.509 350.871 334.078 350.302 334.781 350.302 cv
335.483 350.302 336.052 350.871 336.052 351.573 cv
336.052 352.275 335.483 352.844 334.781 352.844 cv
cp
334.781 357.461 mo
334.078 357.461 333.509 356.892 333.509 356.19 cv
333.509 355.487 334.078 354.918 334.781 354.918 cv
335.483 354.918 336.052 355.487 336.052 356.19 cv
336.052 356.892 335.483 357.461 334.781 357.461 cv
cp
330.456 348.228 mo
329.754 348.228 329.185 347.659 329.185 346.957 cv
329.185 346.254 329.754 345.685 330.456 345.685 cv
331.158 345.685 331.727 346.254 331.727 346.957 cv
331.727 347.659 331.158 348.228 330.456 348.228 cv
cp
330.456 352.844 mo
329.754 352.844 329.185 352.275 329.185 351.573 cv
329.185 350.871 329.754 350.302 330.456 350.302 cv
331.158 350.302 331.727 350.871 331.727 351.573 cv
331.727 352.275 331.158 352.844 330.456 352.844 cv
cp
330.456 357.461 mo
329.754 357.461 329.185 356.892 329.185 356.19 cv
329.185 355.487 329.754 354.918 330.456 354.918 cv
331.158 354.918 331.727 355.487 331.727 356.19 cv
331.727 356.892 331.158 357.461 330.456 357.461 cv
cp
326.132 348.228 mo
325.43 348.228 324.861 347.659 324.861 346.957 cv
324.861 346.254 325.43 345.685 326.132 345.685 cv
326.834 345.685 327.403 346.254 327.403 346.957 cv
327.403 347.659 326.834 348.228 326.132 348.228 cv
cp
326.132 352.844 mo
325.43 352.844 324.861 352.275 324.861 351.573 cv
324.861 350.871 325.43 350.302 326.132 350.302 cv
326.834 350.302 327.403 350.871 327.403 351.573 cv
327.403 352.275 326.834 352.844 326.132 352.844 cv
cp
326.132 357.461 mo
325.43 357.461 324.861 356.892 324.861 356.19 cv
324.861 355.487 325.43 354.918 326.132 354.918 cv
326.834 354.918 327.403 355.487 327.403 356.19 cv
327.403 356.892 326.834 357.461 326.132 357.461 cv
cp
315.474 332.073 mo
314.422 341.229 li
313.974 331.873 li
303.202 330.437 li
301.917 327.164 li
316.409 327.164 li
315.474 332.073 li
cp
314.951 348.228 mo
314.248 348.228 313.679 347.659 313.679 346.957 cv
313.679 346.254 314.248 345.685 314.951 345.685 cv
315.653 345.685 316.222 346.254 316.222 346.957 cv
316.222 347.659 315.653 348.228 314.951 348.228 cv
cp
314.951 352.844 mo
314.248 352.844 313.679 352.275 313.679 351.573 cv
313.679 350.871 314.248 350.302 314.951 350.302 cv
315.653 350.302 316.222 350.871 316.222 351.573 cv
316.222 352.275 315.653 352.844 314.951 352.844 cv
cp
314.951 357.461 mo
314.248 357.461 313.679 356.892 313.679 356.19 cv
313.679 355.487 314.248 354.918 314.951 354.918 cv
315.653 354.918 316.222 355.487 316.222 356.19 cv
316.222 356.892 315.653 357.461 314.951 357.461 cv
cp
310.626 348.228 mo
309.924 348.228 309.355 347.659 309.355 346.957 cv
309.355 346.254 309.924 345.685 310.626 345.685 cv
311.328 345.685 311.897 346.254 311.897 346.957 cv
311.897 347.659 311.328 348.228 310.626 348.228 cv
cp
310.626 352.844 mo
309.924 352.844 309.355 352.275 309.355 351.573 cv
309.355 350.871 309.924 350.302 310.626 350.302 cv
311.328 350.302 311.897 350.871 311.897 351.573 cv
311.897 352.275 311.328 352.844 310.626 352.844 cv
cp
310.626 357.461 mo
309.924 357.461 309.355 356.892 309.355 356.19 cv
309.355 355.487 309.924 354.918 310.626 354.918 cv
311.328 354.918 311.897 355.487 311.897 356.19 cv
311.897 356.892 311.328 357.461 310.626 357.461 cv
cp
306.302 348.228 mo
305.6 348.228 305.031 347.659 305.031 346.957 cv
305.031 346.254 305.6 345.685 306.302 345.685 cv
307.004 345.685 307.573 346.254 307.573 346.957 cv
307.573 347.659 307.004 348.228 306.302 348.228 cv
cp
306.302 352.844 mo
305.6 352.844 305.031 352.275 305.031 351.573 cv
305.031 350.871 305.6 350.302 306.302 350.302 cv
307.004 350.302 307.573 350.871 307.573 351.573 cv
307.573 352.275 307.004 352.844 306.302 352.844 cv
cp
306.302 357.461 mo
305.6 357.461 305.031 356.892 305.031 356.19 cv
305.031 355.487 305.6 354.918 306.302 354.918 cv
307.004 354.918 307.573 355.487 307.573 356.19 cv
307.573 356.892 307.004 357.461 306.302 357.461 cv
cp
330.442 363.106 mo
342.458 361.826 343.776 357.445 343.92 356.504 cv
343.216 355.805 341.232 353.783 340.9 352.883 cv
339.148 348.126 340.717 343.348 342.233 338.727 cv
342.445 338.079 342.659 337.429 342.864 336.778 cv
343.576 334.515 343.938 332.151 343.938 329.754 cv
343.938 328.133 343.818 326.545 343.6 324.995 cv
341.806 321.295 338.498 319.84 334.966 318.591 cv
332.913 317.864 331.175 316.81 329.493 315.792 cv
326.77 314.14 324.197 312.581 320.541 312.581 cv
316.887 312.581 314.313 314.14 311.589 315.792 cv
309.907 316.81 308.169 317.864 306.116 318.591 cv
302.57 319.845 299.248 321.307 297.461 325.041 cv
297.256 326.572 297.145 328.144 297.145 329.754 cv
297.145 332.15 297.506 334.513 298.219 336.778 cv
298.424 337.43 298.638 338.081 298.851 338.73 cv
300.366 343.35 301.933 348.127 300.182 352.882 cv
299.851 353.783 297.865 355.806 297.161 356.505 cv
297.303 357.435 298.61 361.825 310.64 363.106 cv
314.526 363.52 317.812 365.214 319.541 366.273 cv
319.541 329.618 li
321.541 329.618 li
321.541 366.274 li
323.27 365.214 326.556 363.52 330.442 363.106 cv
cp
f
335.66 316.632 mo
338.104 317.497 340.566 318.51 342.58 320.274 cv
339.64 310.314 332.189 302.858 322.991 301.635 cv
322.742 301.602 li
321.041 298.548 li
321.041 310.53 li
325.005 310.667 327.839 312.359 330.57 314.015 cv
332.162 314.98 333.807 315.977 335.66 316.632 cv
cp
f
226.144 107.48 mo
223.858 108.204 222.733 108.929 222.64 110.85 cv
222.432 115.127 230.276 117.734 233.827 122.172 cv
236.793 125.879 238.091 129.357 238.41 136.73 cv
233.12 136.73 li
233.12 136.73 235.344 129.847 232.26 124.548 cv
228.066 117.339 221.696 118.196 221.696 111.524 cv
221.696 108.137 226.144 107.48 226.144 107.48 cv
cp
f
234.411 135.73 mo
237.358 135.73 li
236.947 128.87 235.558 125.937 233.047 122.798 cv
231.986 121.471 230.478 120.293 228.917 119.169 cv
230.348 120.334 231.84 121.839 233.125 124.046 cv
235.597 128.296 234.927 133.376 234.411 135.73 cv
cp
239.455 137.73 mo
231.749 137.73 li
232.168 136.424 li
232.189 136.359 234.212 129.89 231.396 125.052 cv
229.643 122.038 227.472 120.512 225.557 119.167 cv
223.057 117.411 220.696 115.752 220.696 111.524 cv
220.696 108.163 224.164 106.762 225.998 106.491 cv
226.446 108.433 li
224.129 109.167 223.696 109.718 223.638 110.899 cv
223.54 112.924 226.144 114.761 228.901 116.705 cv
230.968 118.163 233.106 119.671 234.608 121.548 cv
237.885 125.644 239.096 129.464 239.409 136.687 cv
239.455 137.73 li
cp
f
226.144 173.249 mo
223.858 172.525 222.733 171.801 222.64 169.879 cv
222.432 165.603 230.276 162.996 233.827 158.557 cv
236.793 154.85 238.091 151.373 238.41 143.999 cv
233.12 143.999 li
233.12 143.999 235.344 150.882 232.26 156.181 cv
228.066 163.391 221.696 162.533 221.696 169.205 cv
221.696 172.592 226.144 173.249 226.144 173.249 cv
cp
f
234.411 144.999 mo
234.927 147.353 235.597 152.434 233.125 156.684 cv
231.84 158.892 230.347 160.396 228.916 161.561 cv
230.478 160.437 231.985 159.259 233.047 157.931 cv
235.558 154.792 236.947 151.86 237.358 144.999 cv
234.411 144.999 li
cp
225.998 174.238 mo
224.164 173.968 220.696 172.567 220.696 169.206 cv
220.696 164.977 223.057 163.318 225.557 161.562 cv
227.472 160.217 229.643 158.691 231.396 155.678 cv
234.222 150.821 232.189 144.371 232.168 144.306 cv
231.746 142.999 li
239.455 142.999 li
239.409 144.042 li
239.096 151.266 237.885 155.087 234.608 159.181 cv
233.106 161.059 230.968 162.567 228.9 164.025 cv
226.143 165.97 223.54 167.805 223.638 169.831 cv
223.696 171.012 224.129 171.562 226.446 172.296 cv
225.998 174.238 li
cp
f
246.882 141.365 mo
201.446 141.365 li
201.446 139.365 li
246.882 139.365 li
246.882 141.365 li
cp
f
242.567 145.218 mo
253.279 140.365 li
242.567 135.511 li
242.567 135.511 244.073 137.447 244.073 140.365 cv
244.073 143.283 242.567 145.218 242.567 145.218 cv
cp
f
201.896 139.365 mo
210.264 139.365 li
208.036 136.851 li
199.668 136.851 li
201.896 139.365 li
cp
214.709 141.365 mo
200.996 141.365 li
195.224 134.851 li
208.937 134.851 li
214.709 141.365 li
cp
f
199.669 143.878 mo
208.037 143.878 li
210.264 141.365 li
201.896 141.365 li
199.669 143.878 li
cp
208.936 145.878 mo
195.223 145.878 li
200.996 139.365 li
214.709 139.365 li
208.936 145.878 li
cp
f
207.054 140.697 mo
203.054 136.183 li
203.802 135.519 li
207.802 140.033 li
207.054 140.697 li
cp
f
203.802 145.21 mo
203.054 144.546 li
207.054 140.033 li
207.802 140.697 li
203.802 145.21 li
cp
f
200.531 133.847 mo
199.813 133.152 li
219.003 113.337 li
219.722 114.032 li
200.531 133.847 li
cp
f
219.003 167.392 mo
199.813 147.577 li
200.531 146.882 li
219.722 166.697 li
219.003 167.392 li
cp
f
30.5161 261.351 mo
26.1535 261.351 li
28.2379 255.85 li
31.9702 255.05 li
30.5161 261.351 li
cp
18.8868 257.03 mo
17.801 254.472 li
22.2964 253.07 li
18.8868 257.03 li
cp
37.2054 219.343 mo
39.1735 219.816 li
36.1447 236.456 li
41.0094 220.258 li
42.9778 220.731 li
37.4379 243.779 li
31.6653 242.392 li
37.2054 219.343 li
cp
42.7757 205.33 mo
44.3851 205.716 li
42.0765 215.32 li
40.4672 214.934 li
42.7757 205.33 li
cp
55.1779 262.831 mo
50.5676 261.683 li
48.7749 255.596 li
43.4002 254.258 li
43.4002 246.205 li
39.1669 245.141 li
45.1563 220.226 li
48.2896 220.979 li
48.5932 221.588 49.1438 222.068 49.8568 222.239 cv
51.1367 222.547 52.4241 221.759 52.7318 220.479 cv
53.0394 219.199 52.2511 217.911 50.9711 217.604 cv
50.2581 217.432 49.5494 217.609 49.0024 218.014 cv
43.7868 216.76 li
46.5634 205.212 li
47.6124 205.464 li
48.1167 203.366 46.825 201.257 44.7271 200.752 cv
42.6292 200.248 40.5198 201.54 40.0155 203.638 cv
41.0653 203.89 li
38.2887 215.438 li
33.0737 214.185 li
32.7701 213.576 32.2194 213.096 31.5065 212.925 cv
30.2264 212.617 28.9393 213.405 28.6315 214.686 cv
28.3239 215.966 29.1121 217.253 30.3923 217.561 cv
31.1052 217.732 31.8139 217.555 32.3607 217.15 cv
35.4951 217.904 li
29.5299 242.718 li
25.8131 241.783 li
23.5599 250.312 li
16.4127 252.439 li
13.1051 261.34 li
5.87065 261.999 li
3.97535 270.152 li
56.0956 270.152 li
55.1779 262.831 li
cp
f
141.031 133.131 mo
139.108 145.773 li
138.629 148.922 136.673 151.714 133.877 153.241 cv
129.028 155.89 li
124.178 153.241 li
121.382 151.715 119.427 148.922 118.948 145.773 cv
117.025 133.131 li
121.492 134.374 li
126.402 135.739 131.657 135.739 136.564 134.374 cv
141.031 133.131 li
cp
122.028 132.446 mo
114.583 130.375 li
116.971 146.073 li
117.543 149.837 119.879 153.172 123.219 154.997 cv
129.028 158.169 li
134.836 154.997 li
138.177 153.172 140.513 149.836 141.085 146.073 cv
143.473 130.375 li
136.028 132.446 li
131.47 133.715 126.588 133.717 122.028 132.446 cv
cp
f
120.688 137.264 mo
121.914 145.321 li
122.255 147.565 123.625 149.52 125.616 150.608 cv
129.028 152.472 li
132.44 150.608 li
134.431 149.52 135.801 147.565 136.142 145.321 cv
137.368 137.264 li
131.911 138.781 126.144 138.781 120.688 137.264 cv
cp
f
145.566 123.659 mo
145.566 118.659 li
147.573 118.659 li
147.573 123.659 li
145.566 123.659 li
cp
147.573 155.878 mo
129.028 163.984 li
110.483 155.878 li
110.483 125.659 li
114.49 125.659 li
120.177 125.659 li
126.184 125.659 li
131.872 125.659 li
137.878 125.659 li
143.566 125.659 li
147.573 125.659 li
147.573 155.878 li
cp
110.483 118.659 mo
112.49 118.659 li
112.49 123.659 li
110.483 123.659 li
110.483 118.659 li
cp
120.177 121.743 mo
120.177 123.659 li
114.49 123.659 li
114.49 121.743 li
120.177 121.743 li
cp
122.177 118.659 mo
124.184 118.659 li
124.184 123.659 li
122.177 123.659 li
122.177 118.659 li
cp
126.986 121.743 mo
126.986 123.659 li
126.184 123.659 li
126.184 121.743 li
126.986 121.743 li
cp
131.872 121.743 mo
131.872 123.659 li
131.07 123.659 li
131.07 121.743 li
131.872 121.743 li
cp
133.872 118.659 mo
135.878 118.659 li
135.878 123.659 li
133.872 123.659 li
133.872 118.659 li
cp
143.566 121.743 mo
143.566 123.659 li
137.878 123.659 li
137.878 121.743 li
143.566 121.743 li
cp
160.4 117.659 mo
149.573 117.659 li
149.573 116.659 li
143.566 116.659 li
143.566 117.659 li
137.878 117.659 li
137.878 116.659 li
131.872 116.659 li
131.872 117.659 li
131.07 117.659 li
131.07 105.737 li
126.986 105.737 li
126.986 117.659 li
126.184 117.659 li
126.184 116.659 li
120.177 116.659 li
120.177 117.659 li
114.49 117.659 li
114.49 116.659 li
108.483 116.659 li
108.483 117.659 li
97.6563 117.659 li
97.6563 121.743 li
108.483 121.743 li
108.483 123.659 li
108.483 125.659 li
108.483 157.187 li
126.986 165.275 li
126.986 174.993 li
131.07 174.993 li
131.07 165.275 li
149.573 157.187 li
149.573 125.659 li
149.573 123.659 li
149.573 121.743 li
160.4 121.743 li
160.4 117.659 li
cp
f
315.411 17.6958 mo
325.671 17.6958 li
320.542 10.415 li
315.411 17.6958 li
cp
f
292.46 41.9145 mo
292.46 40.9609 293.235 40.1855 294.189 40.1855 cv
295.143 40.1855 295.918 40.9609 295.918 41.9145 cv
295.918 45.7329 li
292.46 45.7329 li
292.46 41.9145 li
cp
287.177 31.1953 mo
287.177 62.6909 li
301.201 62.6909 li
301.201 31.1953 li
298.523 31.1953 li
298.523 34.1997 li
295.528 34.1997 li
295.528 31.1953 li
292.85 31.1953 li
292.85 34.1997 li
289.855 34.1997 li
289.855 31.1953 li
287.177 31.1953 li
cp
f
284.883 67.7578 mo
356.2 67.7578 li
356.2 65.812 li
354.19 63.6909 li
286.892 63.6909 li
284.883 65.812 li
284.883 67.7578 li
cp
f
321.042 16.0342 mo
320.042 16.0342 li
320.042 0 li
321.042 0 li
321.042 16.0342 li
cp
f
321.911 .0066 mo
321.911 5.0733 li
321.911 5.0733 323.701 3.8425 324.705 4.2727 cv
325.709 4.7029 325.948 6.3639 327.43 6.2683 cv
328.911 6.1727 329.94 4.3085 329.94 4.3085 cv
329.94 4.3085 327.812 5.0255 327.286 3.5915 cv
326.76 2.1575 326.103 .7833 324.813 .3531 cv
323.522 -.0771 321.911 .0066 321.911 .0066 cv
cp
f
348.623 45.7329 mo
345.165 45.7329 li
345.165 41.9145 li
345.165 40.9609 345.94 40.1855 346.894 40.1855 cv
347.847 40.1855 348.623 40.9609 348.623 41.9145 cv
348.623 45.7329 li
cp
351.228 34.1997 mo
348.233 34.1997 li
348.233 31.1953 li
345.555 31.1953 li
345.555 34.1997 li
342.56 34.1997 li
342.56 31.1953 li
339.882 31.1953 li
339.882 62.6909 li
353.905 62.6909 li
353.905 31.1953 li
351.228 31.1953 li
351.228 34.1997 li
cp
f
318.813 44.188 mo
318.813 43.2344 319.588 42.459 320.541 42.459 cv
321.495 42.459 322.27 43.2344 322.27 44.188 cv
322.27 48.0063 li
318.813 48.0063 li
318.813 44.188 li
cp
318.813 33.4878 mo
318.813 32.5342 319.588 31.7588 320.541 31.7588 cv
321.495 31.7588 322.27 32.5342 322.27 33.4878 cv
322.27 37.3061 li
318.813 37.3061 li
318.813 33.4878 li
cp
320.541 52.9399 mo
322.508 52.9399 324.108 54.54 324.108 56.5063 cv
324.108 62.6909 li
329.299 62.6909 li
329.299 23.6416 li
325.767 23.6416 li
325.767 27.3447 li
322.308 27.3447 li
322.308 23.6416 li
318.775 23.6416 li
318.775 27.3447 li
315.316 27.3447 li
315.316 23.6416 li
311.784 23.6416 li
311.784 62.6909 li
316.975 62.6909 li
316.975 56.5063 li
316.975 54.54 318.575 52.9399 320.541 52.9399 cv
cp
f
336.991 36.5244 mo
336.991 39.4345 li
335.59 38.6536 li
335.59 35.6935 li
333.333 34.3547 li
333.333 37.3953 li
331.932 36.6144 li
331.932 33.5237 li
330.299 32.555 li
330.299 62.6909 li
338.882 62.6909 li
338.882 37.6462 li
336.991 36.5244 li
cp
f
310.784 32.3367 mo
309.151 33.3054 li
309.151 36.396 li
307.75 37.1769 li
307.75 34.1363 li
305.493 35.4751 li
305.493 38.4352 li
304.092 39.2161 li
304.092 36.306 li
302.201 37.4278 li
302.201 62.6909 li
310.784 62.6909 li
310.784 32.3367 li
cp
f
316.316 22.6416 mo
316.316 26.3447 li
317.775 26.3447 li
317.775 22.6416 li
323.308 22.6416 li
323.308 26.3447 li
324.767 26.3447 li
324.767 22.6416 li
326.135 22.6416 li
326.135 18.6958 li
314.947 18.6958 li
314.947 22.6416 li
316.316 22.6416 li
cp
f
345.72 201.698 mo
344.664 200.903 343.162 201.114 342.367 202.17 cv
341.809 202.91 341.756 203.865 342.132 204.647 cv
337.127 211.29 li
337.692 211.715 li
331.676 207.183 li
330.663 208.528 li
343.31 218.055 li
344.323 216.711 li
338.872 212.604 li
343.876 205.961 li
344.731 206.106 345.634 205.792 346.192 205.052 cv
346.987 203.995 346.776 202.494 345.72 201.698 cv
cp
f
321.396 232.857 mo
321.123 232.777 320.84 232.721 320.541 232.721 cv
320.243 232.721 319.96 232.777 319.687 232.857 cv
320.541 223.813 li
321.396 232.857 li
cp
322.601 235.78 mo
322.601 236.915 321.677 237.839 320.541 237.839 cv
319.405 237.839 318.482 236.915 318.482 235.78 cv
318.482 234.644 319.405 233.721 320.541 233.721 cv
321.677 233.721 322.601 234.644 322.601 235.78 cv
cp
329.003 227.318 mo
323.212 234.318 li
322.931 233.808 322.514 233.39 322.003 233.11 cv
329.003 227.318 li
cp
323.464 236.635 mo
323.544 236.362 323.601 236.079 323.601 235.78 cv
323.601 235.482 323.544 235.199 323.464 234.926 cv
332.508 235.78 li
323.464 236.635 li
cp
322.003 238.451 mo
322.514 238.17 322.931 237.752 323.212 237.242 cv
329.003 244.242 li
322.003 238.451 li
cp
320.541 247.747 mo
319.687 238.703 li
319.96 238.783 320.243 238.839 320.541 238.839 cv
320.84 238.839 321.123 238.783 321.396 238.703 cv
320.541 247.747 li
cp
312.079 244.242 mo
317.871 237.242 li
318.151 237.753 318.569 238.17 319.079 238.451 cv
312.079 244.242 li
cp
308.575 235.78 mo
317.618 234.926 li
317.538 235.199 317.482 235.482 317.482 235.78 cv
317.482 236.079 317.538 236.362 317.618 236.635 cv
308.575 235.78 li
cp
319.079 233.109 mo
318.569 233.39 318.151 233.808 317.871 234.318 cv
312.079 227.318 li
319.079 233.109 li
cp
306.001 221.588 mo
306.001 243.773 li
306.001 247.117 308.117 250.121 311.266 251.247 cv
320.541 254.565 li
329.817 251.247 li
332.965 250.121 335.081 247.117 335.081 243.773 cv
335.081 221.588 li
320.541 216.948 li
306.001 221.588 li
cp
f
330.154 252.189 mo
320.541 255.628 li
310.929 252.189 li
307.384 250.92 305.001 247.539 305.001 243.773 cv
305.001 220.858 li
320.541 215.898 li
336.081 220.858 li
336.081 243.773 li
336.081 247.539 333.699 250.92 330.154 252.189 cv
cp
338.357 243.773 mo
338.357 219.194 li
320.541 213.509 li
302.725 219.194 li
302.725 243.773 li
302.725 248.497 305.714 252.741 310.163 254.332 cv
320.541 258.045 li
330.92 254.332 li
335.368 252.741 338.357 248.497 338.357 243.773 cv
cp
f
331.549 215.972 mo
333.8 216.69 li
336.587 212.991 li
334.806 211.649 li
331.549 215.972 li
cp
f
339.167 214.934 mo
337.386 213.592 li
334.809 217.013 li
337.06 217.731 li
339.167 214.934 li
cp
f
304.022 217.731 mo
306.273 217.013 li
303.697 213.593 li
305.052 212.571 li
304.495 212.991 li
307.282 216.69 li
309.533 215.972 li
306.277 211.649 li
310.42 208.528 li
309.407 207.183 li
303.955 211.29 li
298.951 204.647 li
299.327 203.865 299.274 202.91 298.716 202.17 cv
297.92 201.114 296.419 200.903 295.363 201.698 cv
294.306 202.494 294.095 203.995 294.891 205.052 cv
295.449 205.792 296.352 206.106 297.207 205.961 cv
302.211 212.604 li
296.759 216.711 li
297.772 218.055 li
301.915 214.934 li
304.022 217.731 li
cp
f
336.435 251.683 mo
335.95 252.254 335.411 252.778 334.826 253.254 cv
334.568 253.464 334.301 253.664 334.025 253.853 cv
333.41 254.274 332.755 254.644 332.06 254.95 cv
333.947 257.455 li
341.384 262.791 li
338.308 254.17 li
336.435 251.683 li
cp
f
306.257 253.254 mo
305.672 252.778 305.133 252.254 304.648 251.683 cv
302.774 254.17 li
299.698 262.791 li
307.135 257.455 li
309.022 254.95 li
308.327 254.644 307.672 254.274 307.057 253.853 cv
306.781 253.664 306.515 253.463 306.257 253.254 cv
cp
f
33.2715 26.2363 mo
24.9751 26.2363 18.2256 32.9858 18.2256 41.2817 cv
18.2256 49.5776 24.9751 56.3271 33.2715 56.3271 cv
41.5674 56.3271 48.3169 49.5776 48.3169 41.2817 cv
48.3169 32.9858 41.5674 26.2363 33.2715 26.2363 cv
cp
33.2715 58.3271 mo
23.8726 58.3271 16.2256 50.6807 16.2256 41.2817 cv
16.2256 31.8828 23.8726 24.2363 33.2715 24.2363 cv
42.6704 24.2363 50.3169 31.8828 50.3169 41.2817 cv
50.3169 50.6807 42.6704 58.3271 33.2715 58.3271 cv
cp
f
22.5033 29.2361 mo
22.5033 29.2361 18.2881 37.7889 23.6764 46.849 cv
29.9081 57.3272 41.9039 55.3285 41.9039 55.3285 cv
26.7772 54.6704 21.5992 26.9619 37.4882 25.7981 cv
37.4882 25.7981 30.6143 24.5862 27.1683 26.4392 cv
23.7222 28.2921 22.5033 29.2361 22.5033 29.2361 cv
cp
f
47.9304 62.9888 mo
47.2194 63.73 46.5664 64.5251 45.9812 65.3704 cv
45.6993 65.8014 45.397 66.2153 45.1343 66.659 cv
44.8587 67.093 44.6013 67.5389 44.3552 67.992 cv
44.0443 68.522 43.8663 68.8909 43.4552 69.4109 cv
43.2744 69.6664 43.0779 69.8821 42.8827 70.0861 cv
42.6915 70.3022 42.4885 70.5019 42.2772 70.6901 cv
41.8658 71.0834 41.4243 71.4325 40.9739 71.7624 cv
40.5251 72.0968 40.0589 72.3984 39.5865 72.6865 cv
38.6403 73.2614 37.6461 73.7329 36.639 74.1603 cv
35.6282 74.5833 34.6008 74.9493 33.5323 75.2532 cv
33.2725 75.3271 li
33.0106 75.2532 li
31.9413 74.9515 30.9145 74.5838 29.9034 74.1612 cv
28.8958 73.7345 27.903 73.2607 26.9549 72.6889 cv
26.4825 72.4007 26.0162 72.099 25.5673 71.7645 cv
25.1169 71.4346 24.6754 71.0853 24.2639 70.6919 cv
24.0526 70.5036 23.8496 70.3038 23.6584 70.0877 cv
23.4605 69.8811 23.2679 69.6676 23.0977 69.4294 cv
22.9178 69.2023 22.7488 68.9656 22.6024 68.7079 cv
22.3739 68.3316 li
22.1877 67.9986 li
21.9317 67.5285 21.6712 67.0786 21.4033 66.6564 cv
21.1469 66.2204 20.8391 65.8017 20.5588 65.3724 cv
20.2613 64.9541 19.959 64.5379 19.6318 64.1424 cv
19.3071 63.7455 18.9709 63.355 18.6103 62.9907 cv
17.1995 61.5016 15.4874 60.2616 13.4764 59.5611 cv
14.5285 59.7048 15.5729 60.0217 16.5449 60.5003 cv
17.0374 60.7278 17.5064 61.0051 17.96 61.3039 cv
18.4161 61.5998 18.8571 61.9222 19.2766 62.2693 cv
19.7029 62.6101 20.0954 62.9885 20.4825 63.3711 cv
20.8713 63.7538 21.2345 64.1585 21.5941 64.5682 cv
21.9428 64.987 22.2878 65.402 22.6038 65.8547 cv
22.9356 66.3031 23.2376 66.7476 23.5208 67.1868 cv
23.7473 67.5304 li
23.9542 67.8166 li
24.0826 68.0116 24.235 68.1936 24.3983 68.3695 cv
24.7048 68.7314 25.0527 69.0726 25.4304 69.3843 cv
25.7968 69.7059 26.2007 69.997 26.6149 70.2724 cv
27.0262 70.5519 27.4605 70.8059 27.9012 71.0485 cv
29.5803 71.9811 31.4182 72.7197 33.2718 73.2446 cv
35.126 72.7218 36.9621 71.98 38.6429 71.0508 cv
39.0836 70.8081 39.5179 70.554 39.9293 70.2744 cv
40.3434 69.9989 40.7473 69.7076 41.1137 69.3859 cv
41.3051 69.2311 41.486 69.0683 41.6525 68.8945 cv
41.8326 68.7258 41.9943 68.5536 42.134 68.3878 cv
42.4203 68.1111 42.7726 67.5571 43.0214 67.1933 cv
44.1904 65.3699 45.5883 63.6653 47.2677 62.2712 cv
47.6869 61.9241 48.1277 61.6016 48.5837 61.3056 cv
49.0369 61.0063 49.5061 60.7295 49.9984 60.5018 cv
50.9688 60.0232 52.0163 59.7051 53.0661 59.5615 cv
51.0544 60.2601 49.342 61.5004 47.9304 62.9888 cv
cp
48.4502 54.0977 mo
44.8054 58.4101 39.3597 61.1514 33.2712 61.1514 cv
27.1827 61.1514 21.7371 58.4101 18.0923 54.0977 cv
9.2879 56.8915 10.2949 61.91 10.2949 61.91 cv
10.2949 61.91 15.7079 60.1637 20.9344 69.1539 cv
24.1956 74.7631 33.2712 76.8158 33.2712 76.8158 cv
33.2712 76.8158 42.3469 74.7631 45.608 69.1539 cv
50.8345 60.1637 56.2476 61.91 56.2476 61.91 cv
56.2476 61.91 57.2546 56.8915 48.4502 54.0977 cv
cp
f
25.7355 24.0641 mo
25.7355 24.0641 26.4551 23.9156 27.5275 23.3778 cv
28.0518 23.1118 28.6883 22.7224 29.1714 22.2163 cv
29.4068 21.9651 29.5581 21.6637 29.5406 21.4677 cv
29.532 21.3683 29.5098 21.2977 29.4635 21.2084 cv
29.456 21.1921 li
29.4526 21.184 li
29.5093 21.4033 29.4654 21.2385 29.4768 21.2847 cv
29.4718 21.2738 li
29.4317 21.1865 li
29.4082 21.1395 29.3677 21.0272 29.3695 21.1006 cv
29.362 21.1309 29.3807 21.17 29.3832 21.1824 cv
29.3656 21.1811 29.352 21.1789 29.3417 21.1744 cv
29.2129 21.1277 28.836 20.9896 28.3628 20.9392 cv
27.8923 20.8775 27.3503 20.8331 26.7702 20.8079 cv
25.6001 20.7339 24.3174 20.7425 22.7895 20.4354 cv
22.0294 20.2561 21.1448 20.08 20.1462 19.2074 cv
19.6593 18.7753 19.217 18.0549 19.0834 17.3183 cv
19.057 17.1448 19.0361 16.9692 19.0244 16.7929 cv
19.0202 16.7268 li
19.0183 16.6938 li
19.0206 16.5642 li
19.0224 16.4998 li
19.0261 16.3707 li
19.0694 15.8941 19.1616 15.5314 19.3135 15.1906 cv
19.6149 14.4801 20.1171 13.9725 20.5718 13.6183 cv
21.034 13.266 21.4763 13.0407 21.8991 12.862 cv
22.7419 12.5115 23.5128 12.3172 24.2581 12.1491 cv
25.7493 11.844 27.1451 11.662 28.4751 11.4733 cv
29.7952 11.2726 31.0551 11.0761 32.1026 10.7495 cv
33.1671 10.4211 33.8872 9.99072 34.1738 9.48875 cv
34.4992 8.96005 34.5534 8.07629 34.2451 7.43538 cv
33.9512 6.76385 33.3702 6.19554 32.7249 5.88981 cv
32.0785 5.58102 31.3962 5.46087 30.8179 5.45093 cv
30.2422 5.46029 29.7567 5.5178 29.4392 5.59888 cv
29.1114 5.67308 28.9366 5.71265 28.9366 5.71265 cv
28.9366 5.71265 29.0781 5.59978 29.3435 5.38814 cv
29.6174 5.18632 30.0426 4.89424 30.6724 4.66379 cv
31.2973 4.44405 32.1458 4.24716 33.1521 4.41124 cv
34.1477 4.55068 35.3182 5.0654 36.1935 6.15679 cv
37.0683 7.2484 37.5187 8.87816 36.9804 10.6128 cv
36.7007 11.4785 36.1073 12.2539 35.4562 12.8047 cv
34.8022 13.3706 34.084 13.751 33.381 14.0671 cv
31.9635 14.6802 30.5399 15.0223 29.1397 15.2998 cv
27.7459 15.5884 26.3545 15.7802 25.0964 16.0578 cv
24.4697 16.1844 23.873 16.3394 23.4202 16.5205 cv
23.1985 16.6112 23.0123 16.7025 22.9143 16.7652 cv
22.8195 16.8306 22.819 16.8379 22.848 16.7677 cv
22.8468 16.7389 22.873 16.7196 22.8645 16.5819 cv
22.8543 16.7106 li
22.8492 16.7748 li
22.846 16.876 22.852 16.6567 22.8519 16.6774 cv
22.8527 16.6764 li
22.8538 16.6746 li
22.8567 16.6693 22.8491 16.6649 22.8383 16.6618 cv
22.8251 16.6036 22.7386 16.5011 22.7423 16.5337 cv
22.7386 16.5992 23.1779 16.861 23.6772 17.0168 cv
24.7075 17.3537 25.9753 17.5618 27.1916 17.8383 cv
27.8062 17.9837 28.4252 18.1297 29.0536 18.3575 cv
29.6689 18.5966 30.3598 18.8597 30.9931 19.5506 cv
31.2103 19.8385 li
31.2865 19.9576 31.3637 20.1135 31.4224 20.2541 cv
31.4997 20.4343 31.4835 20.4506 31.5019 20.5237 cv
31.5198 20.618 li
31.5535 20.7531 li
31.557 20.7919 li
31.5633 20.8693 li
31.5999 21.277 31.5377 21.7108 31.3785 22.067 cv
31.0549 22.7905 30.5357 23.1733 30.0974 23.4356 cv
29.1972 23.9497 28.393 24.0582 27.7472 24.1429 cv
26.4457 24.2771 25.7355 24.0641 25.7355 24.0641 cv
cp
f
39.9078 24.0641 mo
39.9078 24.0641 40.0241 24.0543 40.2337 24.0103 cv
40.4379 23.963 40.753 23.8922 41.0698 23.6899 cv
41.4015 23.5081 41.6327 23.0787 41.4555 22.742 cv
41.3499 22.5808 41.3201 22.6261 41.2142 22.5658 cv
41.1145 22.5271 40.9984 22.4977 40.8666 22.4749 cv
40.6086 22.4204 40.3037 22.3944 39.9766 22.3811 cv
39.3178 22.3604 38.5815 22.3323 37.7466 22.2813 cv
37.3306 22.2389 36.8906 22.1856 36.4079 22.0648 cv
35.9341 21.9301 35.3802 21.774 34.7884 21.251 cv
34.497 20.9871 34.2175 20.5732 34.0905 20.1147 cv
34.0611 20.0014 34.0253 19.8807 34.0171 19.7715 cv
34.0001 19.6027 li
33.9938 19.5178 li
33.9911 19.4753 li
33.9899 19.4541 li
33.9925 19.4019 33.9826 19.5407 33.9954 19.3318 cv
34.0046 19.198 33.9917 19.1648 34.0234 18.9478 cv
34.1632 17.9555 34.8157 17.2256 35.4578 16.8609 cv
36.7312 16.1628 37.7093 16.1527 38.6408 16.0011 cv
39.5585 15.8956 40.4052 15.8019 41.0676 15.6267 cv
41.7514 15.4252 42.0613 15.2399 42.2622 14.9027 cv
42.4719 14.6134 42.4867 13.9647 42.3314 13.4752 cv
42.1762 12.9758 41.8741 12.5557 41.4343 12.2659 cv
40.5357 11.6871 39.3448 11.6173 38.572 11.6188 cv
37.7761 11.6239 37.2961 11.6627 37.2961 11.6627 cv
37.2961 11.6627 37.3969 11.6005 37.5859 11.4838 cv
37.7783 11.374 38.0612 11.2026 38.4502 11.0433 cv
38.8368 10.8781 39.325 10.6874 39.9354 10.5898 cv
40.5398 10.4913 41.2909 10.436 42.1178 10.7068 cv
42.9397 10.9534 43.8304 11.575 44.3475 12.5103 cv
44.6145 12.9692 44.7936 13.4873 44.8792 14.0471 cv
44.9201 14.3283 44.9443 14.6204 44.9187 14.9349 cv
44.8829 15.2199 li
44.8554 15.3895 li
44.7962 15.6259 44.7655 15.7185 44.7139 15.8907 cv
44.5089 16.5094 44.0784 17.1195 43.5581 17.5351 cv
43.0419 17.961 42.4794 18.2222 41.9486 18.403 cv
40.8847 18.7684 39.8948 18.8606 38.9961 18.9748 cv
38.1268 19.0686 37.2176 19.1931 36.8886 19.3633 cv
36.7297 19.4189 36.7761 19.451 36.7483 19.3347 cv
36.7309 19.3327 36.7162 19.5224 36.6978 19.6061 cv
36.7041 19.5037 li
36.7037 19.5023 li
36.7018 19.4996 li
36.6938 19.4949 li
36.6828 19.4963 36.6875 19.4798 36.6781 19.4734 cv
36.6556 19.4373 36.6028 19.4103 36.6162 19.4497 cv
36.6433 19.5297 36.8801 19.7325 37.1821 19.8701 cv
37.4802 20.0224 37.8279 20.1616 38.1809 20.2877 cv
38.8854 20.5704 39.6221 20.7741 40.2984 21.0832 cv
40.6376 21.2361 40.9677 21.3977 41.2778 21.6087 cv
41.4302 21.7171 41.5768 21.8478 41.7042 21.9998 cv
41.8253 22.1319 41.9648 22.4187 41.9566 22.5199 cv
42.0614 22.9067 41.9862 23.2461 41.7982 23.4889 cv
41.6169 23.726 41.3905 23.8495 41.1912 23.9289 cv
40.7855 24.0822 40.458 24.0865 40.2395 24.0848 cv
40.0214 24.0805 39.9078 24.0641 39.9078 24.0641 cv
cp
f
113.417 46.6577 mo
113.417 46.6514 113.455 46.3232 113.53 45.7837 cv
113.547 45.7887 113.569 45.7941 113.587 45.7991 cv
113.982 45.9109 114.408 46.0261 114.856 46.1423 cv
114.916 46.158 114.973 46.1732 115.034 46.1889 cv
115.487 46.305 115.965 46.4211 116.461 46.5358 cv
116.535 46.5527 116.605 46.5694 116.679 46.5863 cv
117.174 46.6987 117.69 46.8079 118.22 46.9133 cv
118.307 46.9307 118.391 46.9481 118.479 46.9651 cv
119.008 47.0677 119.554 47.164 120.11 47.2541 cv
120.208 47.2701 120.303 47.2864 120.402 47.3018 cv
120.959 47.3888 121.528 47.4665 122.104 47.5358 cv
122.207 47.5481 122.309 47.5613 122.413 47.5731 cv
122.994 47.639 123.583 47.6924 124.177 47.7348 cv
124.278 47.742 124.377 47.7502 124.478 47.7566 cv
125.082 47.7952 125.69 47.8179 126.298 47.8265 cv
126.389 47.8278 126.479 47.8302 126.569 47.8307 cv
126.638 47.8312 126.707 47.834 126.776 47.834 cv
127.377 47.834 127.978 47.8174 128.575 47.7822 cv
129.09 47.752 129.607 47.7075 130.125 47.657 cv
130.829 50.946 li
129.479 51.2349 li
129.897 53.1909 li
131.247 52.902 li
131.836 55.6503 li
130.666 55.8599 129.521 56.0177 128.444 56.0962 cv
121.608 56.5954 113.957 53.8046 111.502 52.8185 cv
113.377 46.8428 li
113.417 46.6577 li
cp
132.673 41.0048 mo
128.556 38.8406 li
124.44 41.0048 li
125.226 36.4209 li
121.895 33.1746 li
126.498 32.5058 li
128.556 28.3353 li
130.614 32.5058 li
135.217 33.1746 li
131.887 36.4209 li
132.673 41.0048 li
cp
134.135 50.2388 mo
132.784 50.5276 li
132.429 48.8657 li
136.375 48.0215 li
137.504 53.3008 li
133.559 54.145 li
133.203 52.4836 li
134.553 52.1948 li
134.135 50.2388 li
cp
143.892 44.6391 mo
144.616 47.4172 145.32 50.2687 145.658 51.6477 cv
144.524 52.0748 142.298 52.8833 139.635 53.6997 cv
138.046 46.2765 li
138.343 46.2053 138.638 46.1336 138.926 46.0608 cv
138.97 46.0496 139.011 46.0384 139.055 46.0272 cv
139.612 45.8856 140.15 45.7421 140.668 45.5988 cv
140.719 45.5848 140.771 45.5711 140.822 45.5571 cv
141.336 45.4137 141.823 45.2718 142.291 45.1322 cv
142.369 45.1089 142.448 45.086 142.524 45.0629 cv
142.966 44.9299 143.379 44.8013 143.77 44.677 cv
143.808 44.6648 143.854 44.6512 143.892 44.6391 cv
cp
158.974 58.562 mo
158.919 58.4072 157.598 54.7524 153.88 53.0366 cv
151.11 51.7585 148.8 51.4061 147.634 51.3068 cv
147.305 49.9617 146.558 46.9349 145.795 44.0109 cv
145.797 44.0102 li
145.557 43.1035 li
145.285 42.0727 li
145.283 42.0735 li
144.623 39.6183 144.138 37.992 143.842 37.2368 cv
143.066 35.2622 141.418 33.5288 140.328 32.3813 cv
139.934 31.9663 139.593 31.6079 139.43 31.3838 cv
139.131 30.9473 138.626 28.6655 138.257 26.4541 cv
139.093 26.4194 140.319 26.4209 141.502 26.6094 cv
143.536 26.9346 146.16 28.3623 146.186 28.3765 cv
147.918 29.3252 li
147.658 27.3672 li
147.65 27.3105 147.464 25.9424 146.746 22.8896 cv
145.842 19.0503 137.919 15.9868 136.396 15.5425 cv
134.271 14.9209 121.275 15.6587 119.278 17.8921 cv
118.152 19.1499 117.498 23.0849 116.747 29.457 cv
116.634 30.4209 116.517 31.417 116.465 31.6172 cv
116.233 32.4668 116.178 32.6689 114.367 35.3428 cv
113.204 37.0599 112.41 40.3758 111.911 43.211 cv
111.901 43.208 li
111.722 44.3442 li
111.586 45.2031 li
111.592 45.2049 li
111.514 45.7507 111.462 46.1598 111.441 46.3325 cv
109.539 52.3925 li
101.452 52.4024 97.5156 58.8109 97.3472 59.0933 cv
96.6196 60.3203 li
98.0215 60.5864 li
98.0601 60.5937 101.902 61.3437 105.516 63.7812 cv
105.836 63.9971 106.257 64.3769 106.744 64.8164 cv
109.228 67.0591 113.653 71.0552 123.117 71.0547 cv
124.085 71.0547 125.108 71.0127 126.186 70.9228 cv
131.456 70.4829 136.286 67.7612 140.548 65.3603 cv
143.091 63.9272 145.288 62.6899 147.09 62.2212 cv
153.485 60.5586 158.125 59.8901 158.171 59.8838 cv
159.378 59.7119 li
158.974 58.562 li
cp
f
257.729 41.1411 mo
255.082 41.0874 254.234 38.2495 254.199 38.1289 cv
254.018 37.4971 li
253.458 37.8393 li
252.615 38.3545 251.318 39.918 252.44 42.1474 cv
253.01 43.2793 254.033 43.9307 254.928 44.3008 cv
253.095 44.7241 250.151 44.8799 248.874 42.084 cv
247.806 39.75 249.157 37.1924 249.171 37.1665 cv
249.633 36.31 li
248.668 36.4326 li
247.631 36.5649 245.599 37.4307 245.331 39.7612 cv
245.181 41.0801 245.487 42.2339 245.854 43.0859 cv
244.651 42.3437 243.147 41.0508 243.186 39.2427 cv
243.255 35.8955 244.939 34.5464 246.568 33.2412 cv
246.916 32.9619 li
248.413 31.7456 250.275 30.2319 249.488 28.8149 cv
249.248 28.3833 248.917 27.9883 248.607 27.6714 cv
250.04 27.5703 252.621 27.6684 254.349 29.3613 cv
255.232 30.2285 255.587 31.7949 255.931 33.3105 cv
256.247 34.7099 256.546 36.0317 257.265 36.8569 cv
258.64 38.438 260.927 38.5757 262.186 38.5146 cv
261.64 39.5171 260.331 41.1953 257.729 41.1411 cv
cp
262.902 37.4404 mo
262.869 37.4463 259.58 37.9961 258.019 36.2007 cv
257.466 35.5649 257.193 34.3628 256.905 33.0898 cv
256.53 31.4331 256.143 29.7202 255.048 28.6474 cv
252.173 25.8291 247.544 26.7817 247.349 26.8242 cv
246.267 27.0566 li
247.156 27.7153 li
247.166 27.7222 248.143 28.4512 248.614 29.3008 cv
248.965 29.9321 247.596 31.1211 246.285 32.1855 cv
245.943 32.4604 li
244.305 33.7734 242.265 35.4077 242.186 39.2217 cv
242.107 42.9204 246.762 44.689 246.96 44.7622 cv
248.719 45.4145 li
247.518 43.9731 li
247.503 43.9556 246.06 42.1929 246.325 39.8755 cv
246.464 38.6611 247.221 38.0386 247.861 37.7256 cv
247.49 38.8384 247.136 40.6899 247.964 42.5 cv
249.021 44.8105 251.071 45.522 253.055 45.522 cv
254.506 45.522 255.922 45.1411 256.889 44.7275 cv
258.621 43.9853 li
256.747 43.771 li
256.722 43.7685 254.222 43.4634 253.333 41.6982 cv
252.7 40.4385 253.104 39.583 253.504 39.1142 cv
254.098 40.4087 255.444 42.0947 257.709 42.1411 cv
257.757 42.1421 257.805 42.1426 257.853 42.1426 cv
262.177 42.1421 263.454 38.1201 263.467 38.0791 cv
263.704 37.3008 li
262.902 37.4404 li
cp
f
243.005 60.3179 mo
241.491 59.5769 239.879 59.0723 238.103 58.8421 cv
234.65 58.4475 231.176 58.6966 227.607 58.9452 cv
224.049 59.2059 220.389 59.538 216.758 59.5592 cv
214.958 59.5444 213.125 59.4638 211.551 59.1117 cv
210.785 58.95 210.06 58.652 209.793 58.3575 cv
209.565 57.9998 209.817 58.1679 209.923 57.849 cv
209.942 57.8223 209.965 57.8178 209.977 57.8028 cv
209.983 57.8059 210.052 57.6109 210.086 57.5247 cv
210.129 57.4903 210.175 57.4675 210.21 57.4675 cv
210.281 57.467 210.335 57.5074 210.458 57.4897 cv
210.687 57.4511 211.261 57.2936 211.964 57.2031 cv
213.399 57.0047 215.21 57.0061 217.039 57.0209 cv
220.733 57.0062 224.707 57.2214 229.002 55.9169 cv
231.121 55.258 233.396 54.0665 235.146 52.1531 cv
236.029 51.2201 236.717 50.1183 237.234 49.0151 cv
237.49 48.4662 237.698 47.9198 237.906 47.2553 cv
238.085 46.6124 li
238.135 46.4214 li
238.156 46.3126 li
238.197 46.0954 li
238.276 45.6619 li
238.633 43.3564 238.407 41.3268 238.062 39.5544 cv
237.72 37.77 237.192 36.2162 236.664 34.7886 cv
235.588 31.9651 234.404 29.6172 233.654 27.7521 cv
233.474 27.297 233.32 26.8715 233.216 26.5209 cv
233.175 26.3718 232.912 25.5289 233.079 25.1686 cv
233.156 24.9974 233.602 24.8279 234.085 24.8073 cv
234.245 24.7851 234.651 24.8447 234.695 24.8735 cv
236.372 25.9813 236.02 26.8703 237.434 27.4563 cv
238.157 27.7563 238.309 27.9675 240.942 27.6604 cv
243.423 27.3712 244.404 27.5814 244.978 26.7956 cv
245.212 26.4747 245.311 25.6172 245.119 25.0916 cv
244.685 23.8997 242.627 24.6291 241.614 23.0475 cv
241.208 22.413 241.503 22.2442 241.134 21.7982 cv
240.171 20.6357 238.235 21.9007 235.622 21.2582 cv
235.622 21.2582 234.914 21.0926 234.476 20.9871 cv
233.691 20.836 232.588 20.6525 231.147 21.1876 cv
230.439 21.4559 229.738 21.9691 229.223 22.5534 cv
228.967 22.8429 228.734 23.1531 228.544 23.4582 cv
228.469 23.5751 li
228.432 23.6341 li
228.497 23.4805 228.323 23.8776 228.337 23.8431 cv
228.326 23.8633 li
228.238 24.025 li
228.204 24.0954 228.188 24.0976 228.14 24.2247 cv
227.998 24.6482 li
227.882 25.0804 li
227.822 25.3949 li
227.781 25.61 227.748 25.8251 227.735 26.0142 cv
227.69 26.4237 227.69 26.7859 227.697 27.1611 cv
227.722 27.8828 227.804 28.5525 227.901 29.2184 cv
228.249 31.4228 228.843 33.553 229.382 35.7323 cv
226.943 34.6094 223.009 32.573 221.024 30.3194 cv
217.191 25.9668 213.378 17.4087 213.378 17.4087 cv
213.378 17.4087 210.432 18.3618 208.613 18.1019 cv
206.793 17.8419 201.507 15.849 195.009 15.5024 cv
188.51 15.1557 178.892 17.582 178.892 17.582 cv
178.892 17.582 180.638 17.8896 182.362 18.7162 cv
188.376 17.3447 193.31 17.2471 197.028 18.4756 cv
197.337 18.5796 li
198.586 19.0029 201.904 20.1269 206.354 20.6108 cv
207.852 20.7729 209.361 20.8408 210.854 20.8472 cv
211.405 20.8452 li
211.354 21.3945 li
211.193 23.081 211.097 26.7827 211.745 29.9575 cv
212.119 31.792 212.577 33.0019 213.062 34.2832 cv
213.287 34.8804 213.513 35.477 213.729 36.1352 cv
214.644 38.9369 215.068 41.9885 215.01 45.23 cv
216.231 42.9574 219.314 38.4277 224.52 38.3679 cv
227.262 38.3364 229.193 39.2749 230.258 39.9868 cv
230.299 40.254 230.352 40.5275 230.383 40.7897 cv
230.526 42.0358 230.492 43.221 230.25 44.1263 cv
229.706 46.1389 228.859 47.1707 226.359 48.198 cv
223.876 49.1662 220.398 49.5981 216.666 49.9889 cv
214.774 50.2179 212.807 50.3935 210.547 51.0049 cv
209.422 51.3436 208.148 51.7842 206.869 52.9101 cv
206.248 53.4733 205.658 54.2449 205.328 55.1058 cv
205.161 55.5344 205.047 55.9605 204.988 56.3889 cv
204.954 56.8066 li
204.936 57.0267 204.918 57.256 204.92 57.4655 cv
204.922 58.2469 205.089 59.1787 205.548 60.0047 cv
205.994 60.8365 206.669 61.4772 207.318 61.8658 cv
208.619 62.6576 209.774 62.8487 210.853 63.0321 cv
213.008 63.3162 214.962 63.2078 216.887 63.0725 cv
220.717 62.7971 224.361 62.2743 227.88 61.8906 cv
231.383 61.5192 234.794 61.124 237.843 61.3273 cv
239.306 61.4441 240.787 61.8091 242.059 62.3433 cv
243.31 62.8741 244.473 63.6807 244.823 64.5451 cv
244.991 64.9369 244.961 65.3833 244.752 65.7284 cv
244.726 65.7467 244.703 65.7676 244.675 65.7905 cv
244.591 65.8367 244.499 65.8878 244.377 65.9279 cv
244.139 66.01 243.859 66.0739 243.563 66.1134 cv
242.375 66.2753 241.118 66.2657 239.958 66.3266 cv
237.634 66.4243 235.491 66.7166 233.975 67.636 cv
232.438 68.5478 231.869 69.9427 231.722 70.8042 cv
231.64 71.2493 231.632 71.594 231.633 71.8244 cv
231.64 72.0546 231.644 72.1733 231.644 72.1733 cv
231.644 72.1733 231.654 72.0553 231.672 71.8265 cv
231.698 71.5992 231.745 71.2608 231.873 70.8416 cv
232.11 70.0158 232.808 68.819 234.252 68.1521 cv
235.687 67.4651 237.684 67.3763 239.954 67.5083 cv
241.103 67.5596 242.309 67.7007 243.707 67.6551 cv
244.057 67.6419 244.428 67.6041 244.831 67.5105 cv
245.031 67.4658 245.247 67.3895 245.467 67.2904 cv
245.58 67.2316 245.695 67.1595 245.807 67.0887 cv
245.932 66.9982 246.078 66.8528 246.194 66.7193 cv
246.778 65.9641 246.937 64.8771 246.64 63.9343 cv
245.986 62.069 244.467 61.0842 243.005 60.3179 cv
cp
f
202.475 32.7051 mo
202.759 31.5503 203.053 30.3564 203.773 28.8794 cv
204.941 26.4855 207.167 23.987 208.903 22.3577 cv
206.374 23.0157 202.708 23.957 200.188 24.1631 cv
198.322 24.3159 196.978 24.3315 195.897 24.3442 cv
194.527 24.3603 193.537 24.3721 192.257 24.6338 cv
190.27 25.0405 188.337 25.921 186.477 27.2515 cv
188.634 27.2353 194.101 27.6354 196.711 31.8953 cv
198.959 35.5627 199.242 38.4125 199.195 39.8534 cv
200.082 38.6829 200.809 37.4528 201.367 36.1704 cv
201.953 34.8247 202.219 33.7471 202.475 32.7051 cv
cp
f
192.056 23.6543 mo
193.43 23.373 194.514 23.3603 195.886 23.3442 cv
196.95 23.332 198.275 23.3164 200.106 23.166 cv
202.168 22.9977 205.072 22.3066 207.431 21.7041 cv
207.036 21.6727 206.64 21.6476 206.247 21.605 cv
201.688 21.1094 198.294 19.9595 197.016 19.5264 cv
196.715 19.4248 li
193.381 18.3248 188.991 18.3406 183.637 19.4498 cv
184.367 19.9556 185.001 20.5785 185.365 21.3474 cv
186.089 22.8807 185.849 25.4008 185.676 26.6041 cv
187.718 25.1019 189.851 24.1055 192.056 23.6543 cv
cp
f
208.378 39.4866 mo
210.939 40.7569 213.127 44.2346 213.996 45.761 cv
214.113 42.4255 213.71 39.2979 212.777 36.4458 cv
212.567 35.8027 212.347 35.2202 212.126 34.6372 cv
211.649 33.3755 211.155 32.0708 210.765 30.1577 cv
210.237 27.5756 210.166 24.6216 210.278 22.457 cv
208.446 24.0398 205.859 26.8855 204.672 29.3179 cv
203.998 30.6992 203.729 31.7895 203.445 32.9438 cv
203.18 34.0264 202.904 35.146 202.283 36.5698 cv
201.689 37.9341 200.915 39.2402 199.973 40.4808 cv
201.76 39.7107 205.842 38.2284 208.378 39.4866 cv
cp
f
323.313 157.107 mo
317.656 158.13 311.899 154.351 306.381 148.833 cv
300.862 143.314 297.084 137.558 298.107 131.9 cv
302.743 129.723 308.178 129.45 313.075 131.346 cv
313.035 131.533 313.003 131.729 313.003 131.934 cv
312.968 133.015 313.438 134.166 314.047 135.144 cv
314.651 136.133 315.419 136.961 316.018 137.539 cv
316.323 137.825 316.579 138.056 316.768 138.207 cv
316.953 138.361 317.059 138.45 317.059 138.45 cv
317.059 138.45 316.976 138.34 316.83 138.148 cv
316.681 137.96 316.485 137.679 316.258 137.339 cv
315.814 136.657 315.276 135.707 314.949 134.712 cv
314.602 133.733 314.498 132.692 314.679 132.132 cv
314.702 132.03 314.738 131.953 314.773 131.884 cv
321.242 124.412 li
322.062 126.3 323.443 128.262 325.197 130.017 cv
326.952 131.772 328.914 133.152 330.802 133.972 cv
323.19 140.562 li
323.495 141.24 li
325.792 146.363 325.625 152.185 323.313 157.107 cv
cp
311.59 163.196 mo
310.816 163.97 309.56 163.97 308.786 163.196 cv
308.011 162.421 308.011 161.166 308.786 160.391 cv
309.56 159.617 310.816 159.617 311.59 160.391 cv
312.364 161.166 312.364 162.421 311.59 163.196 cv
cp
307.707 155.434 mo
308.178 154.964 308.941 154.964 309.412 155.434 cv
309.883 155.905 309.883 156.668 309.412 157.139 cv
308.941 157.61 308.178 157.61 307.707 157.139 cv
307.236 156.668 307.236 155.905 307.707 155.434 cv
cp
304.977 163.381 mo
303.367 164.991 300.757 164.991 299.147 163.381 cv
297.537 161.771 297.537 159.161 299.147 157.551 cv
300.757 155.94 303.367 155.94 304.977 157.551 cv
306.587 159.161 306.587 161.771 304.977 163.381 cv
cp
323.901 118.49 mo
323.981 119.031 324.125 119.602 324.336 120.2 cv
325.085 122.327 326.602 124.602 328.606 126.607 cv
330.611 128.612 332.887 130.128 335.013 130.878 cv
335.615 131.09 336.186 131.227 336.729 131.306 cv
335.725 132.311 li
335.111 132.925 333.85 132.958 332.269 132.401 cv
330.418 131.749 328.409 130.4 326.611 128.603 cv
324.813 126.805 323.465 124.796 322.813 122.945 cv
322.255 121.363 322.288 120.104 322.902 119.489 cv
323.901 118.49 li
cp
327.771 115.594 mo
328.342 115.594 329.02 115.726 329.769 115.989 cv
330.013 116.075 330.26 116.175 330.508 116.284 cv
329.793 117.345 li
328.725 118.413 329.667 121.087 331.897 123.317 cv
334.127 125.547 336.801 126.489 337.869 125.42 cv
338.929 124.705 li
339.039 124.954 339.139 125.201 339.225 125.445 cv
339.781 127.027 339.749 128.287 339.134 128.901 cv
338.52 129.515 337.259 129.549 335.678 128.991 cv
333.828 128.34 331.818 126.991 330.021 125.193 cv
328.223 123.395 326.874 121.386 326.223 119.536 cv
325.665 117.954 325.698 116.694 326.313 116.08 cv
326.636 115.756 327.138 115.594 327.771 115.594 cv
cp
333.043 134.676 mo
333.471 134.754 333.882 134.795 334.271 134.795 cv
335.446 134.795 336.428 134.436 337.139 133.725 cv
340.548 130.315 li
341.746 129.117 341.946 127.151 341.11 124.78 cv
340.971 124.383 340.796 123.98 340.604 123.575 cv
342.412 122.356 li
342.594 122.272 342.76 122.166 342.899 122.027 cv
344.184 120.742 343.051 117.527 340.369 114.845 cv
337.687 112.162 334.471 111.03 333.186 112.314 cv
333.047 112.454 332.941 112.62 332.858 112.802 cv
331.638 114.609 li
331.234 114.418 330.831 114.243 330.434 114.103 cv
328.059 113.266 326.096 113.469 324.898 114.665 cv
324.898 114.666 324.897 114.667 324.896 114.668 cv
321.488 118.075 li
320.544 119.019 320.231 120.443 320.544 122.163 cv
314.104 129.601 li
306.365 126.462 297.329 128.255 291.405 134.178 cv
283.236 142.347 283.236 155.639 291.405 163.808 cv
295.362 167.766 300.624 169.945 306.221 169.945 cv
311.817 169.945 317.078 167.765 321.035 163.808 cv
326.959 157.884 328.753 148.85 325.613 141.109 cv
333.043 134.676 li
cp
f
341.013 139.662 mo
340.755 140.344 339.994 140.687 339.312 140.43 cv
338.63 140.172 338.286 139.41 338.544 138.728 cv
338.802 138.046 339.564 137.703 340.246 137.961 cv
340.927 138.219 341.271 138.98 341.013 139.662 cv
cp
354.649 140.654 mo
339.76 136.364 li
338.955 136.132 338.106 136.557 337.809 137.341 cv
337.488 138.189 li
337.144 138.239 336.645 138.231 336.184 137.905 cv
335.412 137.357 335.437 136.406 335.438 136.366 cv
333.439 136.287 li
333.431 136.499 333.404 138.385 335.026 139.536 cv
335.605 139.946 336.197 140.126 336.733 140.187 cv
334.999 144.77 li
334.702 145.556 335.059 146.439 335.82 146.797 cv
350.352 153.629 li
351.233 154.043 352.277 153.587 352.571 152.659 cv
355.738 142.689 li
356.012 141.825 355.52 140.905 354.649 140.654 cv
cp
f
210.041 210.315 mo
209.713 210.315 209.405 210.444 209.176 210.679 cv
208.946 210.914 208.824 211.224 208.832 211.552 cv
209.869 256.923 li
209.884 257.585 210.415 258.104 211.078 258.104 cv
238.465 258.104 li
239.117 258.104 239.659 257.575 239.674 256.923 cv
240.711 211.552 li
240.719 211.224 240.597 210.914 240.367 210.679 cv
240.138 210.444 239.83 210.315 239.502 210.315 cv
210.041 210.315 li
cp
238.465 260.104 mo
211.078 260.104 li
209.349 260.104 207.909 258.698 207.869 256.968 cv
206.832 211.597 li
206.813 210.727 207.137 209.904 207.746 209.281 cv
208.354 208.658 209.17 208.315 210.041 208.315 cv
239.502 208.315 li
240.373 208.315 241.188 208.658 241.797 209.281 cv
242.406 209.904 242.73 210.727 242.711 211.597 cv
241.674 256.968 li
241.634 258.698 240.194 260.104 238.465 260.104 cv
cp
f
212.966 254.962 mo
236.576 254.962 li
237.523 213.458 li
212.019 213.458 li
212.966 254.962 li
cp
237.553 255.962 mo
211.989 255.962 li
210.995 212.458 li
238.547 212.458 li
237.553 255.962 li
cp
f
227.897 236.246 mo
226.861 236.246 226.021 235.406 226.021 234.37 cv
226.021 233.334 226.861 232.494 227.897 232.494 cv
228.933 232.494 229.773 233.334 229.773 234.37 cv
229.773 235.406 228.933 236.246 227.897 236.246 cv
cp
221.372 236.246 mo
220.336 236.246 219.497 235.406 219.497 234.37 cv
219.497 233.334 220.336 232.494 221.372 232.494 cv
222.408 232.494 223.248 233.334 223.248 234.37 cv
223.248 235.406 222.408 236.246 221.372 236.246 cv
cp
224.635 224.982 mo
220.28 225.055 216.683 228.821 216.801 233.175 cv
216.879 236.062 218.496 238.562 220.858 239.897 cv
220.858 242.032 li
220.858 242.741 221.358 243.358 222.054 243.488 cv
222.779 243.623 223.758 243.759 224.771 243.759 cv
225.77 243.759 226.734 243.627 227.456 243.494 cv
228.166 243.362 228.685 242.754 228.685 242.032 cv
228.685 239.897 li
231.107 238.528 232.744 235.934 232.744 232.954 cv
232.744 228.505 229.101 224.908 224.635 224.982 cv
cp
f
187.022 222.299 mo
186.055 222.604 185.529 223.644 185.856 224.603 cv
198.14 260.623 li
198.456 261.552 199.457 262.057 200.392 261.762 cv
206.18 259.935 li
205.188 216.564 li
187.022 222.299 li
cp
f
262.247 222.299 mo
244.353 216.649 li
243.361 260.02 li
248.877 261.762 li
249.813 262.057 250.813 261.552 251.13 260.623 cv
263.413 224.603 li
263.74 223.644 263.214 222.604 262.247 222.299 cv
cp
f
130.058 307.793 mo
132.153 305.698 135.551 305.698 137.646 307.793 cv
137.646 307.793 135.662 304.825 134.86 301.305 cv
134.107 298 133.852 294.818 133.852 294.818 cv
133.852 294.818 133.597 298 132.844 301.305 cv
132.042 304.825 130.058 307.793 130.058 307.793 cv
cp
f
121.579 312.084 mo
122.346 309.222 125.288 307.523 128.151 308.29 cv
128.151 308.29 124.948 306.711 122.494 304.064 cv
120.189 301.578 118.377 298.95 118.377 298.95 cv
118.377 298.95 119.747 301.833 120.748 305.073 cv
121.813 308.521 121.579 312.084 121.579 312.084 cv
cp
f
116.381 320.04 mo
115.614 317.177 117.313 314.235 120.175 313.468 cv
120.175 313.468 116.613 313.702 113.164 312.637 cv
109.925 311.636 107.041 310.266 107.041 310.266 cv
107.041 310.266 109.67 312.078 112.155 314.383 cv
114.802 316.837 116.381 320.04 116.381 320.04 cv
cp
f
115.858 329.528 mo
113.762 327.433 113.762 324.035 115.858 321.94 cv
115.858 321.94 112.889 323.924 109.37 324.726 cv
106.064 325.479 102.882 325.734 102.882 325.734 cv
102.882 325.734 106.064 325.989 109.37 326.742 cv
112.889 327.544 115.858 329.528 115.858 329.528 cv
cp
f
137.593 343.728 mo
135.497 345.824 132.1 345.824 130.004 343.728 cv
130.004 343.728 131.988 346.697 132.79 350.216 cv
133.544 353.522 133.798 356.704 133.798 356.704 cv
133.798 356.704 134.053 353.522 134.807 350.216 cv
135.609 346.697 137.593 343.728 137.593 343.728 cv
cp
f
146.072 339.437 mo
145.305 342.3 142.362 343.999 139.5 343.232 cv
139.5 343.232 142.702 344.811 145.157 347.457 cv
147.462 349.943 149.274 352.572 149.274 352.572 cv
149.274 352.572 147.903 349.688 146.903 346.449 cv
145.838 343 146.072 339.437 146.072 339.437 cv
cp
f
151.269 331.482 mo
152.036 334.344 150.338 337.287 147.475 338.054 cv
147.475 338.054 151.038 337.82 154.487 338.885 cv
157.726 339.885 160.61 341.256 160.61 341.256 cv
160.61 341.256 157.981 339.444 155.495 337.138 cv
152.848 334.684 151.269 331.482 151.269 331.482 cv
cp
f
151.793 321.993 mo
153.888 324.089 153.888 327.486 151.793 329.582 cv
151.793 329.582 154.761 327.598 158.281 326.796 cv
161.586 326.043 164.769 325.788 164.769 325.788 cv
164.769 325.788 161.586 325.533 158.281 324.779 cv
154.761 323.977 151.793 321.993 151.793 321.993 cv
cp
f
147.502 313.514 mo
150.364 314.281 152.063 317.224 151.296 320.086 cv
151.296 320.086 152.875 316.884 155.522 314.43 cv
158.008 312.124 160.636 310.312 160.636 310.312 cv
160.636 310.312 157.753 311.683 154.513 312.683 cv
151.065 313.748 147.502 313.514 147.502 313.514 cv
cp
f
139.546 308.317 mo
142.409 307.55 145.351 309.248 146.118 312.111 cv
146.118 312.111 145.884 308.548 146.949 305.099 cv
147.95 301.86 149.32 298.977 149.32 298.977 cv
149.32 298.977 147.508 301.605 145.203 304.091 cv
142.749 306.738 139.546 308.317 139.546 308.317 cv
cp
f
116.377 348.961 mo
110.625 343.209 li
110.308 342.893 109.757 342.893 109.44 343.209 cv
109.282 343.368 109.195 343.578 109.195 343.801 cv
109.195 344.025 109.282 344.235 109.44 344.393 cv
115.193 350.146 li
115.509 350.462 116.061 350.462 116.377 350.146 cv
116.704 349.82 116.704 349.288 116.377 348.961 cv
cp
f
109.246 346.746 mo
107.157 349.38 104.786 351.804 102.199 353.95 cv
96.0806 359.027 li
95.376 359.612 94.957 360.436 94.9009 361.349 cv
94.8442 362.268 95.1611 363.144 95.793 363.815 cv
96.4434 364.425 97.3218 364.751 98.2378 364.685 cv
99.1504 364.628 99.9746 364.209 100.559 363.505 cv
105.636 357.386 li
107.781 354.8 110.205 352.43 112.84 350.34 cv
113.472 349.839 li
109.747 346.114 li
109.246 346.746 li
cp
f
140.811 318.775 mo
140.731 318.696 140.604 318.693 140.519 318.769 cv
112.886 344.056 li
115.529 346.701 li
140.817 319.067 li
140.894 318.984 140.891 318.855 140.811 318.775 cv
cp
f
133.825 310.09 mo
125.185 310.09 118.155 317.121 118.155 325.761 cv
118.155 329.243 119.311 332.453 121.239 335.057 cv
122.72 333.702 li
121.112 331.461 120.155 328.724 120.155 325.761 cv
120.155 318.223 126.288 312.09 133.825 312.09 cv
141.363 312.09 147.495 318.223 147.495 325.761 cv
147.495 333.299 141.363 339.431 133.825 339.431 cv
130.863 339.431 128.125 338.474 125.884 336.866 cv
124.529 338.347 li
127.133 340.275 130.343 341.431 133.825 341.431 cv
142.466 341.431 149.495 334.402 149.495 325.761 cv
149.495 317.121 142.466 310.09 133.825 310.09 cv
cp
f
109.068 222.944 mo
109.067 222.944 li
109.069 222.958 li
109.069 222.953 109.068 222.949 109.068 222.944 cv
cp
f
129.028 219.008 mo
117.001 219.008 111.037 221.87 110.8 222.958 cv
111.038 224.019 117.003 226.881 129.028 226.881 cv
141.004 226.881 146.969 224.042 147.252 222.944 cv
146.97 221.846 141.007 219.008 129.028 219.008 cv
cp
129.028 230.348 mo
118.58 230.348 107.334 228.031 107.334 222.944 cv
107.334 217.857 118.58 215.54 129.028 215.54 cv
139.476 215.54 150.722 217.857 150.722 222.944 cv
150.722 228.031 139.476 230.348 129.028 230.348 cv
cp
f
124.849 224.435 mo
124.849 222.804 123.526 221.481 121.895 221.481 cv
120.263 221.481 118.941 222.804 118.941 224.435 cv
118.941 224.435 119.973 224.747 121.895 224.747 cv
123.816 224.747 124.849 224.435 124.849 224.435 cv
cp
f
138.295 224.789 mo
138.295 223.158 136.972 221.835 135.341 221.835 cv
133.709 221.835 132.387 223.158 132.387 224.789 cv
132.387 224.789 133.42 225.102 135.341 225.102 cv
137.262 225.102 138.295 224.789 138.295 224.789 cv
cp
f
130.927 222.73 mo
130.927 221.613 130.021 220.707 128.904 220.707 cv
127.786 220.707 126.88 221.613 126.88 222.73 cv
126.88 222.73 127.587 222.944 128.904 222.944 cv
130.22 222.944 130.927 222.73 130.927 222.73 cv
cp
f
119.838 214.72 mo
119.838 214.72 119.603 214.67 119.236 214.525 cv
118.86 214.373 118.356 214.126 117.807 213.682 cv
117.538 213.453 117.257 213.174 117.001 212.798 cv
116.751 212.424 116.502 211.934 116.449 211.27 cv
116.445 211.186 116.436 211.105 116.439 211.017 cv
116.443 210.887 li
116.444 210.854 li
116.445 210.838 li
116.446 210.83 li
116.47 210.706 li
116.475 210.67 li
116.494 210.525 li
116.498 210.484 116.501 210.437 116.547 210.298 cv
116.703 209.8 116.897 209.507 117.124 209.242 cv
117.579 208.704 118.023 208.46 118.321 208.24 cv
118.639 208.041 118.816 207.893 118.911 207.823 cv
118.947 207.782 118.985 207.755 119.026 207.715 cv
119.035 207.713 119.074 207.61 119.072 207.693 cv
119.089 207.624 119.143 207.45 119.14 207.475 cv
119.197 207.413 119.245 207.093 119.245 206.847 cv
119.25 206.577 119.226 206.286 119.194 206.006 cv
119.129 205.439 119.037 204.914 118.982 204.532 cv
118.922 204.152 118.903 203.91 118.903 203.91 cv
118.903 203.91 119.13 203.991 119.474 204.194 cv
119.82 204.396 120.284 204.722 120.758 205.245 cv
120.988 205.513 121.221 205.83 121.418 206.23 cv
121.607 206.652 121.779 207.068 121.785 207.765 cv
121.78 208.116 li
121.739 208.387 121.713 208.468 121.67 208.655 cv
121.578 208.983 121.423 209.302 121.226 209.587 cv
120.831 210.151 120.341 210.485 119.987 210.734 cv
119.747 210.89 119.507 211.046 119.271 211.2 cv
119.221 211.221 119.205 211.273 119.217 211.137 cv
119.217 211.085 119.197 211.133 119.181 211.187 cv
119.131 211.324 li
119.118 211.358 li
119.164 211.127 119.131 211.295 119.141 211.243 cv
119.141 211.244 li
119.14 211.246 li
119.137 211.249 li
119.125 211.262 li
119.114 211.269 119.111 211.283 119.101 211.295 cv
119.044 211.394 119.018 211.622 119.055 211.88 cv
119.085 212.138 119.152 212.422 119.227 212.694 cv
119.379 213.243 119.556 213.75 119.664 214.115 cv
119.785 214.484 119.838 214.72 119.838 214.72 cv
cp
f
139.843 214.619 mo
139.843 214.619 139.595 214.568 139.199 214.382 cv
138.811 214.187 138.244 213.888 137.742 213.154 cv
137.501 212.788 137.295 212.265 137.303 211.636 cv
137.302 211.607 li
137.302 211.592 li
137.317 211.511 li
137.317 211.506 li
137.318 211.469 li
137.319 211.396 li
137.326 211.335 137.314 211.325 137.337 211.221 cv
137.38 211.025 137.447 210.804 137.512 210.662 cv
137.639 210.333 137.841 210.057 138.02 209.833 cv
138.398 209.381 138.703 209.104 138.77 208.963 cv
138.806 208.898 138.785 208.879 138.79 208.875 cv
138.787 208.871 138.787 208.862 138.787 208.862 cv
138.788 208.859 li
138.789 208.858 li
138.783 208.914 138.803 208.731 138.775 208.984 cv
138.775 208.978 li
138.776 208.968 li
138.78 208.885 li
138.788 208.72 li
138.781 208.715 138.771 208.762 138.772 208.781 cv
138.809 208.885 138.733 208.625 138.542 208.333 cv
138.349 208.027 138.074 207.626 137.838 207.142 cv
137.601 206.66 137.428 206.075 137.422 205.519 cv
137.422 205.381 137.434 205.246 137.443 205.115 cv
137.451 205.018 li
137.454 204.91 137.461 204.949 137.466 204.907 cv
137.5 204.772 li
137.563 204.489 137.635 204.27 137.734 204.075 cv
138.129 203.284 138.675 202.896 139.047 202.671 cv
139.427 202.448 139.676 202.384 139.676 202.384 cv
139.676 202.384 139.621 202.619 139.524 203.03 cv
139.443 203.421 139.343 203.97 139.426 204.476 cv
139.441 204.603 139.474 204.728 139.51 204.801 cv
139.541 204.936 li
139.546 204.94 139.55 205.024 139.556 204.962 cv
139.576 205.002 li
139.651 205.157 li
139.76 205.355 139.905 205.522 140.103 205.744 cv
140.3 205.967 140.577 206.225 140.897 206.623 cv
141.208 207.029 141.637 207.542 141.761 208.538 cv
141.772 208.667 141.777 208.824 141.774 208.929 cv
141.758 209.094 li
141.751 209.177 li
141.733 209.328 li
141.725 209.367 li
141.708 209.445 li
141.63 209.753 li
141.499 210.17 141.254 210.534 141.016 210.806 cv
140.527 211.34 140.111 211.549 139.912 211.692 cv
139.801 211.762 139.741 211.804 139.685 211.831 cv
139.645 211.86 139.652 211.828 139.625 211.813 cv
139.612 211.8 139.588 211.887 139.57 211.919 cv
139.539 211.986 li
139.524 212.019 li
139.522 212.023 li
139.508 212.092 139.538 211.934 139.535 211.95 cv
139.533 211.953 li
139.529 211.96 li
139.433 212.086 139.36 212.292 139.361 212.541 cv
139.346 213.048 139.525 213.602 139.64 213.985 cv
139.769 214.388 139.843 214.619 139.843 214.619 cv
cp
f
130.542 212.869 mo
130.542 212.869 130.293 212.719 129.923 212.371 cv
129.557 212.023 129.056 211.483 128.682 210.6 cv
128.505 210.158 128.37 209.616 128.385 208.99 cv
128.394 208.665 128.436 208.379 128.554 207.995 cv
128.602 207.819 li
128.634 207.732 128.684 207.627 128.729 207.532 cv
128.824 207.342 128.908 207.19 129.02 207.033 cv
129.462 206.403 130.008 206.002 130.046 205.875 cv
130.083 205.809 130.06 205.809 130.08 205.736 cv
130.082 205.731 li
130.088 205.705 130.035 205.956 130.058 205.847 cv
130.059 205.84 li
130.061 205.828 li
130.068 205.779 li
130.083 205.681 li
130.085 205.642 130.119 205.493 130.096 205.543 cv
130.07 205.569 130.091 205.623 130.072 205.565 cv
130.08 205.449 129.92 205.108 129.682 204.681 cv
129.441 204.261 129.157 203.749 128.938 203.198 cv
128.715 202.647 128.575 202.05 128.53 201.488 cv
128.528 201.347 128.526 201.208 128.524 201.071 cv
128.524 200.85 li
128.542 200.686 li
128.569 200.433 128.607 200.153 128.667 199.938 cv
128.909 199.018 129.34 198.391 129.672 198.007 cv
130.006 197.62 130.248 197.452 130.248 197.452 cv
130.248 197.452 130.24 197.733 130.227 198.224 cv
130.225 198.699 130.242 199.351 130.404 200.022 cv
130.444 200.203 130.485 200.338 130.545 200.511 cv
130.592 200.67 li
130.6 200.672 130.624 200.741 130.639 200.774 cv
130.74 201.021 li
130.893 201.346 131.08 201.658 131.309 201.99 cv
131.538 202.325 131.824 202.669 132.142 203.127 cv
132.452 203.576 132.868 204.162 133.035 205.102 cv
133.077 205.304 133.082 205.623 133.058 205.913 cv
133.046 206.097 133.034 206.076 133.022 206.167 cv
133.004 206.265 li
132.995 206.313 li
132.965 206.459 li
132.953 206.501 li
132.844 206.94 132.57 207.417 132.268 207.747 cv
131.967 208.083 131.682 208.273 131.493 208.407 cv
131.355 208.505 131.219 208.602 131.086 208.697 cv
131.036 208.728 130.987 208.785 130.958 208.804 cv
130.944 208.816 130.933 208.816 130.91 208.836 cv
130.813 208.99 li
130.749 209.047 130.667 209.214 130.608 209.338 cv
130.486 209.613 130.412 209.942 130.382 210.277 cv
130.318 210.955 130.397 211.626 130.45 212.098 cv
130.509 212.589 130.542 212.869 130.542 212.869 cv
cp
f
138.2 260.664 mo
146.345 268.748 li
143.483 258.172 li
141.865 259.178 140.091 260.017 138.2 260.664 cv
cp
f
129.028 262.173 mo
128.336 262.173 127.653 262.143 126.976 262.095 cv
129.028 269.734 li
131.08 262.095 li
130.403 262.143 129.72 262.173 129.028 262.173 cv
cp
f
114.573 258.172 mo
111.711 268.748 li
119.856 260.664 li
117.965 260.017 116.191 259.178 114.573 258.172 cv
cp
f
126.993 256.05 mo
126.313 256.045 125.615 256.102 124.93 256.023 cv
124.246 255.951 123.543 255.926 122.864 255.772 cv
121.836 255.568 li
120.823 255.285 li
120.135 255.12 119.485 254.842 118.828 254.573 cv
118.17 254.307 117.548 253.953 116.909 253.629 cv
116.308 253.24 115.669 252.896 115.12 252.418 cv
114.27 251.738 li
113.481 250.975 li
112.937 250.484 112.499 249.876 112.034 249.302 cv
111.639 248.671 111.19 248.071 110.89 247.375 cv
110.535 246.709 110.303 245.986 110.068 245.265 cv
109.943 244.909 109.891 244.486 109.814 244.096 cv
109.738 243.692 109.672 243.293 109.673 242.983 cv
109.62 241.979 li
109.617 241.848 li
109.618 241.813 li
109.62 241.742 li
109.624 241.599 li
109.637 241.315 li
109.681 240.746 li
109.763 239.991 109.899 239.239 110.127 238.518 cv
110.358 237.794 110.646 237.107 110.999 236.435 cv
111.935 234.716 li
112.513 233.655 li
113.503 234.014 li
113.996 234.193 114.489 234.386 114.993 234.551 cv
115.497 234.716 116.007 234.871 116.524 235.012 cv
117.558 235.282 118.604 235.568 119.672 235.785 cv
120.738 235.998 121.814 236.238 122.902 236.423 cv
123.987 236.639 125.083 236.829 126.177 237.073 cv
125.065 237.215 123.956 237.302 122.839 237.371 cv
121.724 237.409 120.6 237.459 119.475 237.407 cv
118.351 237.357 117.214 237.302 116.086 237.125 cv
115.337 237.014 114.587 236.87 113.838 236.704 cv
113.426 237.621 li
113.195 238.155 113.003 238.726 112.87 239.292 cv
112.732 239.86 112.625 240.432 112.582 241.012 cv
112.56 241.446 li
112.555 241.664 li
112.555 241.773 li
112.555 241.822 li
112.63 242.79 li
112.641 243.153 112.708 243.411 112.77 243.663 cv
112.843 243.926 112.856 244.177 112.95 244.456 cv
113.129 245.01 113.29 245.571 113.568 246.094 cv
113.778 246.644 114.126 247.134 114.415 247.653 cv
114.79 248.121 115.082 248.654 115.511 249.09 cv
116.117 249.776 li
116.794 250.403 li
117.226 250.846 117.762 251.174 118.23 251.59 cv
118.75 251.936 119.255 252.319 119.808 252.626 cv
120.365 252.927 120.91 253.262 121.496 253.524 cv
122.368 253.94 li
123.273 254.288 li
123.871 254.549 124.499 254.724 125.125 254.93 cv
125.752 255.134 126.4 255.26 127.046 255.44 cv
129.028 255.839 li
128.359 255.92 127.677 256.021 126.993 256.05 cv
cp
148.046 229.079 mo
141.952 232.133 131.751 232.348 129.028 232.348 cv
126.304 232.348 116.102 232.133 110.008 229.079 cv
110.06 230.936 109.572 232.775 108.673 234.431 cv
107.901 235.853 107.343 237.37 107.034 238.955 cv
106.848 239.906 106.751 240.882 106.751 241.876 cv
106.751 251.981 116.725 260.173 129.028 260.173 cv
141.331 260.173 151.305 251.981 151.305 241.876 cv
151.305 239.224 150.618 236.704 149.382 234.429 cv
148.483 232.773 147.995 230.936 148.046 229.079 cv
cp
f
20.2544 168.214 mo
22.5991 166.088 li
24.9438 168.214 li
24.9438 157.076 li
20.2544 157.076 li
20.2544 168.214 li
cp
f
43.8711 168.64 mo
46.2153 166.514 li
48.5601 168.64 li
48.5601 160.91 li
43.8711 160.91 li
43.8711 168.64 li
cp
f
25.9438 166.435 mo
28.7158 166.435 li
28.7158 166.719 li
28.7158 167.776 29.5725 168.632 30.6293 168.632 cv
35.9131 168.632 li
36.97 168.632 37.8267 167.776 37.8267 166.719 cv
37.8267 166.435 li
42.8711 166.435 li
42.8711 162.527 li
25.9438 162.527 li
25.9438 166.435 li
cp
f
59.3955 150.104 mo
54.0396 151.181 li
59.3955 152.258 li
59.3955 154.721 li
58.311 155.017 56.0488 155.533 53.4951 155.533 cv
51.999 155.533 50.4346 154.866 48.6226 154.093 cv
46.3018 153.104 43.6709 151.982 40.4302 151.982 cv
37.7155 151.982 35.6152 152.822 34.2715 153.575 cv
34.2715 119.418 li
34.898 118.946 36.4805 117.933 38.8268 117.581 cv
38.8268 128.192 li
41.6714 125.613 li
44.5161 128.192 li
44.5161 118.123 li
45.6715 118.484 46.7647 118.947 47.8384 119.404 cv
49.7681 120.227 51.5903 121.004 53.4951 121.004 cv
55.9214 121.004 58.0825 120.585 59.3955 120.26 cv
59.3955 150.104 li
cp
32.2715 153.575 mo
30.9277 152.822 28.8271 151.982 26.1123 151.982 cv
22.8716 151.982 20.2407 153.104 17.9199 154.093 cv
16.1079 154.866 14.5435 155.533 13.0474 155.533 cv
10.5039 155.533 8.23438 155.016 7.14697 154.721 cv
7.14697 133.641 li
9.56818 132.737 li
7.14697 131.832 li
7.14697 130.547 li
12.5029 129.47 li
7.14697 128.394 li
7.14697 120.26 li
8.45996 120.585 10.6211 121.004 13.0474 121.004 cv
14.9521 121.004 16.7744 120.227 18.7041 119.404 cv
20.9536 118.445 23.2803 117.454 26.1123 117.454 cv
29.2855 117.454 31.487 118.838 32.2715 119.419 cv
32.2715 153.575 li
cp
61.3947 123.483 mo
61.3945 117.545 li
60.0747 117.991 li
60.0449 118.001 57.0352 119.004 53.4951 119.004 cv
51.999 119.004 50.4346 118.337 48.6226 117.564 cv
46.3018 116.575 43.6709 115.454 40.4302 115.454 cv
36.9082 115.454 34.4058 116.869 33.2715 117.67 cv
32.1367 116.869 29.6343 115.454 26.1123 115.454 cv
22.8716 115.454 20.2407 116.575 17.9199 117.564 cv
16.1079 118.337 14.5435 119.004 13.0474 119.004 cv
9.50732 119.004 6.49756 118.001 6.46777 117.991 cv
5.14697 117.545 li
5.14697 123.483 li
2.04205 123.483 li
2.04205 166.435 li
6.14679 166.435 li
19.2544 166.435 li
19.2544 162.527 li
7.61572 162.527 li
7.86865 161.736 8.1167 160.686 8.15381 159.529 cv
8.15625 159.448 8.15771 159.368 8.15771 159.288 cv
8.15753 158.418 8.00787 157.617 7.81744 156.944 cv
9.13739 157.233 10.9945 157.533 13.0474 157.533 cv
14.9521 157.533 16.7744 156.756 18.7041 155.933 cv
20.9536 154.974 23.2803 153.982 26.1123 153.982 cv
30.1074 153.982 32.5708 156.182 32.5923 156.202 cv
33.2715 156.83 li
33.9507 156.202 li
33.9746 156.18 36.396 153.982 40.4302 153.982 cv
43.2622 153.982 45.5889 154.974 47.8384 155.933 cv
49.7681 156.756 51.5903 157.533 53.4951 157.533 cv
55.5483 157.533 57.4057 157.233 58.7257 156.944 cv
58.5175 157.679 58.358 158.566 58.3887 159.53 cv
58.4258 160.686 58.6738 161.736 58.9268 162.527 cv
49.5601 162.527 li
49.5601 166.435 li
60.3957 166.435 li
64.5004 166.435 li
64.5004 123.483 li
61.3947 123.483 li
cp
f
51.9121 351.534 mo
51.9121 354.15 50.1202 356.349 47.7015 356.985 cv
47.7015 351.161 li
41.5433 351.161 li
41.5433 357.176 li
17.9273 357.176 li
19.4594 355.783 20.4277 353.788 20.4272 351.579 cv
20.6118 347.496 17.5249 339.894 14.2568 331.846 cv
10.7051 323.1 6.67969 313.187 7.14404 307.948 cv
7.14404 304.836 9.67529 302.305 12.7861 302.305 cv
15.897 302.305 18.4282 304.836 18.4282 307.948 cv
18.4282 311.058 15.897 313.589 12.7861 313.589 cv
12.7861 315.589 li
39.7007 315.589 li
41.0686 320.671 43.518 326.723 45.9033 332.597 cv
48.8413 339.833 51.6289 346.697 51.9121 350.579 cv
51.9121 351.534 li
cp
7.14404 351.534 mo
7.14404 351.183 7.1806 350.841 7.24219 350.508 cv
7.34546 350.423 7.45471 350.346 7.54999 350.253 cv
18.3726 350.253 li
18.4208 350.715 18.4455 351.149 18.4282 351.534 cv
18.4282 354.645 15.897 357.176 12.7861 357.176 cv
9.67529 357.176 7.14404 354.645 7.14404 351.534 cv
cp
2 347.073 mo
2 345.722 3.09863 344.624 4.44922 344.624 cv
5.7998 344.624 6.89844 345.722 6.89844 347.073 cv
6.89844 348.423 5.7998 349.522 4.44922 349.522 cv
3.09863 349.522 2 348.423 2 347.073 cv
cp
46.27 302.305 mo
49.3809 302.305 51.9121 304.836 51.9121 307.948 cv
51.9121 311.058 49.3809 313.589 46.27 313.589 cv
17.9355 313.589 li
19.4663 312.191 20.4282 310.179 20.4282 307.948 cv
20.4282 305.715 19.4663 303.704 17.9351 302.305 cv
46.27 302.305 li
cp
47.7563 331.844 mo
45.4758 326.228 43.1364 320.448 41.7748 315.589 cv
46.27 315.589 li
50.4839 315.589 53.9121 312.162 53.9121 307.948 cv
53.9121 303.734 50.4839 300.305 46.27 300.305 cv
12.7861 300.305 li
8.57227 300.305 5.14404 303.734 5.14795 307.859 cv
4.64453 313.491 8.58887 323.205 12.4033 332.598 cv
14.0396 336.628 15.6258 340.538 16.762 343.892 cv
7.54999 343.892 li
6.74774 343.11 5.6554 342.624 4.44922 342.624 cv
1.99609 342.624 0 344.62 0 347.073 cv
0 349.526 1.99609 351.522 4.44922 351.522 cv
4.68945 351.522 4.92078 351.488 5.15076 351.451 cv
5.15033 351.479 5.14404 351.506 5.14404 351.534 cv
5.14404 355.748 8.57227 359.176 12.7861 359.176 cv
41.5433 359.176 li
41.5433 365.192 li
44.6224 362.627 li
47.7015 365.192 li
47.7015 359.041 li
50.9122 358.43 53.418 355.804 53.8472 352.534 cv
53.9272 351.579 li
54.1118 347.496 51.0249 339.893 47.7563 331.844 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (Andrey Magda) ()
%%Title: (1705.m10.i306.n027.S.c12.429937720 Fantasy medieval tale vector icons. Mystery magic and knight pictograms.eps)
%%CreationDate: 5/31/2017 1:50 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3QiWo/QZ\ra".S*C(#UJs-9RaGQ^d@#b<tJqQG,m[ejss6NN]pEY>OBCBnBoOcFL:fGhK\Z7d8XK84V;7G-C5,X@S@Qm*J
%70H*R$&n)+nEPN&De3LpH);*!OJ7]V'20jtnf4A3;,63V]I0_8$Fqm$<(@tB4"U)bW]h8qNOI4V`-gek>1[to4i8#ZGHJ@/`h0tE
%>H>3jSn)/TbVe.$cKKJZThgP$"NWfjS'M=Y(GpZ7$!_r'G5tUjLI7^Dg.(_"o[3?*]2&Ds<L+;/!C"S^/9)k]OB>NAA\98rP3`S5
%hT6aa-]?ED/9()[JA:*7/@4uPLd);s^(4X"ah1#u.d9*uY76sj(W_F.=SN\cMnY-Vf1,-NV:Og;_8g!*LJ<GM-U!+kaBasi+ZHas
%Qi<c;=N(JHrus#nn"<C)_U"a5pBe4!@PNL`E"kTII"DWj3V*GuWWRnW$'?Y5ZJOiR[@p?;cZ*D.9S<=aJ$G)$HNZ&IF&>O"73k0X
%Wfg0=aB)E]D^MVs+Sm0SrQgjL?e9%=hmA#HIopIb%Jgi.,a^=&B;;ol5OULc+?%r88el>VeFYZ'l.hkGCW%W+>a!tk7To%AlU*@D
%UHLq,`-_o%>rs*M$JH"2m?KOj3U,eaZ>i/9N@;G8no7N]pTY^Z;rr6s;6o1k=jEj/X%BrGn$^r8;)^othiiN\\_2s2'MtjKZ)2+$
%op[hZY[u+XcsMHYW8dYNXWNa'@!al_],'KZpR"-b\Hij3.Ugr^DCo^I;#URpRaQ`mE1=<+CgM7uODE4]W+YZf!0>/)gsGCs_uKPI
%@sUjp/@J&fENa;>HMMI7ps8sDP;T,0q[1TNm\:SHjD)aP]]3/WNYd!;,>36n`53#i56)MX7fjP&*A>U3!OsLadkrLB7($V[oKgg"
%Q9MB.ri<bI'E>$*$b\SXqI%E&hauo5^6$&hG<[YW_7gHb0o1T%`/>UApX'A#CgLM?)[6-l!aN)<KspCJ]FY=Vd^QRbpQD`2?SD.@
%PQO32%G^I^8*N=NAB(<;A<@J?A-2a&QK/2kD(FB>6Z3o,m%63%Kn*W:lY:j7;ZD%B95lZm=6?D4!A&b95d3q:EN<aZH:C6niKYdZ
%_>ekTV</ju%e1]ol]S0KZsa&+=1qfWr:eWJAU5S`$N:blHk\gH8>87m+Y9b'gWeoqen[+C^/TS=B_]`)dJa;;E\8qHRc7Vu-CBg*
%0uI0u1t@Ol7)lJ4R;h>dQ]R-THIT`,mrqR=<#*00;iZ'rJn/l>:ng24"pRRid/PRGp0GGap<<:_F(S\>.&E`U"WJO$Q7lHX_U.sF
%9RIYSoVVoRF.lb,'RWM;3YeFG*-@]-5TC=26nEpG\lshZL1_u+g(\o[G3a4/b,f<u7!s61of3+:BpGG1.!WR]M$ujtXZpW&gNr,)
%@&SDjs%698QV%.^Q8?'r,2ZtS%h<X0(+`>dM\FQAbT'$ZaQ=ng-u7Pu:MG(Aa[DW#2nMn8pe%=D:o?l'4&2ATNVXu9<4d`tO>-tY
%RCC:W)D4#aLl[X)]CY2VjMT31Aa%+]`?$:t6`cJ0mE`K`I(MEh*((<+5%g<aXD,'@Nt3k^IDNZZm4MY&J@ta'b%R_@Y-7q_aaRTd
%`2PY`m93lc&e*'pRI:WVMth)_"#DpH(h=Lr-03f36)39!EMPh+p;k2KZWS5*hE^CA*Jt"'R!9QkbtLKC4u\3;\?QT0Mk+DX&I&Q]
%MZ)%^"m1sGR)`g`"+Q.!=hK#We6a8AphRTHpu-dX+.pT*6#']W]]$mNeO_/6F#tFf)oLP%`lbrJaPj())*uMHeN]?0^$A%jfStA!
%6Q`Y_f*A(ZQS<+sIMP"NUGQeMM4]i2)A#$$rUaR2A([ChA>5%X0k1r8T]c1JlNjTA9?<O:s"*<BO#cNd3[`IOp4k#T\WK#ZS$rZ9
%h]r'Z+K:\l$5tP.h\Z<jBVo=!qGhs):8N2+2nE>DNUFH7]OpmiM]Co4q`I@)PdH>XUSmiDW4tLbih1b+^SHiacPVb4c@`b,-7VQl
%nhC07)85Hr0.OTEA*1s9G/BuZ>?#d(b3n.";SB8"]%B2)RY+%G2j9XuD>.7M3tF,m?aR330Tn"[]1$GC..%eHh4h:R=\GIM_o-<!
%@',N3O66!`A*s\3bp@CGUQ)["_q[7"IZG3iOn%E$]JiJCo/,[@E#3ft*9Zj?]jq!!+bL#+gYP?Hrlh@%\('R"Uc.d!";%Y1bAKJI
%;:2"!jVK9#Vl@VT`];&ZMX[,*_+u%7_r!Fk*WML"o$N@K>)8fiVq1iGqr'hX:_aJJ^;p)4@X](cK3k&68H4LBWn+?4i<0ZR3N/QO
%'mj@\X&_`]&KV;L^m#f6Ze4R/]sd'7Q!LH@R^fo^$XYgWB6!TA_VsY#lM6fdn1f"Epn(WteF\'nqf[]Y(-6cQ2U$Ca^0J1?>/Ft/
%B#g)Oc#'k\D"ek%2lQC"m5GL;/!VU@f_@4c['H%OfiglFUIbqsHCCFJUOVk4`L\t+%%:?YosWH63sKs%RX',VW\oiZ14%+o^7tB"
%oR-"7,4eH$ABnBnpc8*E;UN:to];DG#9J,(H&2O':CI4EVI<\I/J*s4+NubTDs;"q#BmguM>+jhs4P;bk5o8`#=koR*&]kSd*#Pk
%5<VPd`J',?*0bnaOSqkD*pNW9*JO<W/%Ch$`>\<[Xs&-ObVAi*1Q+-O0b,"8a>5-K=@6Dr+oemqJucs4'DE>U(@/u4`tGNnCE@(^
%([K)!FlVAseRI?ZZ#73V2dWR)0@l+!lc/O4DKG:E[:[*9noDNameu$!-XS2'G[@p262'Xk[2Hm]/?XG`#H!!p=rU82"%&f@cc5[o
%h;f$;<m5lGgnT<=P&daP)b6N1F#8;!D02I<m<\<-WB35&9Ck%]I'4DCEA9g=aiGjUOO:!EJ*uWK2\*BR*esg%q/""LBGt`9)"6du
%\C&p>D_;)CVTorUB8`aq`RL<b]P90N[[9;VNVS:f@=^rG]@e'IHMj(gq,t-QH!j-\_`*W42(mZ[Su0Ud8QoHip?8`?han*Q'+/@@
%qN>Ij9r<m=m4C"IpV5<O"%]*"nXKaZD'pXB0P25>p9,M_Wh-(6VJl8e#!Ins(:?@]mkT=7@cCrRnZnO,R8lc81^fk!0kXq9r6&R/
%AMN_\R!;b-]IYC9V?5mhiakk8d.TPDr)[(f?VDRo-BN\>OHNc9I-DNET:1(/9I,%?c(T3.-?o!qMKt-`hsE_[mH1XO2;aq8qMKj>
%b<lmX&$)(UI;<p(YR3%0R.lA9Gi*6us+B=j5o&uR3-lZ?^<F*sG`'sZ?sGh5l(?YW]FTrc=k,/0a6tcCI`;!RT,<Y*:N0K"_<J;M
%PSLs^$XPtNo>P&*b2)T^A3MhCU(>\hVe_,%>SI>;fI_KNQGCn_plmAXHj#f6er]lr(9o(M2g?:C2^T=/KDkYm!;gXicAT_Lb[T\?
%k6=&])KkT&Mo?Qgs#T/klN@)Im"D'kTK2]<R`@k[mh?1F?;c^8I)#!XjsA'KrUoEklf:4,RI@@[D];0*DS1p.g01m!pJI%"e#L[O
%Nu/Q'2"LS6Fu4s5I?r!#gg<,:Z-=L8s!4+_VAnXDn@k\7Gr;[K+8lERX_.L!r[)ORX]'b"_V>r0,$A`^S&b<t9o>FZ1]?GpSpept
%qYf+:FPQ'&*hWJ@Vrp2WVuO)aoHVBM*F@O<nfI.AEE[)eVMF?s[++)T4*-V1IEthiMi?VQAdgoo31@&H]H-J=r@^?PkM)LL?fXV5
%S7lnoI$#Am@;`G36,&`Q?L6kPq93AhK)?'A('iq:-cd)OaQI>8>TAorkJ?[-Sfn&&j5T%uq0\-ZMZ`&30eP'gOT1B%NF-Z0q4I'<
%o016EVIG&C,l,)ek4^,a?Ul3QQ&75/&bWk=*GXtOUZnW?UA'(L(O#CW@<-M9PPapL?Q$9EY*Xp?J!orCCQsRu@J-aF\$6#qLf\K&
%4hXj(%/[AuM_Z=h*\5r0ch6t_&STb=!OiC5:WoRt'Em5hk6,8:+.b=O7fMJBj?l_4mmu<_TK*P/2>@e=r+Db\gkYA^\9m_j*h]\R
%_-%jirgWT&L4%3"q<0,&=GWSUfsQh=d<iSchdPMkAOkYM9\eVF)>!5`^Me#M;qO,+cK@hF*jY=HJ&XlenW8TQnGAj!jQ>=`EJbZ?
%*`MHEjR3$nQ@4;fPJn$DH&Mtmk<iT+,^;9aq.4":)te5RB9?"D#1d/C79=WFT54.Mdu;US>SJ5o'ee;>'!mdlcbhS!@JI_*m+*$I
%-V'BUW*;F^P%!E5)-Kr40u!*oApXnAqeS&u^OIq1IHor+;W?VskAjqq%dIBW^bCO%s)V>fQUoQg;TS<"e%WhqYJo#3@d;tqBSC8J
%9=ET5$Kn%9Pf4E]hm:;m2c9(H?CjPkd)4#gMg5HsrB'dp*Y6BNgctXFn[95E6McEuJ#g?ZQ$&_:`-6GKTbf&i9M58cG:PIUej^Fe
%Ppp)?@(5^>L&JaB1&gYRn6q-"/%;,f$/;)M@.>hF\[TP&=V@K3T>cQ9r_r^QJJAHD6`of3A5^X^%P.4ddIC[U"RYe?OZfL1L6puB
%pcL1_c*"3pGZ\]\CKHQ*0=@AZp%&CMY(oQF<NDn?W3(?5BGj2:/@PD$YH<(1q4Q8Qc!g4gBKjG&NVZd_H-%5b]NMoi'.uI\E#ena
%\86>(HG/#)o]TN+Z`X`nT#N,oY/eK@pIp3Qh.F]k-iLc9R'1s8b>WsNmoAZ4$&7>WO^TteqQZlYWDa:6?&h-)SN`>74'pq1lcTGD
%?[g:!"Gs&F29-eiH1\>#s(CJ;^1%,S38:h0\UW/m4HsdAh<-nV@,Z/7T6o>Ud$8-rqO5@Lj[)hOIIF;YVu7.:fQV\pZ3QZg[9@Y4
%A_Pp+r%)/hc$*cL^3G6ZAFt3XUMW,?=I3/Y^0_rWUdaAADNW7t8f*V.&c'.NjC8@*j^VfrZWZnlas7YhZY\M<1C`0pCPQ`EcXMZi
%8h_0?*8S%N]14*.N`NI`8;gsCJh0$1fb?=4qhZMe(L;?4!6/C;c@hP_2*\g"ZLD-@SE&u?UgI`/gL=o@^/kfZanotHkC`eQq9Ib[
%ASUasWHn"(nJ<1c4MF=20`9ns-,UF8^.6DX%q55sNplX5b/N\J(U(0:_;CT/SM_*enDD8AqV-X!rr0ji;=qfG]N;nM2eDp@)YeO<
%(e(41G\cue4eOE*K7BGe`EploYorVF+"6[8Q4XpOja<8Q`EP?P57`[]EmE'/rriVG`>^g#%ZXo$#l^50p[@o[U3Y5/i_>rXOc%,,
%TO5:njSNdA=Zdhlf9cGW?B0H?XVr8+&21J,/@K<k]#=+X^):alA`F_Ig%^FLm6C-Hmo^FMRq@-0V"E89b+_r6$FSU^3kN4X_m:<B
%FnBm&b\MkH4fE)_2l1b-_Y]X``JhgLk#mT[NB+/]4<1t=b\/P>1_qkcmkCYeK,G+O4=k)$k'Wt1b\549(gkL#/7p`Qb)?PrSRs]@
%1%Y'M1s!QMnOXEGr@INb/;GLuk9S1?YC8gnkA7d.qK![lp&PkcR>uR;^P3gn,2N4c$?FaR@^-mP1kr_AU%Z`<.E-\lG=m-/:Oi*h
%V1)M>qSh?mi%7@@r<1[1[,#pg:p?nm(A6MmB"i,qk90k.e9gf'_P5oaqXr](I$sT#iql=_T8.j9?aSb_^tGI?S)XdZ./4P]hkK%u
%c[q5V:'KO!I,)A*+#T*J*rZlWF8I_Arsf9b,Mur0Z7!Oo<-_icb55NBQbDlBn+#F"D'!8`*fd$IhL%-bRHRG\q.SX%fQRU-?4,#(
%%pn.-H>O8,(;XcmS7_bQf68Y!]J/ke_H5e75E"SY*W-;[HK?(uUNuG'\IVg"iNTs2-GE0hqW>th*`Vf$QSUd@bZQK0/gBsQA\u>F
%T7PVg7t'f`UFP0[aH@>d^<Du).1;OCp$ni5`L:m9lZVrE8T3opDtX)$/YC#>R>2NbTBC.hQ;8Q=1<i+gX]>%ShAmYO]e;D,F>R[V
%_c#7@W-#ZTm!0[;.ip#=k'tnN^r2QWFVpbDcStNZ*W,Ude)[9jXP-#=j;=6'2p`VZ(F8-)^3T:H\IT#(i@K[!-GE/EnFF`PJ)O79
%oB'o_^97M'@G\BJCq%+FfP,ip4NUf9g-$\Lj\]n0ldJ<V%r>5;B2:h?`;;)d[.^-G%hJ"lF;Sb@O)]h^c>au+pPk1LB-Cr\jt%QG
%#fB:9@=0+,m:KGO4?VT,WjSltL6i->\PPMKWNOYA&<O;7Fjq;BZfT!IPT0G)f]qduo_-('Xk"IMs7!snNVZd_H,plYXBD)9'.,p*
%D]JdU.grK6m!,hENSd1@GBb7r2lLSnhdImi(FHjiD%l`ac]DH!7/;VGe@41hilTg85%&eoSL@g3pbDm9S*rc@`fF#-4j99Hp7a*I
%ofm$)6RMCnp7bO$_d4$19RN7*a&=%`fSd&fMt4'12N,6so2b1)LV5+dn$!VI$PQlZeG3JSb$m$H*61!6hDFsMiB-Bpn\W52#mk[Y
%(Zd0KdX9"s24bfU-_eUnlLJ`*36Tc/]S.]HhXa+KNZrp&'q\(6[sG%tH#arZd`8/IVrl+9lSVdOECB\`0-He:'9?M_\MJR3m83Gi
%p"5[$T_n0ZSVO\"0*9t]$?R=g\d3D95kg<@h+BHK16:++bmnt$-6h[Df]X*EPp%suM4!cHSjdU*q9T']pW,4G?7WHSnG@l$<Yf1F
%c)Bj?<.?`<pl;_ap'`,;UgF3B5J$'R=4:?bh0c*FCnd4)UV-uK8(GV<bF9Y^e0G<e(anK*YkA9LaMD'pi\f<-Eo__)+[<,Z^Rfn>
%?;(!IV;[KD4ofddll(@saZ&jKi9d)Zb'1->q<hdMLCXH8JKOY<_$,C@cQ`;&?WjrF"2is=`3DqZ:9UeS9ej?qr+/TYj1d)R+_U9p
%.LSAZYs'Ka#n!^]pjl?]Ne\,P$Y,P(+'=hq3H=Bf,:X&`]1QNoXP*<t&,^SNT3_Nk-V2X/jL`*<I's!i`A@-3kdgs4(,_0Y>.`PU
%<Ks7O+s2`OW3u<W:oE(`/'*anEe96,bDIh_;C,@DGSr]DZ6779W@2)5V%OM&.U<(N.C8ZM-!<M:aWcLAIoDn_^$.c]=00]1HLO[A
%/9K77N1+<0m/Ks$[!>EDbtFpbr:2JggRqXC\V?`oD/^5rm:+5cRB;mLo7KAN0`20a5A`TkTmu9r&:_g@dZ7/BBOb!@T0"Z$5i:kC
%A1_:j8%9D,d=rdVQ,cT,J?F`9a2WB)\<;@[Qeri[!SJMks/fm^;(ljI]IT'3jt80F_:@u3nIM`dLjtf.!&@mU0I='))2s(DntP\s
%!"/5L7^](B=HF(d/C]Zi@'J'):X&i`)$k2tAkMpHbBY6tOW47#)T@1ZP]r>?Pt,beBPJ7m4+WM&0:Ml^6hpJM&Gs@l=?t[;0R2Zb
%3Z8Edc5_MPheJmjJVGU*NhPBdhC\EXn=.kHkA(!5HG5^r&*eYiJUN$!83U]GX5>:`o:cq1<E8a0T'9GU*O\,E'oNX_]GG>nfTW*Z
%-hGK9m!3qR(88\>VQA*V:f*mFl@H\\pTRL5k(Kdk^joSYgrF%&iM7]lil@SY"jn]/)"6un0ntd('_M7kUu1h6QkVm2oM'Cj<01cb
%=!l#3[cSg8JAH+Ukih4tXTn%@0-Ea_YDES8bW->42Wqq(+NAHP<*RsiBT!\0`i!(dp4P`XE&Bpi>.Ze^KQXXfb7<f<?TkN''uiAR
%QkH@jRSbRrR\6\.mQ73lo=j:!B_]l[_,0SZs4/Rp9'0,\:[@7nhk3O^4_!ePFEENk>(9X/[!p8$`N?umK#B1PNFYaNV7#_5g7[O!
%-&Eg!^=eg5p%@^8?fV>bGoN#iTmkX/`DOa4bs(lEgU]R:Fu@LSn:l@n46UC,4ST3l2JXF4>6[K,<0;u`1)fjU6X)'/lFo'&@'iEV
%"h9f8Z9HG;IBBYLD&I<iF5Ii-hT'J"PM/h<RWUBP@;/IV,NhT>1d3,G6[?:TaGs+rm-=bes+g"ml[K@lfiiHq<LW=;cl/od8)/W3
%:M3#M1$\QA>5*<<4mThVdBg@mhB(phk,@;aoA8TOZeENP*/8bU%%WJ9oXQ;U`Z;X,o\BF.Idmg[,55Zr]"HWQ.U)^Cmu?%R0dj7Q
%+o=m,?4V?(pb!L[d)sHPHG>6!]JGd#q<BlW>'JWk6);l)63YXX]+De.n6&Du+UHd7'e;\?W;Fq./"+_Cg20JH(O@1fKr["#T%3UD
%fJd"-kUO)Y_NZeKE]VWF_nLa%LYfI-V:`()6Dlu[M@TmE"'9an@a4m0FFrj@a;Ap;E8RD"g2?W"5-`Q9$UVliYW;L:QC_ZgL8>jT
%%b\,dYrhg#D^'[mj(^b3!KEUCSd;#@pK3%::JY.2[FrQb,0A*AK?6M:;psFtg(74d0WJ:q9mT&9Au@gN2@u_Zo9h=<p[p;mrReN+
%%EPUhrL.&^6'lN]fGKWU[hpcKE0=h/aCf+R3=\o"hat1n=,:l?EJS^GRU9dQr0Xt?b)Qk>[6RP8<BErP[TJtid<LI9XS;TIE@*dE
%89EG8^?HoKRkI5W$?=XG1>(>`K3#<[!>DgQ#fl<[0mgDG&&ED:<i>GKGcfg$T]83qH@MS,A8V@A^9,63BDT+*EQthWUC/^Q*Z1/i
%[r1tG7dG5"WXCl+D-g%?9oZcbHUsrUZA2XuE!4S"204_H*#6N6Fa@*i/HTa[gdO]FWOp1IU9o40bfcr?9t`L8Z#:QN\6htjV(n@7
%c!YkkAhYMdGR*tQ-:eO5n_dG!6%2n=mS(**3-!d+m#nWiI.-tAF],q:kjtFV1aE-"3nO@kr?G37YA;]D-l<_"1!4PQOd!<Cq'\[>
%U[">9@l$3_4.aDmOiqj]Tche8OlKer4ZW<g\mJ8$UBgu?2^l!$Q_TAfL.0L<-?$3amYorENDlBYk&%1S7V2sq@$0OJ_ltsmeoXRP
%I^Cn@llO(/f:kb73Vkqu-Bbe+__Q/)Of)^AXaQ$#a*Zk\XBrO8iuO&Q8Cd.d?',3:&2JM)co>mSc^e*YJ9rY-6E4G]o+=m.DtMn[
%]A=PtC[H-/bX<A..Q25CXNh$t[OZ!]l'6m7V2<Ls*mK=N=+AffVd@)o<Ah?TZB5&,;ObWrV%'??e-+d(Tu$NiNoDkB0RN1R*ASL/
%h.V<2U9g':#p`3Mhk;)FN*b'0#\3@q":.J6A<.jW4NEJ;.L]&4ZflJIP2M411?47%jR`<hnHh8R+:^Zn![8V,X7$6,Ju*V%p70Gj
%BHI]eeW)`^"OdQcJi-p'AFD(kX1l2R^3&@E3D#;W>`</0i@aa,GL00iDq(9DaXN/T,T%YHV_FBJg(Co-8*dVg7_Kk>'=7.QNU?"e
%4rWW]B99-+n:AX2g:_sk(sCKC4&Uj`emn;!ZOe:LR';'Q6>aRNqYch]gFUk;.F^9f_;QO@)%NQ[L=qBigj["4S061uX-Hh6"jDNX
%"7[a65T&rM/hp&5Mj7];]l6<O_+`GbKD1AX.^,nD+0Bb`G$u<,L0[WKkHfCE6:*?G9LLRu%JVKrAhmhA38MJ5dg)P/dRh;6Set7c
%0c7@$oS]N(+&k.SDW82Na?-oF)EN#Ql^`o>mDDt=/9*@V%i(0>2*4V8_I-H;Rb+-j3OI&mr?RV:pK_Ldql)!_+,_60,__!Ki6dV6
%_F_D.[:N&S1nVDJ8aff"@oo?=F'7\^2@66B_S1r,%4]V27siPo&XO\e$8IpE>+q^(]Gi^?eZOZWD6<Z;:QhLg92t:'$37CB=[Bsh
%s6\$nc9ro-f2ug,ABR5L>O-Q*X%gP,&n*O.NCUE98emM6&q=rdo,V(4eZ_&U1`tht2b-V^BrnooWgqb\i`o3a>CS;a,'Z)f$0/up
%$DMq,<+JG`&)R!YYsJ9)=>>OnF:U#H+ns$X\<#"WU4nBh`'q3ACkm$AaDT/@kG49l/acajpFN'&/5d1OJ*H?phQQ6'k0G]=\E5hE
%g)p/'N#9fG>IPqe#KaFM>d^POCN>:q8Nmn5rL]\(<[VVG!L?_=nZ:ZM#dBhW6(2rm>RQ1RWMVOaOt<I$Gt#s@<SXm1=8dStG,,la
%;NLhCSK0o#H*XWnF4s694&r:&"U]YTf^J991B(9^s""aD8IX-]mca(WjlCa;aK=kFH@Ptn\)/9Rb4tr$CJ0,+n6cQk<Q%5tjDX3G
%kf1ppqPSTS4tQHuCH3j$5I]Uhasm6l;YEupI?.:5g->cqEH2!sJe)X4jD4IgRQnTkEUl!+/+HpCH:!b;2q8aoXcfkZjco5MLYre'
%^6MZT06R%(g;^=-k[n`bRbWEHl\Mrj[^X[Gk2Fe/1#AKr2[AG=r(9Kp1XWPM!'WeQE]'37qlfef*5=tK:HPaGr1LkZ<D7Cl8tUL-
%go*K-,^(/\>e5C!rO6knobuLUR9@[LAOaci?eAZI;k&nYZMZaca^nE:*6:3dT<0ZbDDUsnrKYUcLjpOF,P'ohH(ok/1>m(iR65u;
%AX77EbgQ`Bp@mIF^#a]0Oq*r,;E8cG_e&e/e7PJ^'=Mua\)SR)BN3r9h,N?Zl\5IH=-re,S\Pl\3rDO!GWW\OJCV'F#Cs:P(@k?3
%<HRd;=7Tu6_(ma6e7iVuiU;f%lsAuRjt(dYgKdNb2Zj,T-l@A]I0aJ/>2._1j(`uqFXK>K>-ZdNiq9mNE`nXUlj;Ab[d4VmD70&*
%lkn'Dgf?%W,"[R?Mfa#e58MNc("gIjDH.0Z$b9c(?QN5Ird1toE9Ii$%/[=ZV=$W#=kZDge'7%oSk"o)G<=3251l.,2t^E*&NbGU
%D'%9GK&!nJcR7p:MWY6A-eSj50hNKn#O7u.QZ+FKT&+)M[JUq"QYIo%I&\d$<+L8q;!4&@C7YmDe9c;%V:,P1]3lmW,C^r.b&[0g
%,hnB5'Buns;Mdf.1A/^/T1L%Dm7]"\eEGf.R/cjb6>XR^J1TTm<82omq_OQ?(iMY+p[9.3OjYOS@A3Ak-%G.RlIEWj;qHl2;saXD
%l+Oo[r"d?W%>FU^\r=#6M*^?._+P@sErW.hC%X[P%r>d:rQAHUia7haMc[A`7.c)=(piB9m^@'4Tkqj?Y91cZrp]/Mb.hrdE8cl5
%ARGA_8gNKTHu<j!R83;%cOOLAcNf3JIXZAkq8Lmd"2D2TGjroCA)FI8Nd/=-'DDC0F8pkW?6s7\r7e9=Z@?NMi5EBWZ2O#bFP3l_
%'jK#Ze$jluIs/67m*?DR'E7rqhOQl\dL5g\,GV'LTWL?QO*AJbIrSK2qbJ`aVSA?[')^q:e[b]hoWmPm1,cH;S&an#G&qkM0)H_c
%gNWXpZFJks>b%)W[B&/i^L#YDp`"rGoX@khI=EVfrTZ=:U3lmklK,'r\A@Pcq=E<R.F:^./ZklOX%U:KebN*&]uqrq"tNJBb`NZJ
%in:(:FL*7,`"&)tj0dfC4P%2Mg0)n5Q4j/^f;3TLXL+4=3#%\Lp\FM\iGS[+l(iJJ/=j1E]1_>)Mt5:R!tF'4gIk2#-3*"'V#t#T
%j*>OAGn(:*!knK-?;\gS2oE%E.Ble:0*bO3h*rO:XBYrR-##TZo%-K!>iij(V5"J$>>Od8+E@*q'?D.8S-8OY9J0/OCi'E7GGdd#
%r3@=L>R*T2JU=f6'[V_@5G16-3e8+8n--B0FO/Bp^gK%q]Y&?l>@1^k83\b_+8-Vr9`4Bk=nJ>1QIWUffB&R@Sprbk@Fph>q.+%3
%."!HrT5>"FQS5,=^#clNMrM#X$f!AdNt*,PXf'!K\Mr<%Y5%%PD<PSCp$0&k&g"12Xg#iLG=<Ds_^es3X#hg\VI!HZCRd:`NXiNc
%.j[3E=Lh`V?EH>s>H]QbQ_q.\o(Z0hl.)i*<I[^V<nCN_e(*YsVme.s9C^P7OhG$p1m:5hAp$n\3*\VXC3<V$WuKfo2lD"f<K1]"
%X3\A%]@tM77TW*Bd,j!Hi%hSRd5S8[KT#`k>5U4+\!B'3KXL_LWO>j?gY#lEC^,6%&#7.l>$\]LYB:3Ja0f>+Z&@"KD.hTFN7QO[
%TVP2bi:`'a$taSNX5FT.aC)P_=q0?EC"6VYTN;E-;iDD1V@JqZCFQq8g.[9[+h:G%$10nbU7o9PbTKlD[VDM:KCia=am^C,RQG*I
%-M6"m`:]D>CNr"RH5ftQmPD'4]DFp1I@jltf2#HWD>i28+4d-1\Q`u0mr-g5`oCnq'RIJ(F,KK)NpeW$_O2dK*^8H%[)85#=8fA3
%1ft(!*%B;)E9U&NDDm*-J^amjb9(Y=7?#u\llap832mAh)qXgQI\ZbXB/_l:en&Bk>AckR.m)^G*/c'ealD!raC2\u6nZD>54Wf>
%Gnas]cPhqno*l?BVf%QidV>U!9f.1K:%[p!GT"1CCb8/b_t3h?qk2^#>WUfP2BujIPte(j&3&(5rJ/X]fT>"'3Bqc@"EP89?],F0
%-5]Eo1&Q<i`U&IcN]@pl"3e`*k)u^6nflP:NnK\FYQ3L`lu?^&h(FC"CgLV3fQ0FBfF"*+f^=4YJm3M;-95sj/^3T!ff"&AI^nOC
%et[Rs9eXWDCE]q%LGG\Y0+"="4tSsho0kZ^^u)39$3$djX9_Ic-Ob)AC_"p&@=(XR'b7Ca9>]6Unkd]:QNtBX?QP$^f(r3B0BFL"
%0:cD]cSnWd@Q!`#Lp%c`ZF%?;g6EBGBj]#Z2G6sDXRmo@g;15iWa;mOlZ[q+X.`],8%?6f_^kOlLMP#>^9K:$C,jicSQmXKqtiP<
%0V&i@S"9>ZdQC49W.C-8VfMWB;,+0!o[M?+@nV6uQbi9YXc:tZoD19Zb:WN5I-p@@Y4Y7;egt`PTUY`I@G?SGl+L=aP?AjCbF/5o
%]QSS)(*@;8jVAL<Lg,`.967/dW91QGjY!q5>/,@:NpL)M[s-D=U$Z?l;;H]6=?bO.*JjX=`nk-RB00&&h`3l*cgO!Q*2*]*oU<JD
%h+/gIg>+dWhs[0/$H6:&[uoA2pG=b4H*XoI8BUj6U(gl&-Yf2Q0BmtrD^B\r[[G@jY+LoEc^4=cbF7!QX_kIP;X3MFP</%brR=2L
%09GJlX't3=*Bd`ldn-^HP:d<"#O-PGmio)c26(6KPN+ski$95cgg;t&RGQCi.D*.%e'+\RohbA[cC`<=f/qTp[EFn&0#$"8F2rUm
%4BFN\%efh*d.X%J;',H%Tk!G$ms_*Z[.bIKp%K?s0YO)-p07DqNU4r>B>+86h^BT7jHH:a9E+jtRa/[HHi8TDLc[fQd0&?[;Rpds
%d(%GH%YH.<K>[)GLPnNu[8[F'c!_cooWJYWNuT2A/sOqMl\3?tmE8@_oj8^+1fNY6np-E\H:c*Sa'neSEL`9!\&XhEi:sggFdG+F
%*p)B/R0SI.\Qp+jS@iH<CIPD""cE-3]2A*<pb4i'hq(Ar9$UO"4]-h^d*68f/;;B$RmlIUQ[b.D/sOW:Zd/+:6"s8)4YQ2>SlJAn
%-_Xl"^N:8E/*5ThE\S=l.6e@/Q1O\67Gp:NHPeiZ.4%a8qrN(g6@@Et09-r47i1jKm)rrg<>(sobN*aCr:3<[=h<tOGHt;urr($j
%8N7R%H>Xa'YJX/Znoa*o]Q/FMb:,B!X]`Dq2%$rSjc,XIe&d=O[qpJsIXB.#5MXg2.Q_jJmAg1=^!aR(];tRImeun-<TrR/IN5ED
%T:_DVpI;\F57!\lGW>6Ne/t.MqY=Xnr&jkD&$kb9or8UQ$46OU;nC/\SfVd)<Gaa'\^P^8(RNiMU0,i5q;Q*7ITA"#/nu3A8q4Np
%<`P08(XPma1gk7&`aN2S8K5u/[F6VSYB;I86b76PLjF(<-De3#nZt9ks&uOs>[EETXa5SKjuGX*Hr=-rI"j-)hr%;BnO@N)F4"[1
%qYd:1(Q(.IcXXH/mVr7@dheucc+fM2_O[%MF+1`tY-r,JMbI#d%:4?aHRjHC['*!$hH@GTluWkEV,$3)b8k]VK'HMu]>i]MX..>A
%YouJOJ$@7+)NDnb<f^`c!ki(-nYp/Sr<L]oX7EVB^0]s0V7rR_lMX-CrhBG&0(069.s:Obm5R!&N64%GFuRkR23m.U<UbQ:nX];k
%<bC8BJ:luN(.W#=E>Daob_KXA1HCt#1?`#-4!`SjNc/HUG65S?IYCq2co;=41d,$33V2Y3LeKZDIGE3VUntI?h:L?0hcg8g)PW_!
%S)*i$*:6M/B0AI;s"uqi1Y-I>h5(Pg25^n<Q[7bfWW22`qb2K'_FYiq7%?tfYqVLh70ZgH=LrMrM6:\0iqOE<7227T(1]3*j)^%u
%2e$_Q(28f&M^!D$7!<*CjqK"=A9'lf2X+Rl<_m8B>VF(B'"o0&AD(T.B&5p.=F307&^DY$oY*!m"YB?L,"0j\aHR]Jf+eEi6fq\h
%EoCO)2LOZT'N9mB@be75o.FS[X=5-)!Ele*BF7,2O@AaFN[SFIgC.RhNI>$VD*Q+"F0n<h)cNu;:hq]o\V57\LgV]7FIU+$c\Wdo
%C.n]rh?b!_/tYf#K#=)tPn6F[iD$.p,"gjCiu<R9G&8O-Wj8+'>Z:\m^73M!RCG">e403fV1oEcP%>/f$?b*e>Gjm2mod>.0t*Lm
%Zb=]HVm`>)%=t"1-*bh\)f(NP`A(2"oKfnBm*.M50e9?$br+p"s4t6VYpbk5BOTaAV)6]52&IW%KYhcEg%i0\=E#VFhk37Xi\:*0
%]MAW"C!_/hpX8]'eBZ]Ys,Mce7R&c=.e<<&5o75XY(If;kWU*PA9jj7hE^`Tq0TU\;B+o_`i)i#C<cIf=e'a6VS;aKmHfWgCj'Z`
%^9K(DWS:)?`k(o(Ql]m3)r6s01%.KILSR6-YR3VTNhXp=^:TAA9V!']cRqBLmh3P8e=G!@Zld?Wmf[Zo,-pKp@OjMFd5^YZ%2%%X
%*I+`?E7Tb#\*jFj@jbpGT]q(R+n$<gfZd*8Yqu-q=LXPbQ%;-C);X6h.d2<OhEBT`^<htS$(6qC@([.sm20`\F>H3#:RZ_V=o#7F
%Oc4Vn*kgbIc'e\%*4+b[4-;)^O,U5=D=igJm\jf61\/c7Hp;U_A`f/R*D4GVMB%]X6dVGp^\)SOkA4X(P?eKI8cKN;DQ.[Jlu8H7
%]ctRU@IL4<D5A>hgY8^9hn5:p@\eP?F>phT@Qk24Z_R:7_Y/<Pl!9F4a+3E<J3RTfBE*&fak+=(Re<Q7pDW4#Otr)j=YYVW_^B'#
%4(ViP-\qUK/WCLna_K_3BZ#Gq6asC^pBdE.e>=Yn3<_F>Z5<1-KeEt^DdqnA<=$D^8+2KL*e#r']kIp?-_Bl#q-Cb'd*$ckKdL;p
%[faJ8Yrlf<E*6Z*(Bc9-IF@i1j^fZkY^<[%)rA0]?AiT#)[H<+8L0Sbmr]PRkH=h-kMHQJV41Y1YUl@6B;IjEEPAo',j`MXGAB^*
%rhq=0ZJ:SJ_?rV[@0W-dbju%FS;9Btf+V@-]g6+HaDF7&M0Qko\$-?sWTX6/6=NU79BkU4:,N]EY!#SR<N'1jLN4`N&sI8-L7+D*
%P].;h89Ts/+IOkl)rVed0Zms[jic.HHgMHWajc`2b08G&A[O-tSDN*KbN\60gV(2g@eY_]<pi-`)aldHbf7dR(Yl(ATc52Zg_2YA
%VLF"Dj1>(eXIa/8dgc,-*L"RnC8T,h?5$PTCR;CO+F9,uG^_@)e*8Hdc21EOj^gGTM?LMTLb#ScJo9))@(;Z-MPn:46[4Q.-!0ll
%E9_].#oD^LF(p'0^2n9*BZ-rOXbEC9iG?3STO"nJVC)&,b>5D*_a,m)?J/VBoYYmJA>-C,M@>.NnUh$`k)eR=pPEFi]%.1++2p2#
%cJ<YbCkG!3[@=70%L*^l3I+>c06sE1CSj$J:bmC)*K4guWO?'u:`cbI.uA@s.r^p4:dnX@cfB#@^lFpC*l;+t[G)O"$/C_fGIf<?
%dZ1[U5dfB>QdTRa7CA=oKqsN=TGP!;_qkWY17R"KC<dp8l!lXb??dTp&/=>_W@[-7ng1r4gG2!1?"OTrIX3796sJ]S\NF!`'bfHW
%a_l'ch</X]U!)i*GjXVfJS<N0(tq&CM,lQcPrc-@\9CJOKA1$pV$dDQqGWeP,&Z2V+\4Q?9/Tkt]S&*6c,8/7VQDGJUrrMtepcb$
%-Wt=dLWSOrodEu*GVjuII"*/eRqan8X/Fd9/L>/EA(LM'E`uDqdJgkVZtgmb04eoeUsQ7[$L\,WQW-W113A_.AA]34iT_PPkk?%Z
%6L<oVQY8r&RsbT"\@rPM)=#,81riaCMr#']<A$1`bAcG-;)">NZRP$%N5;\\VF_`\OX`gE?61^Fb6Pr4Zns/;kn:\+rN!XS@CX?M
%G`=VFPG/tdWHp2,g'a_rdb.@'_JH>eoR;:Bd>Qb!Rh@1_>9&@1jPp86Ci1coPXCd#N+VW6Z=ZQ,W`>nfg,Viu4J\!Xl2#tJY_SKI
%/m[dJP=R`%%st:a[!h0q/e&3C2lZar@!dJ2gpJA3kpMn4eqsrcSSjQa4A7n]BhZu;M-#C,)oKAG;FOU'ET)./-Lq#LW2H,;VF3a`
%jL3-`!r78"YIGWXm=8!)L![o$_V5;S#?J%SG7`5J\@PR?h]"c13m#h!6"[I6*R)n8l>-8pZ@$1F-SEPe/XKI4YFqAe0U'2V-.9tS
%(rom!<Jk(5i^[alg3R&4H6A6renCFW]j3-RXP@,TT!`q2DS/nb+%"qT+J1OBUWLF>;AYZjSVV/,4=85Al:JSV>%Yg0OS.-t4h:8?
%2C+gSEfVAnK.m?-\>t6tM3WpuQ3e[#CM`'Oh7aB:lCO-o-s*lDOJeH'i`F=^SSa32=3^,=c-mRdk=:bWk4!=SP2"-:+``ieo=WqV
%puS9h8ud<T6r@=#NhaVgV5l0kEDbDRMu2+=q!/p$H@(ESoe.]_dk7CsEkAUo.@.Nknk4^B-,68DoA1@,KA\T^!]Mhok>&JVTVZ=;
%aXqX2;HU10?We+n`;par8YlJi`*]Fhb!VWR9,Eb1gNe\4#c=lm(q+IV`&7SSr_XQLERLZ]M0;5lUh#_t4/__f7dq[SmI$&GZ*bV#
%)E(S>4kNiF#RYI6!/+VdlarH&Qouo#OA-V).3Tq6U`8alFtEqe?d\kX_^$ERY_Nl^9"#iU"9lgb]LH'LZ4UGJ)^i)TG-&D5a-72"
%+\=_:qT#bF:(N"QEef(t(3JT!r$2o[5:3T$*CkOR#Q.$Y/NP;G#u'j_-?H-M!kCp?#mhhN3inML!#@U8\%WJuK3p$"[M=s[/BV[j
%$+h.&4/%hE61?E=gtoFX83=IN2b7kLTK7L\h+g\fiF[h@;t:qZh/Q]CieH*FbFMHS<%YQ#rfiI'%cW;t1kFGlOEV#W[`ME*-a`?J
%(R$1E\Dqd0+]nqCAVgV&>N+<\G`2SXjD`:#L4gRjG"iXC,g<PDgY$bi+rQScnUT?&mP#rG`"n1<M1hjG$41a4HbATS#WGL;NWn)O
%YsZT`\1u&a1479dWEIZ:7YP)jm$q7`D*]7jE-C"ph=1K?OQE)&7:Yp9U-9bSddDciOfqe"#T_(97C3Q"b6q+cAaG.OPMP;&rV7"&
%i5=EiLmBT!*-S"j[^ETMpBVNX"sm=P2*,$raup6Xl\RT"oS9ah=8UQF)d.>^*\9EY\]\Mlk=-b/%*c%"8I2qC8QLQAl7aNd6&HSl
%SQ5VS2hW_BIT+<6q:>*;WE[AF$Bp'20b,$\)qh.tRD[i^_;.iN;,<d+9BXFF0]1!,$_,!&X)7&IQV^b0<Y]]lEXG:i6iOOlRQO0>
%MKTWb)3YM/c'U&BoBJr(jEU@qN)Tq(#A9HWrqb*F2Nm)!I6Mq$H$WuKG.uDY)k?,?1IWld.EF(.U3<@HSQ4o^An,KC?7R%49pX,o
%otsK%FAU\-(2q#]Z`e(H)t;Y2m6pJ6&u`)3bu=.E)(K3Xc3ml':NDkibK"_r7G<^P4"JX=M6F6.PFX(C:\h)(+Ft+POY_(H;YtpS
%[=;'Z5rW+CU&Uu",.d;F$<_M5Zu43"lsu\4Tj?Bi.DPHWq;fY$\e2YOD`2gJA#?t*:082kU)GPR>2TD.S5[1`8ZoR!;ujW&!M&d1
%:r>4$e3sZqJY8Ls.VNs[>.il&`VoLa;lu"F.P@!d/c@@4/ChVJVoKf8ZZe"Q;lrl^_jJI2#tL3HT)(fuZ`5LUf;I(krB*cJ2N.jJ
%/9OBZ?/oUsdKoQN[FugKTR0GGR%/N5?Ou5'h9cnFU375[!a?VeS%"8[/KCQ]M[A>(\oV]598p#TP,H?sMd.T.ZS"3qDlhsl>e)_l
%'UcgHV<?A%PLCi59e2<Ch"bI=S\<'6bJ*D>TYou%Wc]#13i#l%S2Z1d6k?74\*YOZ/;(C/0UPtEdq3Qt3C]Fo]KK3b1L6J]e7A%:
%G&;MD07"Pn^!L)f*m/LIIX&O/'lUuSc52M4ajOM_"a%*,k7Zs,e^;9XE5_!SG]e=@[kS^39rk0'?_JDUE8)o)62%S(<YFro[A[l$
%Nt^8@nbT3ZOt<5@f/O=XARfR(GF.6=UA]lgX!]9%e99-9^D3)<)p`\;G>hVJHh1e))&5AT@noY!Ah&C=Enm#bS!fl7+pL4+q)0$=
%[c=oWGf,5ZY4'u?Rs\jh!p;Vhq$C-7"d^U7$BGWhU^*YgoW/fOVkNH3X"5ja\nQ5+'21+.HSq7[c)Z*+''U=K?>-[=5<PW=#:>"K
%R;FaM?>bZ\piEF[ac8?HM]<,(P7`9HZ9B4<_s:4V2?2lB+'Ol8*-bJ&\iY*2g5OYX/'j()<Goe+)BBISUk;ho6ho6P[Br^JG7E[]
%*YZau`F0L'GSAEe]orLh0Vgsbp^Mhcb[L<\aWWsaBG\fFq!B\H+.;PFVI%QtZQ$p3-n-L+\(PN$*Lb'DbfSDuPnlbhF\*Wj*a^29
%K`jH38mY7L7K-=Ad>t6$AFXL-51Y*XlCdpqFa(tq#H-r`0Ufj>j=GN<\]8r)F0\kbkHtD,IeKP`??`H]Et),-8h-+_F-PLqfJ$a,
%Br/K?)T`-l2)K<(XVC>rdssU<,/qTb<4g&tM/J>X2ptIfj>mnAWU)H_-7ZiqPuD2kI?[j9<dC6$Tmh%raY<#)=tZpMX^jGeZ)P/E
%:`+*1[@)iAS@2-"15!i9/Wn#<mHW4R3)AZbGud\Q:)F9(-87tL[uU`M=DgQkG,;7QoPs_:f?P@1Ze0"nD_q4S=YV4-El0?n56Um<
%Ot`fEi5':sh7q,Bc0X)SmbWtU\K+<4_rYDlo,P7VjB+((L-2HG51NhB2ph&3[mJ7gO(dTYfuiGODg\gD&uLmpQV4m0^a`C5^h!3m
%qsZABP)7\&_=%i>Q.1+6Fqj(WPNDA8J';5Bo6._LF,nMPN<0P12E)G[]/L.05EJMcmid*QjKETlNO!6DH;](><\dlSb3IZd.QjOg
%^h/IlKgJ[[^qud2_ceN(l#)aQZu):f12=:`f\5RqVV5<fF[d<rWjO`I8.!m@kPO"X_V-PI9l@u'2=nSfL4[gb<4eD[L>!ng\/eC<
%(cX]#OJBPJ`d@d/LE"cX+N>o1@iX&df>V1hn=$JiKY2_X>g(VXlGaZX5m[<7X_0""du\B.2+3eSg.O.Wp4eWf(D>3HK6F,thHWnc
%:]7D#ZJAe1Zapfn6e3Vpa6Cj\bi.O3-;EF.do%HXAa@0;/:"[7WUqqO"$q32g<M!g;US05,cadGHY"ZF[>Q1>d/=gdenF2"^Qb=/
%UTKMQnN*"EL6&#&DC+IQhdE/'4i]W`%QoPs!b^:gSBQ`;53p#r/O8F'r*V+t-!"U\b]kb-mj-H'h/OR(.3=ap.m3pmbbb</i);Rd
%j-4.j6k.jA]u\W4;D&.$8bgt7Cdk(l);QFXl5n5rhZ6?8TD#WW.k(U"kLnddEfU6T*F$LZHng85)kmRVilLd3h386q/lXKf2PpPp
%g-H/UlbfOG3*@W*Q#4n.?9@,Oml:33p"RXq[q%c,ou1LLdbYu[*\2U3$J8'gjMDuSEq`rCM.MjER#A.Gi[>I'Bl(>=G=U@@EpKD.
%#uW!V"Y,L"Rk18QFgZO(/h9O!kMo"ifQ>(bQ]#c5bp`7_a73K<SdQV-WGXR,HTf%Mi.X'\DC`C]XXQ8EkrI9s;I3T7<+<UT\tV";
%ODZ]H/PV7tSeRBbd5a.VJVa7u^=+(;+I9mn_*DR9aupcIW,H;P-aBe[oMM_%R&tE[d83ePZ^S!5qiM1IgM\(]o'5=b<dVtBV)mSc
%).U+GOR+#qJ\%>RD$^kM3SoPI9X0KX9`5QF\\J+N)0u56'hMd/CKJ's;,9soUD+Ce:lr:]GCn6L.M,@MfllZBV3o?bCSuDB4ED&B
%k&?#5:Y3IHD66/\VX/7Zn$fm"RF`3d-+@K@gCMf\qDOM7l]5&)d-5;#FU.)^d?)K-mVU5>$qOU&jk0)jAX%Ofi&YOc]Y.>'`beH)
%HHNc-\fi+jKsAM%DIL&b$>/S(]mqq%*,ap\gX/_s2pI,;B@+_-?&h($9=VbPT%"2klLL#^#[1,.>;K7Pndl1iUp;orim%hNp%$g:
%@M$+SarDJX^Lm,?LSZ`%4UEfSf6\'#mP^nDj^cp-]ek:d;P=*Fhp4Fqmj#B]RU.%B@rtU*X(WouBUsr9'^0LGDsp.Ehdn>"jCRIV
%>\uNab_]^@.>JqTB[effOsM"i/$%pSmFH&*=\SHs7tZpY5*[NfYH3&9WM[((B"b`XQ+-OiT"V,dZY0EkPU=3rJa\qG3*^1K,91Uq
%BFrp\MDoSOBn%q*)(!C>lRAVQCQV;nRll97[2_fHi`d!NB,PKGb]Q*:]ISua2.q9Y=M(J(.5@(Abgp6kB34:RYEf9fQqd+A-dRag
%PI0p"C,r^gk%mlBWO8ipG2kdJLYKA"Za*6b"U"=$'CK*iaAf>71N9ssrOqO;h@g3_[Mun'H?778).h%6`GLFpO^(0:TC2/7::(B0
%qsZK)Y4k_E6aWjFl+C-Q"ID:/aK;[4W3/qB2DPO:3\ucN_pMDoGc`@8+H]kWaK`2m+6?OAT"CE%E??M@9f"02c,cMTE([[R2i@;M
%P(tt>A]t9rPJ^S43a-i+:A4Lhb&89<F,q7VZ*=f+L<<Y/C)hH,ns"T@jOS9AT6)lqNLmMD1gUEV\;B;mF5OV?\Fa?fK%PWtETHUR
%<c"Bp@XODEgKVeej*5(c9i+,]/k7]&iIL.[\ij<D<\#+HXD2oQ=D)=_[Ju%cgt(*\q7W;S5=@u_Ea!pFb-V@Qpa18m:=;\u3JTlR
%&0FTc'CktkPhaNMg!'Ed4dR_-':W$<&3#J(E5^lS0KbYqB#t-qS=N_Ys/Ls'3MrC+e#d?-lLSR/khX:g"Jj[ldsnuq%Bii?1X'm8
%987iAT3c0(?K`q+0lUIP_s,_eQ6/>rl97&i3im'\2/;\*:o1>n>e5FUK^36ZeK,-o<FaOLHp1TFg[a;2O!c!-AKI63*U3N8BUQRI
%h1r1,n/^f>HO?X^GJ3Hliq:ACpk!()9%ADr052b[D<]fm=n?4bpfgdI/>r8&;1pSH644NU"#egU:(E\S1PJ"Nj=>>/<0I4=XLHuU
%k;+6WW>cr<7OeH$&ahcj?\j6n5N9l"akP.Frqt+BNNBUjs7`_Kre]7+F#$^%1+W2FpoZ`>"bD2ZEIo01'hJS-_FFcapH_@26mg'4
%.Yg8D.``f(TX#R!"CAnKPUOsOTi92;[#U,:p_%]j0$#O@K`-`o<94rb=1BX\GLI%uW$:dPV*^FaQ9pk8b#$eor$5CS'CD5/b'[0O
%70,#3EYO2'O:Hh*R8[7AMGZhT,YBp9PuS.4OSC5>1!"r93/+(.Odq+dd4F['I=tXe5n#1ln.J7[P>tYXSB=]+@L,ar<0Ce7'AtVS
%#Uoh\#*fNFKrRu[C]L.o,Usk/+<d$UPlh^a.@b55Z4_dhW^)W^;_"IOJF\L((*]47.Pf)t7"m9P.O.P65a?CV<Ifr0(RQ"=8qMp2
%pCo#*YHfK)kXB"o("rm@V+]o%W6.LoXC_R-=]Q7dY+UY!Xq4SI?DXsdGdF_j3DrF)7*5ir"`N*?0/GB6/sq/]Mueao^q)'iAV"EG
%!`p#\>*^YZ4A2BB#`_Dt92$6h*"Ps-A<;X!W+Lr1&mlRF"k@Z<.o:gd7\OWl67'g6(lfFA.$0d,*Z>4L#_Y"`Zj;DAbQ==`(o0g`
%BKt"Bah8+i8/h]tB,F5eq>jJ#+!:P\IutV"o1b,j9s+%-SK*;6aYK\+4GLGATL<?l;(;+<.Ss1\5W0$m$rACqo*j_[5`$+,-OraK
%1S\7)(%I]rMUdO(67<utK'*JScX8QEZIOb_NH!Bb=AbqF'_j*&#R]Yu%B(te=gL=hPq4.".$>:,g'3qG-qMtnF<M3hKAB,#8:hQe
%_$VIpedfuUpPL.#(E=r"buPQm9OedL;#rbA9aERC+L4<>"Ge2)oJSr:XWnBF_a)itm40`>5__%?)h^tBo*T5.i';#'GnkT9+\Ih]
%`QM+IL-S2EK#eQ9fEfNlfq:hK&b*So$o'JR)SC`#"VH$F<s^(U4TL&7XF!BmGUW9Y.eI%$*)J;>.T)"_Z4BN8+@I?'9N5RlYi$r:
%=&$ehTN%M\ifdK4RMHa)`5nfPGuPYrK;4S7JT.,IPTbjA8jTa.b#F$J$q\Ba5Xd6AUBn\><)09I"LF3s3HSdCOC(b[&d6VcdK^\J
%Uf+DS7?rZ:,6cp2;NOFc!!pKJX<g+H7mD#Ea;=B>$\e?mfHQ8L$Fs.KLj+G"K5%<\>ElK]lqCs+GE=\(DA!aRjAE_DJ48HH^oP8L
%4RElp&4q,#_*V$&42A`F6%P[HR<Z=n'%9*mP_hT$jA$G1r`8Grjrp`X)"Ls<Ot6aVEJ^sU6'6GU'(?OP(=S(*B.OlL01#N!3<Ff:
%KR2]*"X4#UIupo:YqM+2g/'IMJWU7/q"@kl6q4"'82RCkPZ98W$2F3qKE?qe,m&3!(lhT<KOsM#Vd6QhD>6s,,)ri?KAhB+/Xcp_
%Fbs]Yi!)FnW.Z>S!sfQd'R\!%aGQ;DW[s8PYu=4KNDT_C`#BOdLC-Emh[FL)a"m`e%\b/gO,hk[?_BNth*j(Q$4Mj,_tc"c.5Jfh
%JXK"0EI_UC]0MHGLJQt:&:'#_YDV9>Y%+]u3AQnNX%3;*"\1$Z"^*l[b5tM"/1G6r6tluTGp:('=N6<Z`6-2(%3lVu6U86bZr]tb
%H"(aV(d*$uJfkY).1!3`HETpD$0D^@<2I(0(rciQ!"fJc7b2gMA8K=4A2c-&"JLG/.)deeFK8;*W?c__#r/ATCgSK@+W)MF99^(q
%78ZXF!S5F<PRJ-R<?QCW!]S1X@p4X1W!\e&%^&2"TPtbN',dPk7A:P!b^ajjFODu`h$k#S]GEP,,i1?`Pn8o=K1Z1O30/S]#l93b
%HAW$GH\$J[bJk,SF;]:<83,g\j4se4%)]Zu_a-j<,HK&l*Iu'7DS^lLP@Be(%QH"jX0JPc,kPpZWZjna.UuI9]aJ(5A1V<]0N'*N
%j,%D@8/'=0JR"XdTP+CgL=8ms@bSas+H&Xkk#oQUgS3'H=Yc?Ub>Tf5A9*95T?mp@OpbG/THTf6!pc"\mKuPi.N?I9/YBiU+T7tt
%4n0Q4]MZ+@Z^hNgKck2WU**B87?T,uQW7lWdF&)[DKJN</gIT$"@/RZV8t?D4->-I":#Q<c/J`Id"dI^8k*8f(dO<Uc_/j"^0@&(
%ES#f:e7$SZBS9CCL"^IC7OVfLTP`!B$&p"G;pcorpm;D,<@:"$KB"]$V_JWZ2@P%Bb$^o\-lLVsU)"<0N(,r?K!`k2EsE%-'dVZ!
%DGItJQ1MQ`2*kh:B2k&E3/FLl8KDTl!P/)M6VRWQk%lrQpncDX?N?!NVjJ$K$$GipPoeS=)['XpZoTWA#-1mL9FqV5Ie"=A->5^W
%2PS*]h4+RfpZk(]!hJIi2Q$8?&d5(IMBkn%_LfAo"0Vi7+#=N5.nF[.+oobPVVr9nA?@'PXLhgQ1bK%=dH8bhc4+gjFeCXD:3/<4
%;uBgN!,(IA*<T,?P-R.b"Vn>9-t@G`"uunQ5]'/;R^;D;lIG8;&-k14$k)Z9;I_\'3?WODDQ$-th3uU*"K.FbE'&_?Z#*&B?adX.
%+Lbc?:tpSmk%m,gH?HiP9sTc?n7B)jJD?\V:n'MX24K:+:+$/ujp3laNWn*`3HjP8g]m"tR[37rBA9oGX4n(7OrZ*C0;gB\aQ_3*
%g=4fXfdog9C'm4XeB8h.>ttA%*^=(!OG(\sQGthh0p$75/uW?kY3%;,G4k0A"+\OG`/c'no<L1`Ya]]!mXEtgP<c$+RuJkGVZl%"
%"rHBe-+WfWbfp<3fqf'k)6g/%bKO8j]%k+j\W,hBB/f"(h#091Rm<l3RuJkGVZbt%$AWZVU)a/KZZC\&p,N>RL?r[#13Zg70"5dJ
%G7\WjSEATLVdB[D'Bh8cZSBG&,7'FW/O9lDnuQ:,!m4Ite3Se_aC`]@iB3>qEFm'72)>Vs-EY3'r'YNZf4>i+RUS85bl2RYOqT19
%;`)jh29Z(]:37jI8=U+Pgiuj)H+b\fB6@],gOEI)bL'S>=mkM=fB'IsXr`O7FZ=`JNb<JeOLnjYe0NCTc=URDhs-FK>^l"5gbO*j
%J!O<K5VE(V5qPTJ2.sIpX'_4N\gY$"*WGEf*0@d>#AOq91hX-L`UB$6gj\QcDB$7+TC!CHONW-nT[_@obusJulIY.,%cn1pc(EIT
%)s$YW5]$Rnk%lrQppC6UZV?XDJMVu>"pIGgXGiX>)s#YL"18TkDU#V5X&$3'i%-T3i#OX3Wc2M*`+dBq\N=q$:$S82C`Xo_SJ6V/
%+`*<Y6ZVt-c-6:"mF$R>#&Lb\>Ii:^gDLugD)@#$].F9KmaQgAe2be,4A9]T+b2:;YXipGaQCZ#1C*!L7lSpS>e;lJ\ue0P:1.#e
%T\4]QD7Mr-V[h4Rc=tSd@=hEV!"+K3'pDc@Y$9'/=WNH0&i6-0NIbnuF?qM%FZ!gb\#Wl&,:F*[A2:^U+QC8mGZNu/\bgM:9`gmJ
%Cc80cSJHn%)-iD1QK7&OZ8WT@AXG*KA\kP3/3A(KlZ*7IjYijNTA?">EqelbD$$9jCc80cSJ$V1.3-KIMfSU!mEPlU)<_p%>-b1h
%bMHP'\fAV]gd/=CF..0&S:2KW9q]t*c,LI4Q6:-`R&i)HGnq!FM!M\>7&D<kFouV;X+Psn('S\%"2p`<$sDV0ASO2XaqC*eF_>jG
%1mhDdR4]1j\4e\R`<;(^4`k$7SLekm(1uB/Yh,>cK!\'<DJONOn-u[(8TBXR0I$$Sk`-:2M_u-8m:W.M$,o=RShm;<AXk2,(RdVV
%W%a;RR7tUH,$)RB`KG@IB.4/UP]99b9\GFX4/q75<;ZmK>0\mWc)B49'4(>6?)]gLl<53\i$_/bWNL@e6DQ#untZXaAGMfOQUT"?
%e$QK2IMm'WCPK?Y!iTaO2P4(7hB"Kb'$",UQV0XC*/]E5'FL#NV@Z..U06DOAe]qOC(bu@K]5<%p]7NuJk.m)JOA@i.p88#E(5AC
%bbZ8"*EGI%!2p0?K8=KWP/Y*n!.r#jQf&H$P"BXoL/3];QjPEc/D?C!D'P:#!/6?aGe8pXa^efrVlNrKBEVSUq1J)X@<(T?+V>+m
%&Ffrn7?2A>"?Ucm=AZE9GjI\8mU)5]hm?40&DbQ2N3gtc=l+YPQQ?[$`FABmI=?@%*T%3YbD!G^7hfp%M'Yef.Vim6;)"Bi^k0*^
%0<qBF38>rl61Hab65[N*69Kl$M[0X%J8?@Doa-kFb0nfb>csB<WZ=!tcm<\e"+_,P0NR+0$r;)ei;OB$P)A!skT0mF(Y:&L6Al!+
%!b8O4M$q_0)]&b`9Ete='WmL-A\-J_</?)t;2Jcc,'*s4Sfrb'kfOP?7GbV@;`So/(>R/C--HWBM.?jXfnW0e2$*4eB::dQAhkRh
%`X@;`#XLIKD9ER"G_sC&*\o@R$cJP\ga,9="kVqZ2@<njKFtRp.Ol$^3`1UTYUYpC^sJ>ZNWaicVg]dEk`6'giDO6e1EIVI8h:(J
%;%F3`\j9cY?>.QZ44'WbOV*F'M2jIPjup"5abCQZPS%m7(lK<k'XSiZ2@1(.it^93E5W*B5Wr<a/In-r,8:)$RfjS"6j6HMW9JiH
%-+ZO!X>3`'OX4eHK-8N)E5eEDgKRXKR(J$0]!=j1a^QB*,p'NVRGHjB5Kcoe=WA(e`,LA;YZ))k(X*GBZN]V6=/d%o<UE$N-b2Pk
%=h4B/Rka;T!<EVe$9K;^+j!2d:gH@(677eEU+6LjN/AdB*tQ4."0.TAE315k#t#EDZJZ50.`dtljbY+=aY9KgmN;oE+3.l4:(UHF
%PDeZG:(Xk,j$=M\8:b@.;4-Fmj"Zp25ViK<OW@YgBZM%D0bCo0c.?2s&/Np$Dd'%<AIK'#"dAsk:N]F/P1AirF(UBErRr9oXf01C
%pd$Zj="AS?D$mEq4#)cBcadPZaeq6B$R+Y@,/F"fBLOMIfN?r%6UEJ\YdjSRN*I4#-"6l<N+?>9Lb>/$J0UR!p2TO=0:RSLLQdrX
%eXe%eWfOL7-l+aMEiMeVfJZC2PD[#\-W.]+G(?=/d60XqJ2@S/_$fuD1=cY!43E-5Yu"[$>d4ja;\_^B*Agb26POIn,%Xf/SpX<*
%79^DKbuQ<3GpAJN'Q]K`d@@&9UOY;uS=%VW1+$hMCN)Q+8;\m$K7g!hn5MFg>%8#Q/CB/-.&!e8:eK'>PhBI`]b=u.TmgR-1<e?Q
%Nq9d_*c@HGa[fi17MU[^T!QE\PpFDKH<Fc=*t>TY.5T%1=W3FE?4^jC&3e<o/<ZRY"Hc0%1b$CC!R&W;HQ[j%=&poTfHUT<W>%on
%AreI8A=6GGY49PA2a((FKmu$TUVY%t[7-L(]X\V\[;lZ`=r;nOUkf1s>*obA[8;@.WF*UTmcbnb+&sH4ker+NH*S:(U/Q+qbo.U-
%=el-kJaSb6EGlgg/k?K:!a3#40nor<^^?J*9_X#7:4s*HIQ%2>+hdPU.7$LE'N0EV=p,8'd\K>$&4]<\M"NcD8e<ohng*C<6`8[]
%7frdY;dD<2Tgp/s*9JS!9>l6>N*.X`XlFk>M44WC2#<naXoEGA,-mm85RNL2/N))_22PmDb*S#j,.1#*RV[(>O@0Xl\mfkTKdO@'
%"\ZY@&U2[J<CIWMTi:@XbE3,].TW4\iZ;"FZk:l@iaEJ9XG0+ok![2ZCrM'b2AC@+db1?4mJ]20b+TDW"`CRbk=<?dhE6SOco=>%
%eUg0aN->4AI\7UE0Uj4SLs/E&IA@3C4p#:teiG9IdK(bRGhfMS=\sf!AN4b,19,I@@\VP*LE2jR9TV5--H=`T'0Hhs->8&F65CDX
%S0*cR*;*"7q_g[1-beqAf>!2k(<[HJL)T"oZ]m-r!W+@lm?*s:0VCb36Zdm7RNr'i<&)?(.?Mb9,+"AsOBq-]5S+T]q^V]'BcbPh
%7^,E^EI09H6LQ,<6F_\iRB5'Re:I`*.TdHaTLAJtF#^^\-X:Vc.@Ib4#aEmi6<"Q;,E/LYWfV$o`A:7)&6,P'=NLD.(=tY<:'nru
%"=`E-#56111+C%Bi1B$bZ0/?ia&>$Ta9u*_?uVDdQV^81UJQbsTsI?:aG[-V`o6n?+:b\qej>#E>U:0&;2?E;ABFm2aX`$LgujVW
%7HQ>\`;'U4^iY4_*G>K/`!#Y@rL&P",L[2`pd"6W@_u8%U,E%^_0LLNB,$MTErsu%91phA5f-G:Ml06fVOAfb"5F.7TSsEt%rm]>
%"l'Clo\q;LE_6FbZ9[Zn6W@Tb%RV&^=@@e/;j3&U4:]I=F93HnE(RuI6nG^]\$3GUWQ]@9*)&]=F#>oeEb*m]-Zc[T-,:,9_4BY[
%6;7-!Si4MqSV%4MEE;F%`"O\HRhQT.,"$r3m]+4u7n,>c#Js;b=A('*W@2hu$dTopMQ'A`@hoh'N,57TXpC7"AEe])gPe`71Z7PT
%U6s3C^e3[?VfBdE5H,$$M<ImXg6#'ji8P8h9Ro*(6F;9$=u&7.7Wu+G6;#N>WH?Y-II&H:*64.:j?smRWL!b:OVO!fMR]43S9&(X
%ZODge/C``WY4@e'WUSh,SZ&:R8;.3_#c:306<-ti@2SaMS&]1knJi9*\/s26JnIMPWZYI+9uMl8Bn$KDO_T1de8cg.OcUdY'I_'[
%,*B3s=>F?BbaYM8d7QuaNpb/t1oULW@q8W75Z+3e$(&k\!lSi7VhH&Q>,Fcli:I7i,#1s&.?u/@idgu;^f9MH5RBr"6)J(RkNVIa
%K;GV:-m1=2UDfW9SMlDL/W=GEQbsh=cn*cF!]f[\!=QiaH--/E&2Z&U)OFV9KEHsTl#`+aVYBLt1ia$nT[kO7Z(s3!;t5Mp14LcH
%,bJXeVNMc0SjeqJO_--o:NJLKJt0rUMFU]$5iY-I>/nAY!@7r#E2Pm8cC?:,SKGkgc0QCq+EI)k2GVMq4B\tpE![5>Ss!R%DA,AW
%6OQ!B=[3N8MG0o,/J><1YS<5dKQ_EhZUNo5,8<g?P^"tp'(M>@(.XNS&J694BM)rPa/oUZ*0CnP&lM\l!L%dAL6X3%&tV`Rfoe@U
%5]M+0YU/55-qi_K@+[^UN0#fc>/;(F3Z$ckT89aVU)`)o?oKQ4&g!m2lo'tX:_K<-Yrfsi8)RVTVQ"lE1B,qMR-f_;=gfJp<i53d
%4=i(PF4n&+aV)pp-)LiDaC$DX\#*eqbct_7jf]6;&WSjaVbdU,$/e?,FJM_OE-s$s6(%H+'EFSn%)#Op+_O,4MTX@M70,h?+\`H5
%$#"[QZ1C*H_DP%eUc"Ig,0i3t<>W8S'$3Pp73LQR9T"`\B$>-0L1\b>e,j<C8r'K(fq<%FUaJq11CC!sA-E\!rtXhDR(Gm7)n)Dn
%E@;l/U4WhHNl'0Ie(IQ!$Y2GcHO&hN!QSE$Y0G7H\lp4P$fKosP#GJWC$tbHKK!:KG7/Y;r>hhp.LD/;Z#9\LpZ%!0KqFU2$gMI,
%5D*I\%<]&YgrP\]=tiWr)0ueKFnZhOITB7SOuEihHkoL%]-N4(cn+8$@k\[nZItGDP;f0&q]1$)pZ+Tq<4S\"9W5k2bN<G)>r&cS
%Zt%G54e;Vf\9I3-,tY9;p&jeGjG(I/TM(!Rh3VY]":2Mf"A(#7=$e.^6Ob`9*&Q>#bdU[Oc7tB9HrR@CC/Vb09"XVSnF1BU\&Ya`
%n"l)ChWsuMUlUrDI,BbUTYY-3:Z"QQ6FjPII,);\q7u;+?V;JbpeU@%f(0=mddh8l`m4Dul/N4;hfh:=2Vl!cD;"Nhf9Z:Ol18=*
%m^XE^m&g&M9:^E>I[J;_qX/(p#%%^%biH2%T5Sl\+*Y6hrQe"VYP.4`nMD:.qV^maZ>cpC*\V_1hsL%2jmN.jhfteD6bP&dVR3aO
%SVG9_eZbJ0S*XoT4Ks80g/$u+g?m(EhqkKM^!bW$qsLF:mX=ho[P)dHV\e2G;*Jmt+7H#OWP<BB[Ig$DqK1W`c]IL3_+^ij!IG0M
%7^[<QfM<SGhnngu0^bIE`j0c,psZF]J"QikNN[DP*h[6.aF?=+l%#;BL)0[kH-'Om;S$ch+d!<uj0+.jqZM#CShgO.j_'7mT-&Qh
%.Y3AYKo_iBWhS\S3T9#]TAKQe@W:d*M>ju`Jt8p@\V11Q(<,BSgu*]jd1N_cmWZ75o9R&bST;Ph\M(".mI+q88`GTB")f@V:&la3
%@=0M_TAPR0Pgd\p_HDt#L7I=PRsJ&^[e1gBra'oRmbr+<[FD+pbF1Wf_tEh`@!Cq3oR>MBLG-[*!WHd8)msp1]Q^p>r#kq:'UD1<
%,aS9&-/mnIs8)9M+udL6p4"kA.erNJStAqfl@8U['seE;-NrEOnIRlb+eeM-6qH7^hX"0;g/BD/*$D^\79,sa.d&ntpM<uTqYeq'
%]AeF8(+JTKG]5SaTLU/a`Vg,1rAVW?Qf;]o/5C=.$Hn6u@5D.X*"mkM<4FZoX-/X_jhrE54b+bI)?:(GrAVK#2iS-2)%HT*o_c1*
%MR*9J"k(Qqb!q%nWsQ&(oUmd]lAf*DclHS#^rcLXq#'qR8?i#^nF:SP*X;W9QboZWKq`"l(@j90GD!J5oLn.+W(Ze\>`e`D>J9t(
%]B(roH_#3cDk6J2DU#V)/A+XQ&_<DG]N:9ZBtE62G[,EOjLWkfGppd1"27dmIF_[4-S)W.CeP^VQVcHc$JQ-f,D>uV5bQN1@G>#]
%mPk?;Yk$+4FW<I^TRGXIXF)TFGZ4b%IJceSaj8SUa3XWXq0XcAr4KqB\:.KRpj"sqW@6]='Y\oi`=!E*q,4f%n%E\dEebur3:QSe
%5(0ZE`u68l.W'6%=fFQA""k`&4r*cX=V\A5#I&C/F\CS=<]#E[pLWA==iu/n>7s^?oR7&h2nLD!7e)`pIf)?D*4?j$_]#J@>6qOL
%PfIPF+=GI"r>Jo2mPV/jY45f,\g?mbGHZ"$RsBFWCD^Ccj6$q'@u@m]=]@kplsc+h0&%,u?%4#PR;]mQP%.r3+j<,1Xoo,eKoOE?
%@\MXF;RK_+_O<jeNL\C8M"2]?Upsn&bh/!>\#h)Qj\,Adn\SZlg<WBB3?QO"I"(t](TW/^b5!mUe4$D<m?K:Vk8K14Q<W"dfcsqC
%*V6Ut88LMDO>+YOJMV+W<mCe0-Mj$&e,2`B;5]/`!,$bBFTrQ+5.5SEVib'J/UTK'f3<\Uh=(=sq<D!=fm;c#4(3W;V7%,kQbrYs
%T4ogp085IZTAp5Hqk`fXF2:W#cNnLp0+X#qq=JaFkKcB+qdl5!h[D77P>Bs_-oAKl7cmi$p8Ks>'"Fi.2MaXt6^Ig989DGnk!uIu
%l&9JGUF_43C$l`HZ$/K?<``h38$9"J&tA,E3&V]a:p8^\3BKq@AnK?%4,+@R8:s-j)U@s:]"tmA6L;VkQN%p!NA@VG<;n7o;%g2c
%D**Im9IM*cpgLRGIs+'Cr-(M,`6ou-78fDK1"#_)V@jJ3'n0OKc^BUtHTQ&ZjLO/iOg#@Cjd;0&Q[-etZO:Ytc<GjVmYc#Tp;%%_
%]tWde:^OI,5,:eeDA%Y-M@SpnZtd]J%00k34"3m2$6\qKp<>QN!r5]7W#V2HP.pq02Y=&LQ1lj2;MoDdIdBE9j*S0D&*\P0n*chW
%L[rjiLNe#KHQVa03]d6T`r]HgNlE]Y)o2&MiVR'hK>NsGd23IY.?,rTgX//B;TZgJAa[7Pp?=SADp'9N9h:>ad<mQV\`;Ij"As5;
%8sJA(9908j@953IIXV(T+%>?%KB;2D>t$*_I60R(_f)oS9*np%-Kt%4[oIF].7m>!@UnbO<mGnY-,tN(oaf+ei?gbNQn5@uZ[7k4
%\K5+mI*@'=ot=/MU#TGXn4X@jauT-AXCsTh=p_09'SqWu,nbcqGhd:shYc-WVJ5KOUiPr#D8kT^(HPWG4SSNl0ui/A:o,N:WpTKn
%7X`R=(mI0/c!6O4L^5YG3*ZXGL;s+)qYZ`ZGdPE\6iXBp.lS:qU?bs1q8;TBo1jBZY]j!K`5h9=HIZNG\e_^jfT^_>hCYtX,MXNY
%hK/.h(jZc9C$`h)*_4f<pSR=2cRIGrc7b5=dai4VVXq'Pj26:ir?(L)SVlC+"Yn"/TBXi$)NXOp)n9i4pP&S"Y1N(;Qi$WFE]ArD
%kIqtP!XKqkcOEb(nU#f`_T-HYgO4P.c.-kgGa0=?3:5Q?);`N&kP!#ia-.V*\MrU0_S'g\h<sYN:OU"&3]-!p.V/N4_QQ)qo;nqY
%GTME#hFRnAgY>'g&Q9goc.c9i7eJns]nGhaek68]cuad/O;.aa2]SLU-t'pqn0GBC*tD=:W50%(Bq7kE>T5;U(tS/&52K-IXtO.p
%p&f,_F`^e[EK?lTFdL'o&.l8D\_Zm&bDb3-L@ZOV9juPk=D"YiAd,Gsi&:L@J%XL-fOsooLRTA5T:C$pd<8q+4KcAocfopMpAbKg
%XPBGcr;>u,nK]pIeJLSK5qlM-Cs#F+0?QP]X7"%$GmkXJVcde>SJj6Qo?'Nc@_+b\p\R[Vd!ZSdi@a\SWp3M+,hr=f"@l*%5U3[R
%'.7"`j2/-NES#&gADj-HEI!q.VlCUVmbF2AiuUVCcCbLCAJUWmnci*L]'&)D0T,p!n)b&`E2E/tF.k=IUOJRhjiPY81S1in#/!,n
%INX[$@sIbW\j@gXm9bORk2W!W6Ku)fa)6*t@VBXPI(M7(_Gc`=^>0n!S8s-qm3F.Mh*5$.UikrGo\X66=+'0'o!&-E@&?*Hb>5(t
%7T>^u3>CX@f.'GPE]ZMi)`G>,P?7(HEmu/fXCojg'ruGXVp"JdGC9RX0,FqL2-9Z<(=X/$Bs6fC6LkQRU"(.;8.a_+,`.>:GX`/`
%5Dp1_R,;F/n8Am!T2u3D9+H&);O*<DkJX[;.ONjc>tP_>(&nY/1jE$SZ*e8mFU*g]=`b^<OsJFRW+-(9qWauidP$L^-iBMaMW#HJ
%fR!FQe\KJQ>"MpgI$f`'&Sk3:a'2ji_S\R8V^"igk.G]KT!T9_kP%^2,E&&kh=E)^=X#hO%MaM;p?OqL92OiDY:0`kB;`shWmXNs
%0j)a."lV!+an+pH$QFm[PeW9IK_mLmY?5/GR#(cD]HA3hZjKZ&Hd-V-.7Qd$H7.,X+qYXnGW,$f6f@6*/XT2.2E@\sHJPFXD1YjH
%:YLC#du.7Qb>b6co_UP5i:3mA[Kgp1-:[q'V-`V2Y^7)?:])A$q9djr>Lr\#)&2\A<\D5[NA&tZ0hm#*DR91p;>BT=_5giO)5>[U
%gVl<n_;f[ICld_ib9$,MQhk9.K>2(;)Cu#LPGqK`V_-$7OE2[nfkDME`tYNo&2)#QT*;5Y<6q[17H]4l_uic#D[ShBPGG!=\Mr:,
%>jF'4%B7qa\J99)Gp`qCn_DqEKHQS46X?-E]g/4>4Z@X\0u9C?RF8nqN&WKdn.*34U\ZD:f7J%V2=Ehd,?G[6feZraeD#LQQ-E't
%N*&%;`?#(Q-U:,5'6\-Vd3EY'mT"<kl?lkCP@ims6qg&Vj&G.=H'^hGMXt[G2RS`\LFlH]1oliTjoGs$joqge9DWb1cZP?<@AXP/
%dbnHM/_,Yb?aQ%eTC6]@Nd-sU?pBdjM'<]4*#V;$;Rpb]^o%M;ktt"!nQmI;3ibp7iGM9i_&pXl5a29e#K/Et+KC=.$Q"q.88fuW
%)Tt>I9QX#gc"32KE!MA%Wa:ZI^B?-O4k(SkPC*]R[7d#O.M"[Q6;I_6I6oXBZ%&'u1-YJ"VbhA1s#mUcF>,:BUY'Wmj`DF:a[37\
%&2"t%PjnGnPi!,@(kUlE!=EfRjd_ug9=jED.)h?9LTi'[*t*=rCQt.]i?2?hZdB.2l1kW$g%4O/B9lBUd$&"(3iN<U@.4;m8TP?*
%R]W+#e*4N97LIP7WK335<1$/bKcnGE"<Ntj!E)TKb,7WVAPi4La*Kh1]kpAZZe-B5gRP+_7hC(T!81jsnTKrnAA(cd/SLDR+H2Ho
%!jK'p0)Y,uO<P_IDF^L'NH_a>r5_/me>]]>E_p<._PuY.E4s'_EeK:8=LEBFbVXo9B#i7t$l<YY^jULS(mbiB>1]jIb>0j^PkO/S
%QYMeA6i.gnH:E:#/+)eM/nC-EXp*a!2tsR$2cR2*ZmO'Uc(SE9h<QER(a#ned-@pb;'8IeVDWV4\GAPue$!oJFXqap?HtCknIL[+
%9YU9s;F^?)RU[9b+e\$kO,\2JIh,O:!Q2d]bT$\EFJcM@R1j=&M9!:KZ)%`koY"Ui"]]ppg=<>T+\6+FVS1;Y6]`Xu90[MDh.mod
%6Br!E,^Rh=C<dLa7I_8]$o724n;5KPIE?csBu^dJ3fX2Zp!_[TZD219;bKT'[&Yq&<d(XLU\CG/eke?ue'S1;TGD!Mg4Y+08b>jM
%\):WF+>]It80Xq2*l1&DP7Cj\C"\E*%5l,InZYrs`iU2*8C#oK#g#3\%MjhI!7cTt[V+'fH/ZUgd\[GOeW,`MGqS&N#;R%]e%RLt
%nAeM1*gdn0g`4[^h$Un@BeGc^RQQoM:G*--NqXd0X;M8Y!E0;j_]82L.^&E5f8@\qpiuJ=#ft',P/;#pQC$WfO$8`]YpkP[VCS+2
%S=>i;?W%1+iUq]s?Eju9GAY:pT0BtkS+[Ue6rXT@)b0/"2<-8;Gs/O4cW>uEE3KaBU8n@]TXgcn[2I(%gSke\(lCI59,>K9@Sa.H
%oOk[C?DU'P3au_[b&g4_7_0IV+-TW/->2]WI"$249NG$rG3XGeMP.sddrd/t@#\q;Z0"!sG)GW![5Fdf>I$jKep/.[/JRC,g^DAQ
%OuQOQN*$_gJ&TBL,FJ7JWq:_"*@C3B&[[R,%37tgof_lI;VkoUObmNm+)TQkUo**U6M/C"BqNN.]k@oop'!6UB,mcMfN?`W*Ml+*
%k<f4bS1A:2AHF\uW]5X;O)m>sSMo)oid4l>'lQnDh\!??!K#cg:Oss#qUID?b<afuQf4$0/A?0+jfh?8\eN?OF9$j>c+L/-ed;&8
%$`VdX`Q&sSDDbYjL+\j13N')fQ.VrH4cfuK#.(^Gm?_=!"bOofSZn@_8d9'J_NGU*V?Cb<WlHj+Up82G9&6=?Bb[()Oi;aEoaX\C
%4@OC1h3_1;/s6::cguC1q.rsC?-^ok]ItrU6"-n.Mb0Bfhk9K]S64$j&;"04YORh#J>@(8*VAap$=kaLWN^-`Ma;MWBi0IHm'DZl
%UP!p`FS+61l4&M<a+bXMjA[ER3=]OcK?Y3DQ5'HZb;V:?lhZm@Ba>46JE'Kf"HaQm,EY*3]&Ga.ja6g[f_W20MHd3V+gqtM:'@TV
%hV,H[U4X/c*3u?N'<>H+H_$Xj3p]/G^AoJ`lu^@$&m(/tpWY2mVIYA+&<)ti,mYfQ2lio_5?ds7F@C%d#sEWjQ:9T(Pl7(<`nV)6
%)UC2j00aa5fap,L8XLOMnl=sOqA0a3)d)1%?O7?Lon85f[qSd8AK=2dVp?X%T&e`Y$!:a`JSRT6l"=da.-9HHYc+d5<6\,V(3C\l
%+#9Y67:>]#qKN`/>A8_k1Dl,M9ju3h;^Ek[dGdCgUX\:tj1oi2@RYL\$(j9$'?(^mZsMcoHqM8OdsZWj6F.eMq3H#$-tHqkGi(6`
%;c_VbYD[%b%U@mHXUaGVb)?,`ndu2%F7dSo)SY..?9V$`%=5c$6S"b*KOI4$M%^jR:Q(P>rgj1KAm&%"0X[9b>?FUk^>.tL^]\XH
%5WJa2;e;p[4%t],+Kgs+dllA6:]=AdQ5qFVim%iWkG@YOh\/<9cL?;V&<nTUL'W6_9V$FKE\sD_P\&!ke+'C5>L>k96<UFb!L?GT
%gP&l.XU9$snYi`qUZo!c:"2`tY23*j<]On$O`EQN"=%*-Cc5N$Ha,%Gg]WH%e6iA''^Cgn!%aC%)7+1[lDo'!bp-o7:K_6T&*5F1
%"9fHHSEFS&'ikIp%eEN:FC-8H2-#K3Puj*sen!?Q>E3c#?T)@8;M/eC%(47_,BBBH^XG%HhE([S%dT)4MfQ5R*s?UIjR\'],<RQt
%,)lQ46kb1"eK^-2<jkk]To^hcWDKT0eL0;T&K+4a79mcm=a$Cbo@3>"'jM"^:-G$e($Dr&'MUf#c#L&b8`#Ab7DEH5XXQJ97n)X5
%0lf\1`aO*EM+X#k<BLj\G+dF@WUdT@XSkPoLO=akFminF'"Pf8_k1ik7eYJ!*QN[60Z[kC]4!l>*,`UrCeSsf"\'^&3[&J_*57S<
%:_bta+rMub-crKBA>1neiM<@#I$4FY(,6^e-_!^RdsJ?C3bV4S@.fa,;*9np)sXI4'9nGdEabrI@@pV=[k^6@g\Xh.&N,s3o6ESp
%=fgLA*+BOk5H3Z`+s>8"?cA.f9]]c+.36-9O7->[^5\fbC+k"ZlW<WSSXP]m>An776`0kG9u31X+Z'SV<QKc:[F36@pDt6dR)D:r
%&`YG(H=GW=`s;2I@dL>,lM3I>Ft7UXb4IQ##*SDuI_X>0BD8Hl=>8&o.SQmjTFit?3%Pbep5e?Lqo_dn5oaJsA]7d$._7(>3M^Nr
%3,E=4SbF=lKaRbi_2=rci]]8W[A"U.0*4rn)>?).@acX(0YPAiUEFMSBD&EXP*h\OPBMV%ZcG1"e<e"?Lr=NCp)dBuH;O*/Nd;Q2
%jZ3!N$^A.s>G[%qJ4ek?)R^fBHI<PQQAP[rr`)baWu?d;A`8D]Y\p`c7.%3%Uo`jI=Z#]^/e\:OAmgf((YaYf=V.:>M,_-DWS34a
%,fRd7P&F?H!%!5>I;n&:<(2:o\K(^s+n@%<-8$dF)=\'%mBCHt%9;E9'nc%2Of#+@iRiXeomc^S;7AHK#O,"hK@m/LokEpY`ri#u
%UD.6J7fHpr+CQ"I&IP)VT3Z=@beR.gj\\9p0jsIUY3*:4;o&X&[u$RU8JkcKeJr*D4Zb3""a]XbM\lHq.LE!M?_o4HPG?L>aiF%%
%Las&q<`53tED#FeD:\iA_*&YY8<F#2.4.8L_2GL*0.N00B=:8P`NuZ`]\DN?P0(bhDMfYA=sm7@4p9E#/q?B2omP>g'<\aR"k3U8
%L%]_!D3fSaMED+]7(AbtU\O;<;8L(-@mMVe]1o/4L>*iWWlR_=PEg2]3$$!(YPij>TW.1+Ufn;(+No8rmnmnk-(F==.XSdp=e_*I
%TlaAI,?$oHE:RroJRm<_PnL0>aE6,gnHWonm-nRR&V2\H>dHPK6d`FKl^(V^"u1PRdJEE&bp-%H&.O%)Y!7u]J!F7%iL-nU_<idT
%:oh/p<^ph.]?g6n@Sc#$Vf8%WIJ?2i=;/t4fK*siR$^[m-%#o7$[[RYB*ERYG>7WCkM#@/QtL8Z,k?'&-0^\.o/`F8&\K3]#;[Il
%(obGP<l*ZB"`r>&R(4V^>t)C1Ej"&&+LImJl$*u_akkR'"Z9<Kcof5Fb&qWmY';3e!nUhLU-orTf(fd.'HR[7Z)p<%k)iM#4fLXT
%6-D05fdQ0B4$hY^brD$X<60[hj?(K0JiGqErg&ekC'5O%O#D2W%sR*=cN9bF%'4PW-jn!pnK6.PKfFa[E@[!qm1dViCm#)+Ja*j:
%a42n;Yq`'l>0OafBSS00ZuT1[D(,V1>N#c9@jel2]A(Q1@UhbTN).9KPL`b$A5b'_7^1ljk3,f:`</W!O.M^PEG4TPYmQe[N/)4e
%K7[\tBo1Gmoe_9Cn<=5s_j[Vqa(kZj`S.Cc1eu"I)NMroAYHo'XRBmP'Br*=PfT.7<4<el2/3I(\>>!;O\N9l]6%ZZfT8btg4VJa
%Xi5BOnIW2;USk")T4a-t)lI<rrF@))keS!A46mX,c!Nf>#.,<%igaL%3dQ;da]?^?)D^JX54&7-CW'pAG6nQ/8PTIEr>`s/e1*\_
%,@kHnTlra;&se`jP?R1sFu_f4DVSO?Am)(L0T.4*PYhZp7QtATdBUn,<Fi,MQcuWlPeiJGL-UnP;EQ\&\0J%)hA8(DTTn^e0D2u*
%S*O@?\R4"Ms*DGZ(LEm3ekPsF:^>5H.+#%4[XC.n-]JlS2AH`89VR?D(8T"XW]k"I#d%3+FCnDW3`]^HZTL`30*#)opgU:&33bKS
%*#<"LQ,'@6K%e8r`Y9lEMR:@NL"YTb5/O1"ED"RH'@EPrU:$Nh557OS1e+r^Rj5hjP-qr4[\Gcg1hAb"0UuSn[[C1]f_3id7o]&"
%`aUE3'k3F?Gel)^iJV*(XhL^SoJ$&2/R[AA0^]_(;C53+BG-Q3$Q[Sa`jYhZ9)cL%qYqXu/gS2efM+YO&^U:c6?/D#kX)HREitj9
%YT,V[1ad6`1ne]RM.\!6,prG)WID@kd/RLZgQ@SQ(AEcHB2i%S#RH>lGOZ9m4ml:b9#G=-0>f-sT\:sJ/?bq<R5tj11eZY&4/A_D
%hfESa/M-1Q0\)#^ha06'K_nA-n[lq1'lm8\#BcUT!?cr;7rP4J$o`0']*uM\aMH8H+pkEGhbeNCSc`pA<WOM^p0dgh6_1<r@(hC#
%Op'(oY/@D1)N^??!k5`Z;(?<L\7!)1I)Dp6>/d;1pgdH,8W()E#p:%cK4)?dOE?;J:mnC+Ou5DpeU1*YDK-o0+k\_Y+/S3XAMRgZ
%0>hrVM=PD=GdltaKEWc8ZS8QB1L]lHRID-n(06`d_TAin_)-:PU"#?L^$%3$k5e#%_t3"dW@u,^"nn2t5=du]g*E76`c;ZXEaBF$
%Il!p0l.(?fTiWUGh;bGP@Tc`P4SeV4LTKC4?E@@r+#&n9CM>*\XA^PjiQ.4?_MW9T5HM*j`4NF)=]b-e67*lhXlOUu?m5NlpgFcu
%>e+KRW)lo(&jRZB$29[B=Oj3$H'P&8V1?[T,`VEr#&DMTN)bes&A4J.phikVWJ16rgn\#p>o17)mcY>c6A(+_l(2frh_Lh3'$;?6
%DC&&X2I,O[Vsec28kBlL2t\>9FU;T%Ep6CZ3N<D82b]>hKQmfB"a4lKM[Gur,sJD$!t`!)F"S():$2.09Ur-;d:9INHLc/=b9[mq
%OJHF`PPR2EaL5]>\[4`'#!GpuAW[1n.r8[SlY:6+0FjN+B2Zdd;([s7r8neJ3<e%Ei"b-he16LgINOGCVb8Qr)BoKiYjt/]^0=);
%#h!68Rs]$@H<p03D^HQI^d0(gl3>p"AZUlI+P&(Jg6sql-9ts:J9(fW"rTcWfU2eAU8UQpT!SX!jHuMfNfuA[/0XmdHa,r?ntn1`
%eAOm#8<*h5eoOk@1p4dgE:iJfWV39hQ0t5G6IH+fA7mk<pp[3O&L4JN+D+MuBE8[%_@M:<\!=r$\me#f&C-IM\l@Eag_(kPg32Pm
%M7."`&FG->c2X%E`4R,;Z.H\AkG?E,A&751\`mEjdPqQ*YNm#bHL[k9FOl\.(Tf0i+?ko5Ju9`ZThuYpC(dGODUXBc2&N`II-D64
%\@+-cGr;F$&Rt]0dX@bQj(&2Odbh38i'9<i:u=9#)P:OC&nE*q!XM)5-Y#hLq^-PHs"#TYKH2Y"mj$mC&s/[LP,4Bj&p?u#a$]OW
%1?c.<d&(e5+]=FrZ6VtE#n>.g'GalK&,N4R@eiP-oC?l5]a!:=Xf'+oU6<c0[S+'aoMR0F?d,u/./:djB,=D1K^(@l7ck<K64C_&
%lR+RABYf2_a9bu&UT?&kJi:L,>;sMRJQk;J[:67s/UTe.mkK9aqtcI"\G,dEF/)eNJ?"N/0W!nS#i8WT=PRRmbT31A\>rt0Oqi(,
%=p"*?nG%*mobp'P%g$CPC="+26(Zt@3I/t+52;>,iA<ZhrooF%9lX57FgKh+lG7?ei<\E<YEC;TX+#HS>e6T"?L5?d;D4_/8.s'W
%J=/,M$$ArTn4>5$&f'&pqe&::Q'a9!2J$UGQrp$s%eGOnVg,ESI;!dVdh1te*_#*73BlJl!4@]?EQ/A5Ek^0;#@8:24N$f)/e0;1
%Nbs)a+DhB!hN_Vg$-7/?2=,*MC5[WEgD_27CRQ'$9#[,'F-1"#qG(P]]WJ4Qml/<n8haaW]KfA#EUb?*F7_!4?M6gGj;jDdPScG:
%6Re$u9%bn]ABZ%!E[5"WihE.S"K>+D4T^i$n)J0=c,r5=^+kR(f_=;BF7S,pS04P"(LU)DSM?bp)?i'j_F3UfWod5hd2!0L2Hm<p
%70C)r`lT8h`M,`H7u['3:a$n#JNc2l[`[5,J_bL7pktH0D?hTn@Kt0H$n;rtG]Vq\A)t>RTF[YLG9&^N[W,I?ZY9iYkg9,L(A=H&
%R_!T3U;tft4!a(fLSH-@ML%0'R7@Z!S:^t).=!^RDVab$QN8""Et>WKdKS)b;WDF6;(/GF]s[!V'CkQ&)gFNq:R8>_`o9aN+^?KF
%#1e!c,tP^U71R/MZbkW8.%RUTBWR])*<\k>)keA>dU#OiiU@iQ<ds>GNF*sc>pKg=rteO=ei;p?&sYLm4;(;.CpLJVr):0r^`h+2
%ik-`&`%d5d6b"m.=\NH%*PR$"/FP@e?eo^QrZ#\'//G(i9T+F_C<ga8AsZk^@(0^%Ze\@WApLgg5?a<2+*`J^%J]^oZ&rQs-]+)O
%*-aKnYX\r=,%.P1Tuk1%Jm(H@\57@l#&$$H/?df^Ad@U6j8jot4-_a1GZSsQ%:%jeAXEhM'nA_>+6?S5)(_7aBr)SnrQ^PZm;8W\
%>9oQ$.TAH0!oW^d-:aUQ,Fh>n!LV+cMDqAEM6\Fg9?kl*iA8at@1V=cCYbaHb4[*EER3-H(27k%E'u^mdO6oa8_tMFI0M"@>n8<V
%P5+YPj^2#8BqGlOk,G9rQ>u.k?Go;iN/eq3_B^s:QX0[*XGBW^AuCLN!Z?o'<LYK9-(RK+>\lU(H%AYgQq:0JSt%k$=3DLO8O;Dp
%e\cY#),Zb)h1qT"pVu&-799dUK+T8JJ?b"d6kj\oqOrP=PliK4P%M9J?GeHtOcc*fL`1>-[(:hmiGf_pq'LsMYn_!Wp2@NrK1M&Z
%msq?*NUsCW%WDbcGE\-8*]q5[S+F:u-&"[=U/n&FUq,ZIV7l)J&t"=YQ@>bJ4kZM`ER`pU@6ZMKl@&6gpMmHp>1>m>!dIjn(BSG1
%#%G3i6RP.U)g]X]k)1;&(YHTdTLlGBLu"4Q.hMGFftU2%CQ:'j+XmGW)%npHK?QVqNe"@55:`[ff;RZ,B#CaFV'ZnTT8,q5=d?f,
%,(eH&&nuG/*3j)"NRg#q01u&.`3q0QUG%dBs00nAM,gdGWW8NiE8VjDdRY5Ph7'CV#3YSt;h:u<'cl-o18Yoc+`KD_'>49Zr6D*p
%X>1Ri$plCS/Rm*\>B@nGVDiFZ\HiPBh\E8oQQ!n)3/UQWJK/kZ\V1[5/QS5R;fkK5ekX*5oQtk[94&0a3P0DsFk5_A?\=GYF\/Th
%F;RHrINcqP,#;XKFHs56-4FiHOsR1@Z/R/HaE$++02m+N.eTkVHU\0k,[2"\,D@Tm#s3Pb%JBU!_QfJ"\'crXWu<bJ*D4A7[`1<q
%dkIN<=\M:HJj6mi;L:2dP@=YUVP_oZ\'q6eW$+TI'S7V6Tjtrb&0Omra'g1E!s$Q_c(h8a<eFkS\iq0rcnamT1VCljQm;EN`9&Y@
%)OQbJ1dq^_&U+;G<b]EqM!B!1I2j%P/5/GA<ZTO5%X*R"fm.QGFf2J#6N&?g/4)jDL?34gOp]FKW^38554$*#VO$VgbI'kubuct^
%G_+ahos`,kaYN2Egd/hAh%3a1JR%>&3%p2g34he-;6H`rmWQcnAYX$&9<:*L=l>dE41([cl3jc?i:Oi`9a/Us)D/ooc"%'qeA%(D
%jJT]Y#ZtLbE`Z$L959>JnT]kAaW[JA*-?6^/_=eQd')_)<hiQBNB#fa?9)X,K+6[L0MO6#lt1AA'U!q$O?8,$W5pidq(j)thai1!
%c7.^Q,1>TleY9hTM21U#973qrQ`8>?ae0`AW*i?E;2gLB&48b#lMIIt\#O]*P/sV1RnP3(&W/n[6K2O=FP"DH[>UrG>C(Eb@W'>e
%>M)%s<N\(iJGr\.QtbH)?B[Da%1mrAAmTV<Qk5K<X0JH/%/+R_"7`MuQ0'SnfSY_>J>*2EW^Z)@"GB%sgq[5:n)LFD%dEREioYnf
%Z4gAa,0'+!dum[&PF*q1#$Uq)@>WC$BQDa`Z<VOh9+FaRhbDW4C/r=#0L;LY_,LlQPV:1).G=".'RPAs%01R1PH]k;6prM=^Sb-)
%2O.7Ai9'6>0_M=koIp]?b(;@$0[Jbp._MmU`;,!]`HL%Lea(@%:/49d26sfZFW4)D#UbdILG>2V<eF9JgCPp>lrT[6-EB7B]&.g7
%b5h@<H<EMtdgh=g(2qU4h;f$J5sfQj_&mi91VUs:(#;f%(JLE/+!Z>idYH9O8DUO]OHaih;YF!c&V:Yc\0&c<A]LK4+L^O%DDEm/
%C*RTKY2?3%W`0M0ScIke7X0)Y?*[l$\i2!EO&*7N'+e3Zhl+@a116oCA1Claddt&:=:KarP"4&k';lEqaP!EO7,\'6l=sKRc0hI;
%SulVlm*H,QUNS]&#F?Oknsc494>i!sPH?D,a0%']r=YTU_d9kZ>eoJ/442"5r%#/d10"fm)d@^+V$^_GTYT9"@=n^HFPu,7r@8t]
%#.Yk,)bdB-NWV!hJ5+Gt,XknJXJnPfGY8Zm8@%cdSBW:E%/R+F+&^5WBa<]I/fXT>/B4B@"n7burSnG-B<S>>F%`JmBOBkQ=T7@b
%15)Z,jV?Gg3#.\s+r^j$8ErZ5h^T$"Sd.A:-2sjJ_\>C:WAM\-Go!ns3U+lN,%N,Z=oBV&5o;sg32LX04j=Um%j)8,GobH,pnI!O
%,EYXq@&,3;9MB'r(:8j!+B/2Y5gplJ8V&b@qsGDOP+ri'qd0-eF%/*0RD1O#.&\C_<!XsFgcc*n7gO;\A7uWj9Jp$sgHI?%WcnLP
%XR%kgK@IOBF't[Q:@ZZ82DN?#WBoc(X8gJo=3PXYA>pu=ehtTfgL\BJlrBZP\m2kd<hjQojYY16,`-JFfJHnJ]2k>%.u=#1Qnm>[
%6uf)Q#^S4MjX\F-XKk3F>ACs@nfHs[j!.^e,[.LR7^<Kl9(4PK?BN)fI&Q63(!s>`V+JAd.#uG4H+:W\RGMs?QnG^F@3niFE0VaM
%BDjWQ;*Z@N@0@P6B]!Cb!>Et6=n)rA'[LoWWH4c!]`]r"ltObL>;Y50=`/tV6#gIs:%3s;?+KL5(qDYBIe)<pIjsAq8D`X*@\]V`
%)Ki@1ftcOp@WlEQeR.Z?m$qNa?)E_-+B7o^a`"Nfr22@h03qTSMgFV"]qP_0[SR=t!VI^=3(@Xlg!6pV7Oc5`2GL8!kD>9<:*Q)Z
%9ZEl]cp9qulIV2mPu^<6Pf#sGI0?OD_g8\jH-6Qp"V[47fc_.pqU?ESRT>eAJC'"0V@_$37C/?*Cq"0p+$GCa'Nb"^>Up50oMgZ<
%aro5bEG+VojGf6Q89.+Ep&GN?A-`tq]L6B04Af78L`K;B.rs(Fh'EKufRKaj#ZqWDcK;UFF!OOXXLp,Hi\Q3F+hL6pF+9$L6K/X7
%W>'!QA44V(^9(]CC//+`2\q^*T)gYIA>":m0qoWFN)Q4Mr)uiD0@!g>pf:9<FuZ#EdOc*36FuK<,!.`fm#Xf<6r'&@C*R52Bh5np
%R/:)]nXGU]`REl504esUG(OpK@<MnGQ!!YheT8"Mo$(8OW.8-:&HZ^Cc;n%1Q\bWfS8FHE@4e^/+fmNST_ak1_,=;84_&et*CPr+
%C^D9KE9]i/H.\4NM1Z,;;YBQ+U`@0@$1"fl"h*;U=H;l(J?)3bppNMY*8?X@E*RG%=XB=,0SM.O0P4.O*;J2Xe0%>A!PS.(hFI'c
%Yi0RMK\=\@;M?k^oL)ECb[BN1mXt[_&0WmIXE$\?#mNB^oiUiVO/p>b]m>m>_`(O3n&=.'Ye;%';6VaE:$.53UjDi7aeVo!Q>58[
%2;!,YSM-VEVK'C0?Yt-g2+U+J62;d!Bhi_)&?a@Q$W`@^i),0jVrZgj6j_M7pe;Rb"*mjg=r.g<JI(WVG&'65]KbdK`47Cu<)H7%
%7F**Xm(nO"Sc[Yc4T`o-6R*c&EYIl]Td=@j9]:O!2Th&QC%7Un#QI'oX_E7BBAdQ>rQd_@WOOL.g>fGg:7I$j<Xp%85uj2/Dn!\T
%1de#UW#:5UZ<mTH[/J`Z'_=sMNg"",6Qqi=g`/(;<FmO*'49*^9K'/s?:$DOgWnWrVMr@h@0OkaZ4N3<_'6e+<b\<75VQpE;^/_\
%=Wn1W>WSqa@h(Dp8RrF\'V<<L.4+BS1fTSFd7OHa+]3-n4]Rt.ZV&At7=BnTl6Js*]e#$L/XetMV96O0`J&I+Mht),U2FSEjK.gB
%j$Fp^rFf4j__*G\Osgt6bAE]SEJ1M_RK*bS?Q!=bX>ju&k+"UL6ib`b2W`6XFGX]R_9>j=+;;O-_=WqL>eKmjoI54Lm4+soI@sc1
%VCcn-Q>D]SM_(0>*-&S+>(Dcq5k,<\s&u0XmCRN0Z^#=^:L2ST9"Bst^dG_+I.SI7fc^O!H]Z,jI#_;.[#YjO*CMHs<B;.a,fCWd
%>qt8tl-uo$?Z*,<-Vg:SBHtKMK?F.orZ:*'[PRC0cB2U,cKoqG>1$P3aJl:g5omr2\rhJ(`X4$"Z8-uET?T@%F<H#BX?,X8<AUGl
%D\f=r&'LjDZhi?';O;u5#sbVE1(@47E)ca?e)`Wc9!E=O18,[<\OYb]kb^=;QARY$^"=Pf-so9G8XY9eT[SPN!==;03P3Y"C%f/?
%q1B;+i\QtI`s=V2-7DpoEp7CJC%]+)%&nnF/$[<FM.0W)C/?_lVAo#m_;MlJkZpU_L4kL:I/f3YJT4Zi@RM7[-'p'$fuOcG3'^b(
%KXBgA93%N=$IQ-nT*XXq]HR*A&h/(t'`?DeS.'PPXcd4s:XhaPkmXn`7U4NEg]]st3KdiTM3WCZ,JmqV&]qtlf9RUkGe?S)C]KXL
%LB[.49WY$^AW2`:FJ:W]\S/+!W>ADC^)qF"h@%$`\YgftPWRcp#X4+)i6;!Cq-f?&9U@n>]HfniL1QK7h,>'?"!ToXW0*Y#K:#40
%_5_<L&1YlsN'X]kn0G:`Va^L-TpU#Ep=ZF0*crGAWVT?CHWkH7)6('SJD;O]r4F7HR8/eq^/9%7[`Y#8@<6H$'cg*Zr=nCgE_oi.
%-(ohP4;)!P]BmWL6P1r!5EniB.Ak+-fe'p4JSojirt`^M(9GbOGt7)Y6GbAL#[?41(3lHX>c?Ss(JN^,:m7rW^:-u%UZO5%=2`ZM
%$6^?Y:oaDYWbm>Y06(T%ZgX7".8:C0V%ED1`scX!:FgfK/@"X0FCq9.qoOQ0`G4@89XipH"S9\-5><^9Rh[6N888TMrunJ!HrNch
%>b>S$012Qc838"3WB%h1p1-UZUkFaAC'VkI.j7cI__W$?h[,C#2BMk0N**\<J5DtG=1/T=\<Ptr4;BQ;@5T"c=otj[G"6eY#d^JB
%6V9EVWu,si'oTfm#Giq;bu)t?N`,'AVR6<\=9J/8a@1YPF[Wgn\0#XBihWq8.[@<!j_XcZ2\L;8/:[K"`E@154!3JDE&s9@Z"kl#
%"+0e6P'QrLo\Y^A+&mR/64tA,Xh0!K';`'tF/c)iKR"+@i.$ulP3!=i\^^n:I9ZuT=i\6*"kSZ9PneQS6[#LCV)QD$Og(<7hR,9b
%,2E8mQ)=nBBp+Cq#%S*t`\JIKW0gE!its"G;WP`ofRW)$Vq+e#-V4f`C.%TKB(nt(F7b\!orS:'UehOGEBaGsh8iA8>4-%EcC9Q5
%e*\dA82RAK<_p4nT^nRE08)H_/?6maBM(`RB<;qeZ=$eQTKS2WhV8RhJ@\K>:H#nhfVS:;73`j</OW@`@n^J@U.V!l,(BdE,nebm
%X8?go+tLkA8Ml8KFfXMa7Qj6`l4+GM-WSJ<",c#4ROM8je\R1Ki.WlG8OQb,h2J2JOHci$8=B:s^>!pUr"Q-q3[Cg`0(cbUa$D"L
%"hR48s4B);JU(Ru?N$t]MCH);U0HrJlidJr(8cLcjj0g'NuR4H-%UBDD0H7.*e]B-]gq"6^(</[65Fr/FlDLAG9E$]+@mJ*=,8pL
%"qaP#R,^O:b\oXnR6`lUK+$Ki,9\>W=)"BpTf'hiQ8a#ZR;*N\&DAFVF,ucd'^:#ha^"(q\=GZ=,mE1u:K?j5X`/=Ek^L7Ia[]=F
%!MBkbY!1,>6f@W1?1UHH&WF3E+oXgedgn+#C51OrV%ZiAWtHV-kR^HMZ)YMo"JH)<eO-?4YBH\tZ*6V-E^XHHE7gdtZo/\r>*%L-
%NtVC=5nM?(<?nrG,,-1FUS(=jO"?Kog,ck"EOa4589uRqKkd,N4%DI9]u12sFK5p;MCWf/#\Hu?/3T:Q)/1m:@tB9B;A1!"<g':]
%.u6fd+Y*BT;t&[fXiR!8S)S/1@]`Nu,P$#67R'5UG7K;ceW2#qR#=<Qlj!RoS-$UB*W`?S&;naEdrqeM@Lg_L5\:p+?#H!H;F&!M
%X)"+!,2`ZhRQ2S>*eoHLjKJ^%!?^a16rN$/W"rm4nM-q!%piano[^C(M+$0XA]@NFSm8PuPe\lFj:g)/]coZmh7'GcSGL0=_$K8p
%_qOGo<rG(AXS+b4-?!m2pF<mK'h_Gq)6]3XG^t-a7#3"0_5^WCEakE;@@h(6WI\JUAW%a<"JseC;Z63C:T)LrC*fkO!U&t:CX7F1
%X+"@&7@&_ZlcNG`$1%gI+9nRiUR>DmiVuW+Jiur)+<!?Z8;f4j[6.,INWGHQ[)>XE/.uDP?DNGR:B_'Fn/Ji(\e_K^WM=]d^2A-C
%7;%9U+d;aSQJI0hEPX9&AZEe?gFY5+o;L'bmg-Fo(*!Y2@`IWr&#\E*rRMD>XMJX\cnAG:DJQ!mI^Y7OBBKeLP,d@')2*VV]CDnf
%JCohbn[gaS,3m.qA4Z,?U0M$TI.qPViUmIqh":qQ7H;hR_g%"2Gi/Ic2Dq?T^E.EPm\,#Wf@VIQ\aY3kLuA2dqrhQj<N#uRh/Ll&
%q1I`be^icYDf3e*7'`M+e(sC7klEA`r0007*#ePrL/ZOHEEo5R]['rJDptl$+*!543'P(@ScR!#eS"VQco\fXWOf`E9"\K4^ta(s
%OpHA6*l!*ojJ>5GSqt\`aJVRG+PXNc*_+Yt'_iPnbW;2>n9H,ed66L0DfH_-DVYhKLp!G!HJ;Y4g0bZh2nF2,k,a;$J-]^s^:8Rr
%0uTl76EqcTEZ+PtabioU6_!A'Mq(Q&@b@"bDIZ@qZKr^2!`%.dWekpRZst>Y'l0M_ksmk?OPFif"lKE:!ud?b);;@2I9+:,U*YW8
%5t.223M$RA3.?,YYU_Se(3C7&K\8m8OCBt$%2_%R4eRZ<$LEqTJsY@-DQp=@VE+Pik`QDp_I%Z_Ed.jcU66V&'St7";Bg_[87qTl
%nQs,FiLEri;UnEh7bbAcqQ*G7e^9(CO/B/kJ1e^e'R(fInRiAE%%e"R+OYCLGWnD)CKdZRcZ)gnRYMN:QL?P[ca&Ao:17SH)3!;J
%_/i:a)b)qDIg2%W0r:ZGOnt1'CG^8H29S>A-7SVP[T>/KdM+t0VHP64i[(cs/Vc;=Pj.R^U"*&LMc*0*'.Aq*ml*X"1ON/uVTu9b
%N1@>L#RFiNLaJ#`3CdkONF$+kM'#L[>8:o6eIF-[NmVQE!Fd"a,$0G;;)3,4=##'lMIgC=+BS2-F%f!M^(3Uc>ImYE,-(tIIS[_-
%DE:r3!L/cig[M@qKUpgR(cC6r=0KW=g7i8(!fJbY/&"&Q"Bj14]h7;Y4i.AZN_rtsp$.[2b9^[`'UKrL/RecmmYod,UMiN2lna<m
%Y^[or6rIM!s(YEb,&dSA%Q/fMPN_"3Rt8rC1_t"n&X;>XH?VYU+ra6%]IN;i^)(4%`rQf]8+UNWje6)=@3Nf^dfP2C(HXitZpVdW
%8Hi&$:2j@UP4,6aqA.Xjo4J\H9G3JC9@@$dUL+t5+_$'A]dX-_f#*b1atFKeJ*0hB%L3nL[kUVF-93MS%hWpL0l!.%hm"6Q,eU-Q
%k<Q$3!TN(:/_nMc/*lleFcr$=i[!FtKL?.]M1$s)<LB[n1P^TIWl\/V=R7-s+0M'k0aP+t#B5o0S7V-7Q"<37=!bRpS'gPbdc.YN
%dlK>C*6%fVC>dBqaInd`[VkG5\1=JjLke%%67c&&=\n$dTATA0fdcF!Fq59*=dCk_6E7)Fk]OfU[e.2*.PBelU]`F`)=:Qa#g,rM
%W6\GN?4N&B&/HE5ZZlb&+L#Stl,pk:-.LSiDGj*X=>^:7,)D%Q=abo_N"7-AWtNl4BUp\)-&bH(pP[bnDUGN$&`tRSUu)Vp'm7sb
%k9BfGmiE\(0\PX8d1C5DNg[DO#R^#ZF62k89YmcNb!RHAf5uEOBm(H;4g2Y<eOAPjrQcSSokp#hGkH7TFaj*1:3B"8V#%5$9W;T<
%*\ifFkBj]In'+(>Y?JLE#?"+u.k_%QU'13l:/SDJ.-"VG@g7fjk.G&`F]G4)iG^0nYnu'+'$'[&cPI\tqBXc<DO^Od;us?GU+.iS
%U2.V'RTG"9a2^b#m1nT+e*@HSR(f0r/Xp6uQn1Ff@LW"4;Wf:<E_lYI&@^lrb:iVg(]-M<B)[^sL!8PQE6iEBpdlNtMG-RO?,FBN
%$<sH0]8GH5ksMq,qbI"P[bi0B<m==n#IiP#F`Hbo8GA[<H<Lu.hY.h?FtOl5TC2U"1]$#-"UUpRWEfZk.^K0WpqsVGU9p/(@h^*m
%=X^pa<cQtOVG+3a27,S?M-QZD+F/+RV_#&$I6+`HLD]')>BEb.8=O3Qi?8r11)B^RWlj<M<3r$4X5198ZngdF88Sp')L4THj?+:C
%PX1fAU3&D`W_q&?c36W4ls$3V_SN^2)V=M-5i29RJGCnpX$.ScNS'c:ltu.[nOX=PTo"N@#+t-/icU<e1%-:A;tJgqV!L:nGW\nn
%8,/-$-@4#In0oR$'tBN5b'37'd+G/.$i7#3'DQ8f]\S=$AmCdMaN^o8R8h-I/h(2aAf[[&HN6>B&R5N;?2foe4")c.]4HcF+&<>;
%I+'E/U\d*B?tK)8Rlr$XLH_M\FH=%>n*ojQ,FNFn@"+IGil'h$^2H9r8X8n.a5!EPG])aepO0O:jmL/QB7Z`S]=CcfM>C$)GIo0I
%Vr#j;Gk^$sQh^3]Dnh_fj%kC],b\n&%A[V0-p\u/=O(CM"2J"ejMuiV[b:__#o;J@e-\7+N#f-XHZW**>OgGMY2<3[V6^,C(oPj$
%[u+i*6s_;mm?[D.Tp(aP<5Wi<fN-os5Trpm%]%lS4S?\ZI/gZ`n1Q,kb9*TYPgVHb#u/`RQG@[mfaK?uoM-*,02ZRkmk3jDRFPf-
%.$KqlFjD<IW4A/5PeWZ*T\3)pTBEh_;seS-mtdp@GMVr"^NcC&s6iXe^X9[g$[s1ORWLS&p?iV2"A,%Y:IG:\',a\.!9:K#'/fMC
%]moln19dI6@]@4u_.,u:i$skXh%`OgSBfZ//ZM?J01e0a-5")%oCMr6f[\Q.$P.G3rG]fpr-aVrIt#(<l<jMY^VRS)s8KpZs7!f%
%o,n#(5Q(K'^]1p\qqJTh5Q1@as7)_2cc,qCjhH:m)0&>)X5Cu&#XS:(PYtLuMFn=q(9t,Y>;?iiQbjbXJ4:M:72H;"TN%[OgpLR[
%M1/&N0p:5u>g?+lb#3MO-D;3bEP'rn+=\iO=&\B0Sq1DI_@D#[M+@EWBr]\Ynu!UcPL%=#$AaNlhX;7.&0AN*)EGQ]rbA+Y#[.VC
%oY\md._Y]@KEGbrapXD%-^62P-VXU%hVX1j&k4^6qTLV?_!N2?J'3]_'OVqLols\@]?fJ<X!A!C:aWH<'&?SIZeq2LF7^(]Xs/TZ
%2M`FqpmIbu+Qj;)E<i9:o#:M)iquYh8I(#X5CXu\98,qlXF`KoMNLi9hCmpN+TWMdTB5+"ac0.THRaH2^2QcNW<ttoha0e1A+j:\
%_($[III>=#;S[aDd$I;*d!k`Z_HD$?IE-6@cVO!O4\Ub&`S:>!ZNm.HNF+hqpc1+#'nkAK2\k1=a?Si2I?W/9kS?/sqY90Q2:+(c
%GND:QX""jIIM4OglM[O-e0(lLPkA]fIT+mjZ<[)!4"JFKd`0=MjCksAhq_+?Xo7(>5J>i*:7di]:94Cr:EGU?Tk2%hSB#_+H#"R=
%U8N#s:/chs7dsd<D@mDJ&?f:`o_bcC7>I&D`GTB'cYKs@,cjK0;@sAG1d*!,5i,'@%lt=W/r2(Xc5/*Q#8T2c)<Sk\bAfrld5!q'
%`bO9YL-8*UI.;[c_Yj(%JblRB59c1+N^\-i@FGM3]td@<kVHgA,$_2L\\LA$BJ]`DZq.Q%&77bCjd/dG@Hu:%*0!r$E.CZKEmmD;
%BZ%##MXO6.h*XdE+;0ba.SeL_]>fOn20@=s9g>*=mO5eZ1bR.Z)s>-Un+Vb3#MKWas5,S]e*C5\c)-Dtn?$Oq-8]$M&h#tPFFX4O
%3n<_).7k3+VY#qr^^"Za3h]7l&@9EFW4h([UB%Dl3?V@Y'SQ;<`sW88_WMr?6$>K+IroZh[kHV+?^Ntfr@@jCfk]!q9S_db$=?G#
%Zko6JC'^X>WV/\?Ms2[d0<7Pgau!14CpX>X-7K-%(+s!bRK;Z?Ujqo1?;rQPds4P#PZD.J@i#Qlmp_D/S5n(L#MA^CP(;nO]O<,b
%'['gi5=NNJj5l2cqo-Z%/q+]j^Y\5hDe7R<_g-J=+cEo5"0VdXGLf6=IoU6WRZUtAA\IsfG=VN=9fnAA]YU;SN!qP9pj,m3A?<6#
%LtrD[To>!_5-3X<Hi:1R#tCapO/fod-6t>1T027=4_?)V\i')k=8Nd\NcNtOX3J?8ioo$:3i%q:POh"T[1->W,/SQq+/JT!_4+H)
%.kmI^3_tS=g9+es"h"5`K.)YT[Y`!T=]Br3]GHF+3duBJ-OI6%h6rIBGUi(uCaXb]RsgpfS$TI<2j?c[O=X=l<6k>8'XP)pqA)Q(
%\/L6.^.e8G\4*F>qI2o=WPPg(2,if-0YRa,33->]5ie0UK7TVgT*M'lil@kW;IR\kBWVB7^JO4QaE>dAEh%[@Fr`Z]afs'+#pN>(
%Rf^C'R\S=t'qrCQOqAI8B)XoAQka<ZWMr9',',amcP[=EL=1aU,p0/J^"O#g/Kn$$#9!saoj:+_IU%3aE)'Qa8qo.$0S)2.,5i=P
%e$Y]pXoahMQ^Vng^bBieGL,K[N<5CU,6OmGb3ak6(EG/PYQ>DaiD[;K9a0;J2L.26TiS_hN0M^3DB/VokM2$UKLk`<eE5J1.hTeU
%h%r.R22Aic2FF:c"4.54rS).30F_&/=\a+KCE`"9fqL"\e7W0h"d^Eu[A@q/8/PQhF@9lI_i+J=gi's0WoH#e*l8ITBqVn9i)8+5
%6+g6be87^mh:!q1'$Pl65(!Vr"[iU@$))$i87,.#6AR(Y?\D7>1C?,@;t^)37p8,0%ek@lT#S!,@cX-X&S0+,I7g(Ufg7PGbGL5!
%8XeI^[;*8/IZ*ut(`I^I?79:6q7PH6Gs:kd'%b);I,%Gnp%+jm]EPM1]8MK38B7cn[@Aqr9a+!W4)F9k^P5>g\1f#eo`P_fZX!T*
%Cfm&n:+.tNZMs#@/9m(o?2:UNO]WYfek5PSnJ&Z`nOn21O8EP@,5St+rY=&YT<'&2:D!r*LN*Wd.\X,DhmZQVhCd;tH:[4bZJ7Y!
%'`.LKc[#Hm>N,`V24dQdWWS@)E*Ni&*:CmP.SRC:>(jFS<;mI!i8ACcV8RG2(dDmC'GZ;Nj1/CdAp[<JGomiCY)*A@^>1Ae55-5V
%"2&Pr]uK70IGbR+UOq!n8!JrBS$bASJ>uOfGT(T4@\ruAZo7HZgf)]=Ad>pqFQ:)>f)k.gmsI6@MaA/W9?#r.V+sD&[p.2[W/I#s
%:=j$h=r4-,MT9otl[j3uj7sI_?ha40;p+@dDu]-13(KUZ;k>5QR#.4/GV@;gbnl0i.>-L=k,&r]$TJq?U/8QmNn!)UU78PQDtag^
%F'nlM21:Xp+'Q>O6ULEXG9p@K9ALD5IZn-Ekq<hX=Ou7d!`8[P]sL26$[%^!nO`UUb8F:fNeciCa/[_,o0T`<7t5`p>85D3ol$>b
%C9jmrgUi5okg,:QQ.GQ=$U;>HYBg-k#2@LE%E%PQHR\(..8gRG.F50"W_E_`![G2<bm0>45bAk\Ng#OYh4f/^X+))M!aD!T*tk;4
%qp6m/;uX;re!p8mpYT[32AU(+3J)1F*!J1u@;-OETqpu'!JuQ],^)V9\8IB"NtRa)\]]f7pCok*:eh@n)#H[WCr?E99GR=Xi5AcK
%dT$#c#)TYY<n0u7!d%uSB([saX0Wh@VW^-uUS//mLfD,AhMOG!hmO^S%aZJF*75]0Ztf\qo2Ws1JqP5KG.4g`l=`R5+l=t+*N\9o
%\cTq'UQpppnbYN5]VJ$SM,IdZM`']5,gGqHb/k2U.f<eiHOAD(WOoWuaS\GZY`ff-\9WY#crE0$Z31A`)NU2qLg48DW:\0WACjj3
%f(&Ne6b#TNIW=Ks'qld"l7p=o!9#HUYu]'oLPsY_*F9^h8Vb#H(&4k4>oj1nMOrIu)cFFA<JQ_%$WY\';,[C,"Ai2<pJL5TD5'ii
%Ug^DRj4^MhMee,PLt%K-s*"6]L\jOg0pMAKMDuG(MMlY)G6n^,_<FoSDn+ip2_Y<uQ5?9)d5_"%AZ6uYWsTo*AC[nZ^sgOPZcPHe
%0d2)):GmBj;K4L%<f.-V-:06FcBq@1bbTV\Z5=gK*q4.5"3".ed&E;$J';&`FZf;>pp6A%=2+nprDVpJj9pg01qPJRN"@G$m@m0d
%,EZPj]+$'_+fc&eK^bpL=fDpe787#$bf_`MCCPKghmiR@>qQ]?/U1q\R<tW)H6#5@+rA]P*Gt[d1KLY\qq[-C*^)o+*3#k0ZF<;D
%Mt>$!"tK>rTHsfuA$_#Ed''kZ-sHeO/eS/(rJR-k*R=8r+fTlsgeR+d\u8&#c(-&eg7&$)?28cF]Hc!(l#gJoUOB?_>M\Sm=^r6=
%%*3'2.GAsBr</Ac?GF/p;JZ1ejaCEp]8c+Wc]r:R%lKiGP=Xs\6`3,j-#EIDfBdM#]\c-Ll*2c5R#bLTa-?PhZs.?==tXO]5r0DK
%Fb_^?+mm`(6&NFR.`@1-a3RgiME-nf\XaLW\jk@*,u[8UJTD3o1%!SqoMgpJm\c(cIk#M\,DFND:UQUnF7P]<MC2&#bEl826]N;]
%"@q25]R2%=\=EQ_Lmc7=^GTbB*RWmA`BG+Q5MqOt08XiQ-="DOW?A!d6nj+:;CX;n]0p8=[#iBrLT6t_r%=U!5S*pqaL3ql\3S<)
%A.C,@o.A$$D8)0o\87D0*fr(#ql)t?MZG]S*gcp6Fm\(P(!E?FLnmYQD40)d20C(b&M'XKBF\_?g<ta1`Nop$m$G*GPndm8_L0;e
%8upV,Y6II1o2WQ7q5l8$&;./rA+cbI5X8(S1\S!.P@>iNm$Kc`J/=K`dI_gG,W`p``;hF-#OlM:Rk/VWW-RPuELdC*e\-$@ZXYG'
%4iQ.tU7%bqXZl:f$@&LJ0kI"6FS@1U?['7YLuJ]'<5p@bbXIGCH^3f^cKa`4W0%p2`&o9hQZR^*T"YFn7ZIMg.6C7Om<=uY3]?7\
%+;sAK95$[#gOAO=5MU,]O,4WA0r4cD&_<n`D-L-%2+8mFW:QGn[CE6'89AQhpX,pS9O4%[$f[_V<3#;W-9gMiW.)[(?(J]XT6XXF
%Xi(Rg@F?1N$>"d6qrrW<?ER!CI5)5e//F?M2)6>p]XD]m@5l.L1m<?T+'u`WEC>bM;sdj0\(Lq9^MEJUG>kOeCoK_7<2*FRkEC=*
%dFq&lDtb:&!t)"iUUXfP,O@)rASCPn'dEH2dS&9>/Z/E$8_s(^plF&C,F/t!ZeD0]Xj39%m0C<o:b6O!3<TWk.HP!e;S<3`NrYS4
%SQL"S!UJ\r^q)S)'eHmN>=lem4\6)!A(3<<#bD@7T[tc"9.J1%P?iNM&S9]TAt("dHdnFL%QR8][[.o]3`b<V,de)@<3S_b]Fp9s
%,d&`Q+)48$2+dZkKs;ii3,7*J8*\]9VK<p'9C8E5Ut1L$.JdfM+)1CMRf+Z)'UYLcr-#q-W[*RKZ#/FegrVUoQ9>c(GiofI2N^`A
%W=]T/01oX<\I`ZG'!JT!apHAO[OkQF(H_Bt(Tu5QdT;F1\E:GRgU9RS/^--#4kDB-O6FM.C#4%%*1'@HEiJb[?[/C94[nBDdZI1m
%!^3BfV/>=mM`YnM1`(<$HD4D3"=5][]XP0o]]X^WW^9oQR`37EKD<gPTMfW">.[kS>hb;*q=+6NAK-$1B.pJt-Pb%:Z;8FZQauLZ
%(/j%Vc*1<iAS(S?%morR%Z@\men&W0+8ho-=Mk_V8/-!tCUiFbctBKPg(e>VX`Nj(9Dpr\FC*/(+5<5dC5D/%L-[nE'CDC#X"]TR
%aX$7X9%n:B1$;1jqj(t/qDiS>d2F3dPB#,^[`o5_P,Yjl#r5<nl,#gZ]?COA<Dk%?"=6GL%Br'rF!EFQXo@1HQiAsE/K@J2MSVcR
%&ZGoLgV^766Ode.A$!-3;<''1TOMb"%l-clIof?rN'fA_Wp4<W^"'QdP(6#6m#hI/70Vg^<%T>%,oYMFWUYNOc>i*1GXfk,PYII7
%V&n,Jn1n5C'1c2_:e;bfB.3pBG;KOqTgq8S7[)(>Sqe>[.8dIJ=DHP+WdeUn-,=(`T]4EhXX0OK?\Ip0UEC8Xj0+>CCBl77$o&B?
%S^h>HkZ<8/1e%U"e:(PForZYhf,Sa,8G7ld=c]d]S%Fk97%bu&Q)9;aLr'^"e"a/knLK?7[/5m#0^-@#DpcupKG*N6Uj_-oQ[*_o
%9r#b:XWI3W7U4[&m?jb]qalL(Gi1*4\%5j`4f6/OC?+C`lP@a4lb7#+k"(j&WI#PAZB8>gqrhB,9VO!R2Ya:B]K`>XIV^CQHGj.:
%Nj(i27@IC$,m%AmNg-iZI/%;P,eDIpddWD[@O1LG9J5tl9019odA.1X(NrP/(T'W-VMFD'pMXPq5iWkg;>kT903fsJYIE"]JX)mH
%<$;YT6.s.[+tD_[Q>#8f=q8r]_/2;;[3CF3pNqdNdP^oSVNb6n\@)%nYc*TDcfbQ@Le9GZ:XTkB@:Kj^#8TX,`=P!T3-6,UO=A):
%VN`.^(#=j)qbe^D)!,`HUD5H%K7'L-!%jq^3180(\jtCQoF'9.lI0N;Z1bn5G@*4VhF]?fO_f/,ApO/77`k0L3l$HZj"0`Nk#g4E
%f<e"<2CqDV,U]Rb85@'sHK80[[n9s$"O5+C$0WW9\InO[dh\[b-_.7(Ft`r%Dq2%hZs(u3oX$umGi`JpdcFLX\JD`d'Xh?N(JoP=
%B^N'#OgH,*<1W.F:WnWD\sg9KLVpt^1G1kf(:!3NpF@D3X:^2i_C+5.l=t%/A"*o7<eduWGtVFq-GJ]]M%Wf(q%W(2F+U@b)CIg?
%m3XWmKrAo1$MrZWL0u]KkiD09513?NrZl@K88o'U(Oa[lj,bg^jruHMiDSD=d7RO<b\V._T,KC9WA&()#TY:,=4A$`"O3j(c1p\b
%:a/fc<R)BRD9:gr,!!f3XGFWOBmV:hom9'M>./\e>GkMOhkU_eer)r]-QpT]ND&0<Z+29_&hf&W^I%mG*'OjL&J,[,rVC4CkFKI`
%WRfDr.;Y@Y&#SbqCKNWuh2gqn%eH[N:akcAWh6c\r`)cUJ%9f:2iX9k+'U?pU/C.jV2@n%4\g-GlAZr"$p&i,S=1L]D+77^;7c^q
%3.t@p.XgiWfAFf`I%rl=CO;`MItXM_KfImdP2Sce=qXEEME2-D(h!AEYEM)J$Ntlie[+=`m$FDtS:,6*gq%f]hK*N"h>Q8-,Q*Nt
%/]!lAH:[MkGo$=8odrSio:$:=Di\%dX?6+GR/UEe,MN*Y5!S/<J!#Y=$J]ooYN2(Tp]C!RKS>i.VGtO9/Sa3.!LlD$/-L7:0qT8^
%&OX0K2[!DY8'_":_lDT'DZ_IH>doIn.k;1tT3q]L+G`Za[H$S_5[Z*%*u\uS]$Y!(#HQgL!Wlj+f<L/r9*#6O;(&C48_jCT#@nt:
%"Z@mbl'@ER0n&sOUj\)>5Lo2&^?hc*F^/]T5Y4=aY7&l_fK:>SG.6]2fNYBI5gVrY',b-AX;GV?ldJ^*K(J-nh8ZVC5:mYdD1*M.
%T(VaH`N"0r.2T?=71p"JaaslkLHg/LDJ=*%lo8V(QDd0$C1'd+"-^iK'+]Ue`MjEVe'aAW3kDh_+MAUoRgaoak`JE:T([34[-jSG
%__r9]T"7#I%7iD'+>d4G1A7WB)5895L/bY6[FD/p>mfl_)cku$KRcm-'YRmd?s!p9%VG_Z)eDlp-IUL;YpCkRNN/a6;c<l9^6!)d
%#hNCb;+`LH+rXH&H4BMWeMICIASpZTr\^LJB%O=H3F<*niZ^_]+rb>JiLDf8E&\mqn_!Aigl=]0+N*fok$1iS;fp3FZ4pbQ3X\?c
%5k>Q#WZXatGQkBe1Ks,g8ic/mVD['d[H*#m>?'^jL8YYBPj"2m!JX>k5lGj//Xfj._78K.hV^JX)]TJr7/*cno1#BJq)6%>b,?9S
%WoalHB1F4H/6nM7OnpY00F6nTa/PjZ'SIs<[a^BH\+@;:*I^^FM0:-C>E<&Ann>_L=S9)L=3PR-E^eMrh/kEPOpTj2iK=A0e!(U>
%*t'+3=$=JClGf`Ej89EB.:uFD7PmqhrJE!42=>/0b$.$m9]ds"J0]RaE<e4"-fNJDk4bfHs-KiFUa]!1MmO?9i2?Ir95;qDe_;gc
%lKJS0/t5.2W=A'Io4Um/#kr,t6/?P_C_MgZ:qKobL2>/["Z1dr\O9aG:sE:$'i(9'1`S<X._=n!?k3?O=f4]9"=JR$qYo!AToPDI
%P1`aWB;r(VN+rX]Tha9M^(CL$a-I^>>`O&3_W-)$og1OmUH;-,f"<N[2m_nP>2?cj<hJP?(5S95'n*Ifgr$A$1cK-oRW16c5K"-e
%-Q`HnAF=X\kYp&$,j0RObc@te=;H%9?.U";:6-oE;uH7)GXKj[$8r`/4K\P2U/m'k0"LA%g(:UNDbP:3(&!`^4+]qQp=O>l")d#K
%L]rgT]uk-Wn!5m86tZ8Ooc&?(iSO2_?.+k;$HW4mC[[3[K4O4;aeP@Qo:[#G3&CD6et@"tE=f-:W!<RWQn=2MK#if2#m,\:i9FF3
%eOZXJR+NCqaWa8jP%n";DHNLqIVIfl,%<h]lECuR(4YDH(8=?qK=%Necc\#QDB)NrQhdEoHA:Y`B:L>':V$P/L1o+[5q7M6Nln8?
%K-."[<H=14SFQ()lonS&Mmd=':UPmVA$_>(UJq(N+In;dTa:AbjVO>A)E=+!f14*6%9p)#8rYk&*_N.f]YH6r6q(K?nRT8L>bKKu
%ZircBrsiVhk]!0jisNDMe$+s&'lG#TC7d!9)N2L!c/"9i;59tJb*8&'25\NdToR2uoT8o:WD?@t^:C&POqa\qH/8#XYhu^`2T-'$
%eoKDZK*Fm;arCVKc$!4]_$#/am>RLK`FAp#BGNJ:&jes5g7/7eXUH"L9]A%'D]m1]SJD%EVbgp:`JNO=SmMhs5<n%a#+')[NkCg`
%rg`MQk!h!&egI?BCFbJ3hTHE%UAb)ZIUC4"hk#mPe!0:@jQ5)Z8#2comiR37ng=sAdc(.9N9rss3TnO-DI^&hQCQhGI:F4($dZGa
%.)87;+e3#jX,m-B,Vb6ZrU:Tj!RiqThY9`P-IjDJqj<$iL%ipne'l&p:,ct6kas#U[3(_L<njKt4`AUJ/(JK3L(1@=<Rb,KL$Oa7
%rF&ZW_f83,`?:&p+uUgOh/[/'OMX\[rFC&'4sf#R7NP2\M]++h'Z<grJa#FFF`CVaW!'l4N-2Q"glaUGSg-J'Jer(=SQO09:pF[B
%e?W)Z@`QOL.`2-*GhbfZ'lNJZ57LO[[ac\jdDYr(3)L-QbKoo]-UptFmqKS;OM?!6'ia`]V>!pB7eCZ7KM;IAo(YC>H?t%\o*lj=
%Mk3c>-bk@^FW_COeGL3CF/:<I/26ofkee_FXRKQ0C.#0\p:YE*Mo:dQFU$XuaW!bGSgm=>2M83L%.FO,L^:WVmh?Db^V>u2DLDIX
%e$nQ.iu]WBKT-6=6V8dG4R@)Q9&tn7AC/Zn4?H8N=tD*Z,.PDGQLO-I_/fF0I9GCnUf!AP18thH)=RPDH9Y/2@6)g?j'5'DV>e)o
%o'0PU>J_#D:A`m78,_I!TRe#5\c7]Fa1Y+_P7'(AR,.)g_@X;P0gae<PCi?_Skm"Bl=45bL,Sf)QI0nWXC(i.f7pq$Amqsah39/H
%C+ZnH\EEIWN#qRca&q#aO6bNN%K;)8l<9Z.dAODrJ+0Dmqa:TELoSNg74^cD#)Q;'&Za?bW^F;/p/o#nKBo7i]u8H%2]pAJn>^]g
%a6('"*l<8NWNELDYbs<d7*3CH;Yo2+?Q9d;muWmA67isM--=I>]\JfJK^Be)."7@V6qIElpId9t9CgN">BjpX\eu0p]=$cN/eNB,
%26d/GP^R=AFf'Z'kM#Ur.J7ns^Fa8hatjrm9`/cf+ei<ET"(JE\+$btcF'BpTU;gm@5*rnJpgl1^aX\n*UY\:.Qe]mE\!8g_t^s/
%(gSq;j$Q?Q`&KJ1XpSTkp./EiC+CTslJ9Re-1CKOFkNU87*s`?6gkQdlfEcY+gM9mnBsGG0mkr#a*fqa(p_<U1-C78:;%/$mTs!X
%E&_>%H*qoHWo^W-3DNG<]35a%$t5Nd*2+c>]<B2o8V'`e86'aF-;N_lS9luPGbDr>[5)Kh[7YdZQ-7,!dbD^nX7S;i*fKhPEV>j9
%9q8mM*fBRG5"$+r2)2]q;k/,=47Pa&3oA3?X#0L]\^$n_Qi!:\:J_ET'o.[m2It`\>DG@=ULi[AV!OrrYq'.,4T\O!#T,=o6er7p
%=5H9_4RM4h.>Bj:(W$bLe#V;MDj$-p%u&%:]ha?qP4)=XYP-$2HgD)'oT@l)$d#WbgIc:ea1Br.nb()uq#.[KJX<L!F(r?nHGgdM
%gf0&PA]iAUkB"sfT$=",G*SsL&KFe"(D8p^aU2(8+@_]Zq'?P7Sl[9#"AS6MI0;]$2/*$I]Z[aj\@Ut>)[I*r"SY9mjAl%/Lip/Q
%>-.J]:U*<QYJ4s.gJg2Y3o&L'I@T,-h=Od%Kt*>W6;_^8S0n%,dEIP>00QdQ<9I<2NGqL^VB77CA9o&bZ/'"oCI*>-9`<LFi1d^)
%<q!T)Jd5,b?n.9n>uJ*?+;1mK&A6,<5,O/O6`?_Ubni8O8Y1\?QeXXa+iLTE("I^_X=005f)rM?c'+tHmsPr@39=V9+Bl[hHq=ea
%1K^#2=Q\Z0+J?"4Hc\%VqEkOU]?=+HG?4S6e-u(dfTK=8%CsuTm/&@rr<mk7C+,&B\m/K327Su`)ko1G?+GYXgr\.=gtbU?;dYJO
%kQJ^P1h%3GO?5D!m)jd`f3&#4Au(`K("(W,SR=kE838UI$abQN#L>@)]W'e+Zg+f&ZF@X\l*@>Ma<f=R'72C$5!DE]9mTC1#<^o0
%^)<#>G5O]^PY55R>>01IL%a2'f?g"=oFj#Tq$-89J0hc0O$VR,`^+Woo'8JUD:3lZgjHj1lW99YA]h@9Di#S)KYTuO>=Z3r>[oG#
%hh1UYK5ebprk,7#j5Kl1\)cCu&)hVSQcH5ZLHW-Nr9bWW^?Qd9^=/u=oGUS.Rs05G`s:RSJja)-764FIql'4@/XT[62m>th!"o)@
%<n;=XZ\i$"$#-nRh6#msiPeZ@Y7KT9$(FPKeMR.[#()E"IuOj,;'\.d7dk\XX:f/QW+"<4_^>(S6\NBdO3sT*a#(`*50qea=H1q0
%GYI-r8so(;#*_I&CXNseI"@%c+bh&]oG/ct]_qb.?sh$qV:;mA`>&"[%_&1?%cWC]$gE>\-Upg7nk_QSg1]N[p)tUSe349?W0f)3
%lGmmm*!S4*Fnj,r.t.b'XA5<G$27uuSc/CiH<UhaT4Mroa'g&&HQM^:YKQVpfJgAF%n4obD1aIQDmP_YrNrIT]7m`U6_2+Mo@cRA
%%-j'+V7]%BInB!ilAUl@PZSH+U>'dNE4P,A@j9C!5kQ'^;EUNh)OB=VAm[+/gLU4NHh%!jScA`!s&8eZro66@TAP.uhu<,cDr4=+
%?iMdos8,%Ymsk96J,V*Npu>`[]>+BDhuEK_0>IOBIt49a&-)>#VjG0uiue9bTE"GBIsCdes6Cd,D^>8EqS?P=omcn3s2VnNGQ/0qb2h"~>
%AI9_PrivateDataEnd
